---
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r, code = readLines("setup.R"), cache = FALSE, include=FALSE}
```

```{r, child = "_algorithms.qmd", echo=FALSE}
```

```{r}
knitr::opts_chunk$set(
   echo = TRUE
)
```


# Dynamic programming {#sec-dp}

The term *Dynamic Programming* (*DP*) refers to a collection of algorithms that can be used to compute optimal policies of a model with full information about the dynamics, e.g. a Markov Decision Process (MDP). A DP model must satisfy the *principle of optimality*. That is, an optimal policy must consist for optimal sub-polices or alternatively the optimal value function in a state can be calculated using optimal value functions in future states. This is indeed what is described with the Bellman optimality equations. 

DP do both *policy evaluation* (prediction) and *control*. Policy evaluation give us the value function $v_\pi$ given a policy $\pi$. Control refer to finding the best policy or optimizing the value function. This can be done using the Bellman optimality equations.

Two main problems arise with DP. First, often we do not have full information about the MDP model, e.g. the rewards or transition probabilities are unknown. Second, we need to calculate the value function in all states using the rewards, actions, and transition probabilities. Hence, using DP may be computationally expensive if we have a large number of states and actions.

Note the term programming in DP have nothing to do with a computer program but comes from that the mathematical model is called a "program". 


## Learning outcomes 

By the end of this module, you are expected to:

* Describe the distinction between policy evaluation and control.
* Identify when DP can be applied, as well as its limitations.
* Explain and apply iterative policy evaluation for estimating state-values given a policy.
* Interpret the policy improvement theorem.
* Explain and apply policy iteration for finding an optimal policy.
* Explain and apply value iteration for finding an optimal policy.
* Describe the ideas behind generalized policy iteration.
* Interpret the distinction between synchronous and asynchronous dynamic programming methods.

The learning outcomes relate to the [overall learning goals](#sec-lg-course) number 2, 4, 6, 7, 8, 10 and 12 of the course.

<!-- SOLO increasing: identify · memorise · name · do simple procedure · collect data · -->
<!-- enumerate · describe · interpret · formulate · list · paraphrase · combine · do -->
<!-- algorithms · compare · contrast · explain causes · analyse · relate · derive · -->
<!-- evaluate · apply · argue · theorise · generalise · hypothesise · solve · reflect -->


## Textbook readings

For this week, you will need to read Chapter 4-4.7 in @Sutton18. Read it before continuing this module. A summary of the book notation can be seen [here][sutton-notation].

```{r, echo=FALSE}
link_slide_file_text("05", "dp")
```

## Policy evaluation {#sec-dp-pe}

The state-value function can be represented using the Bellman equation @eq-bell-state:
$$
v_\pi(s) = \sum_{a \in \mathcal{A}}\pi(a | s)\left( r(s,a) + \gamma\sum_{s' \in \mathcal{S}} p(s' | s, a) v_\pi(s')\right).            
$$ {#eq-bm-pol-eval}

If the dynamics are known perfectly, this becomes a system of $|\mathcal{S}|$ simultaneous linear equations in $|\mathcal{S}|$ unknowns $v_\pi(s), s \in \mathcal{S}$. This linear system can be solved using e.g. some software. However, inverting the matrix can be computationally expensive for a large state space. Instead we consider an iterative method and a sequence of value function approximations $v_0, v_1, v_2, \ldots$, with initial approximation $v_0$ chosen arbitrarily e.g. $v_0(s) = 0 \:  \forall s$ (ensuring terminal state = 0). We can use *a sweep* with the Bellman equation to update the values:

\begin{equation}
v_{k+1}(s) = \sum_{a \in \mathcal{A}}\pi(a | s)\left( r(s,a) + \gamma\sum_{s' \in \mathcal{S}} p(s' | s, a) v_k(s')\right) 
\end{equation}

We call this update an *expected update* because it is based on the expectation over all possible next states, rather than a sample of reward from the next state. This update will converge to $v_\pi$ after a number of sweeps of the state-space. Since we do not want an infinite number of sweeps we introduce a threshold $\theta$ (see Figure @fig-policy-eval-alg). Note the algorithm uses two arrays to maintain the state-value ($v$ and $V$). Alternatively, a single array could be used that update values in place, i.e. $V$ is used in place of $v$. Hence, state-values are updated faster. 

```{r fig-policy-eval-alg, echo=FALSE, fig.cap="Iterative policy evaluation [@Sutton18]."}
knitr::include_graphics("img/policy-evalution.png")
```


## Policy Improvement

From the Bellman optimality equation @eq-bell-opt-state we have 

$$
\begin{align}
\pi_*(s) &= \arg\max_{a \in \mathcal{A}} q_*(s, a) \\
         &= \arg\max_{a \in \mathcal{A}} \left(r(s,a) + \gamma\sum_{s' \in \mathcal{S}} p(s' | s, a) v_*(s')\right).
\end{align}
$$ {#eq-pi-det}
That is, a deterministic optimal policy can be found by choosing *greedy* the best action given the optimal value function. If we apply this greed action selection to the value function for a policy $\pi$ and pick the action with most $q$:
$$
\begin{align}
\pi'(s) &= \arg\max_{a \in \mathcal{A}} q_\pi(s, a) \\
         &= \arg\max_{a \in \mathcal{A}} \left(r(s,a) + \gamma\sum_{s' \in \mathcal{S}} p(s' | s, a) v_\pi(s')\right),
\end{align}
$$ {#eq-pi-mark-det}
then 
$$
q_\pi(s, \pi'(s)) \geq q_\pi(s, \pi(s)) = v_\pi(s) \quad \forall s \in \mathcal{S}.
$$
Note if $\pi'(s) = \pi(s), \forall s\in\mathcal{S}$ then the Bellman optimality equation @eq-bell-opt-state holds and $\pi$ must be optimal; Otherwise, 
$$
\begin{align}
  v_\pi(s) &\leq q_\pi(s, \pi'(s)) = \mathbb{E}_{\pi'}[R_{t+1} + \gamma v_\pi(S_{t+1}) | S_t = s] \\
&\leq \mathbb{E}_{\pi'}[R_{t+1} + \gamma q_\pi(S_{t+1}, \pi'(S_{t+1})) | S_t = s] \\
&\leq \mathbb{E}_{\pi'}[R_{t+1} + \gamma (R_{t+2} + \gamma^2 v_\pi(S_{t+2})) | S_t = s] \\
&\leq \mathbb{E}_{\pi'}[R_{t+1} + \gamma R_{t+2} + \gamma^2 q_\pi(S_{t+2}, \pi'(S_{t+2})) | S_t = s] \\
&\leq \mathbb{E}_{\pi'}[R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} + ...)) | S_t = s] \\
&= v_{\pi'}(s),
\end{align}
$$
That is, policy $\pi'$ is strictly better than policy $\pi$ since there is at least one state $s$ for which $v_{\pi'}(s) > v_\pi(s)$. We can formalize the above deductions in a theorem.

::: {.theorem name="Policy improvement theorem"}
Let $\pi$, $\pi'$ be any pair of deterministic policies, such that
\begin{equation}
    q_\pi(s, \pi'(s)) \geq v_\pi(s) \quad \forall s \in \mathcal{S}.
\end{equation}
That is, $\pi'$ is as least as good as $\pi$.
:::


## Policy Iteration

Given the policy improvement theorem we can now improve policies iteratively until we find an optimal policy: 

1. Pick an arbitrary initial policy $\pi$.
2. Given a policy $\pi$, estimate $v_\pi(s)$ via the policy evaluation algorithm.
3. Generate a new, improved policy $\pi' \geq \pi$ by *greedily* picking $\pi' = \text{greedy}(v_\pi)$ using Eq. @eq-pi-mark-det. If $\pi'=\pi$ then stop ($\pi_*$ has been found); otherwise go to Step 2.

The algorithm is given in Figure @fig-policy-ite-alg. The sequence of calculations will be: 
$$\pi_0 \xrightarrow[]{E} v_{\pi_0} \xrightarrow[]{I} \pi_1 \xrightarrow[]{E} v_{\pi_1} \xrightarrow[]{I} \pi_2 \xrightarrow[]{E} v_{\pi_2}  \ldots \xrightarrow[]{I} \pi_* \xrightarrow[]{E} v_{*}$$
The number of steps of policy iteration needed to find the optimal policy are often low.

```{r fig-policy-ite-alg, echo=FALSE, fig.cap="Policy iteration [@Sutton18].", out.width="70%"}
knitr::include_graphics("img/policy-iteration.png")
``` 

We may implement this in Python by having a set of matrices for the transition probabilities and rewards:

*  The list `p_mat` contains a matrix for each action, e.g. if two actions then `p_mat[0]` is a the transition probabilities for doing action 0, i.e. `p_mat[0][s, s'] is the transition probability $p(s'|a,s)$.
* The matrix `r_mat` is a matrix such that `r_mat[s, a]` equals $r(s,a)$.

```{python}
def policy_iteration(p_mat, r_mat, gamma=0.5):
    """
    Performs policy iteration for a given MDP.

    Args:
        p_mat (list): Transition probability matrices for each action.
        r_mat (ndarray): Reward matrix of shape (states, actions).
        gamma (float): Discount factor.

    Returns:
        V (ndarray): Optimal value function.
        policy (ndarray): Optimal policy.
        iteration (int): Number of iterations until convergence.
    """
    policy = np.zeros(NUM_STATES, dtype=int)
    is_policy_stable = False
    iteration = 0

    while not is_policy_stable:
        # Policy evaluation
        A = np.eye(NUM_STATES)
        b = np.zeros(NUM_STATES)
        for s in range(NUM_STATES):
            a = policy[s]
            A[s] -= gamma * p_mat[a][s]
            b[s] = r_mat[s, a]
        V = np.linalg.solve(A, b)

        # Policy improvement
        is_policy_stable = True
        for s in range(NUM_STATES):
            old_action = policy[s]
            action_values = [r_mat[s, a] + gamma * np.dot(p_mat[a][s], V) for a in range(NUM_ACTIONS)]
            policy[s] = int(np.argmax(action_values))
            if old_action != policy[s]:
                is_policy_stable = False
        iteration += 1
    return V, policy, iteration
```


## Value Iteration

Policy iteration requires full policy evaluation at each iteration step. This could be an computationally expensive process which requires may sweeps of the state space. In *value iteration*, the policy evaluation is stopped after one sweep of the state space. Value iteration is achieved by turning the Bellman optimality equation into an update rule:
$$
v_{k+1}(s) = \max_a \left(r(s,a) + \gamma\sum_{s'} p(s'|s, a)v_k(s')\right)
$$
Value iteration effectively combines, in each of its sweeps, one sweep of policy evaluation and one sweep of policy improvement, since it performs a greedy update while also evaluating the current policy. Also, it is important to understand that the value-iteration algorithm does not require a policy to work. No actions have to be chosen. Rather, the state-values are updated and after the last step of value-iteration the optimal policy $\pi_*$ is found:

$$
\pi_*(s) = \arg\max_{a \in \mathcal{A}} \left(r(s,a) + \gamma\sum_{s' \in \mathcal{S}} p(s' | s, a) v_*(s')\right),
$$
The algorithm is given in Figure @fig-value-ite-alg. Since we do not want an infinite number of iterations we introduce a threshold $\theta$. The sequence of calculations will be (where G denotes greedy action selection): 
$$v_{0} \xrightarrow[]{EI} v_{1} \xrightarrow[]{EI} v_{2}  \ldots \xrightarrow[]{EI} v_{*} \xrightarrow[]{G} \pi_{*}$$
```{r fig-value-ite-alg, echo=FALSE, fig.cap="Value iteration [@Sutton18].", out.width="70%"}
knitr::include_graphics("img/value-iteration.png") 
``` 

We may implement this in Python by having a set of matrices for the transition probabilities and rewards as when implemented policy iteration.

```{python}
def value_iteration(p_mat, r_mat,  threshold=1e-5, gamma=0.5):
    """
    Performs value iteration for a given MDP.

    Args:
        p_mat (list): Transition probability matrices for each action.
        r_mat (ndarray): Reward matrix of shape (states, actions).
        gamma (float): Discount factor.
        threshold (float): Convergence threshold.

    Returns:
        V (ndarray): Optimal value function.
        policy (ndarray): Optimal policy.
        iteration (int): Number of iterations until convergence.
    """
    V = np.zeros(NUM_STATES)
    policy = np.zeros(NUM_STATES, dtype=int)
    iteration = 0

    while True:
        delta = 0
        for s in range(NUM_STATES):
            action_values = []
            for a in range(NUM_ACTIONS):
                expected_value = r_mat[s, a] + gamma * np.dot(p_mat[a][s], V)
                action_values.append(expected_value)
            best_value = max(action_values)
            delta = max(delta, abs(best_value - V[s]))
            V[s] = best_value
            policy[s] = int(np.argmax(action_values))
        iteration += 1
        if delta < threshold:
            break
    return V, policy, iteration
```


## Generalized policy iteration

Generalised Policy Iteration (GPI) is the process of letting policy evaluation and policy improvement interact, independent of granularity. For instance, improvement/evaluation can be performed by doing complete sweeps of the state space (policy iteration), or improve the state-value using a single sweep of the state space (value iteration). GPI can also do *asynchronous* updates of the state-value where states are updated individually, in any order. This can
significantly improve computation. Examples on asynchronous DP are

* *In-place DP* mentioned in Section @sec-dp-pe where instead of keeping a copy of the old and new value function in each value-iteration update, you can just update the value functions in-place. Hence asynchronous updates in other parts of the state-space will directly be affected resulting in faster updates. 

* *Prioritized sweeping* where we keep track of how "effective" or "significant" updates to our state-values are. States where the updates are more significant are likely further away from converging to the optimal value. As such, we would like to update them first. For this, we would compute the *Bellman error*:
$$|v_{k+1}(s) - v_k(s)|,$$
and keep these values in a priority queue. You can then efficiently pop the top of it to always get the state you should update next.

* *Prioritize local updates* where you update nearby states given the current state, e.g. if your robot is in a particular region of the grid, it is much more important to update nearby states than faraway ones.

GPI works and will convergence to the optimal policy and optimal value function if the states are visited (in theory) an infinite number of times. That is, you must explore the whole state space for GPI to work.



## Example - Factory Storage {#sec-dp-storage}

Let us consider [Exercise @sec-mdp-1-storage] where a factory has a storage tank with a capacity of 4 $\mathrm{m}^{3}$ for temporarily storing waste produced by the factory. Each week the factory produces $0,1$, 2 or 3 $\mathrm{m}^{3}$ waste with respective probabilities 
$$p_{0}=\displaystyle \frac{1}{8},\ p_{1}=\displaystyle \frac{1}{2},\ p_{2}=\displaystyle \frac{1}{4} \text{ and } p_{3}=\displaystyle \frac{1}{8}.$$ 
If the amount of waste produced in one week exceeds the remaining capacity of the tank, the excess is specially removed at a cost of $30 per cubic metre. At the end of each week there is a regular opportunity to remove all waste from the storage tank at a fixed cost of $25 and a variable cost of $5 per cubic metre. 

The problem can be modelled as a finite MDP where a state denote the amount of waste in the tank at the end of week $n$ just before the regular removal opportunity $$\mathcal{S} = \{ 0,1,2,3,4 \}.$$
The action space is $$\mathcal{A}(s) = \{ empty, keep \}.$$
The expected cost of a given state and action is the cost of empting the container and the expected cost of a special removal during the next week. Hence the expected reward is $$r(s, e) = -(25 + 5s)$$ 
and $$r(s,k) = -30\sum_{i>4-s} (s+i-4)p_i.$$
Finally, the transition probabilities are: 
$$
\begin{align} 
   p(s'|s,k) &= p_{s'-s}\text{ if } s\leq s' \leq 3, \\
   p(4|s,k)  &= \sum_{i\geq 4-s} p_i, \\
   p(s'|s,e) &= p_{s'}\text{ if }  0\leq s' \leq 4, \\
   p(s'|s,a) &=  0 \text{ otherwise.}
\end{align}
$$

For solving the MDP we implement it in Python. First we add transition probabilities to two matrices and reward to a single matrix:

```{python}
import numpy as np
import pandas as pd
import mdptoolbox

# Constants
NUM_STATES = 5       # Tank levels: 0 to 4
NUM_ACTIONS = 2      # Actions: 0 = keep, 1 = empty

# Waste generation probabilities for 0–3 m³
waste_probs = [1/8, 1/2, 1/4, 1/8]
MAX_WASTE = 3        # Max production in one week

# Initialize transition probability matrices for each action
p_mat = [np.zeros((NUM_STATES, NUM_STATES)) for _ in range(NUM_ACTIONS)]

# Initialize reward matrix: rows = states, columns = actions
r_mat = np.zeros((NUM_STATES, NUM_ACTIONS))

# Action 0: keep
# Accumulate overflow costs based on possible next waste productions
for s in range(NUM_STATES):
    expected_overflow_cost = 0
    for i in range(len(waste_probs)):  # i: waste produced (0–3 m³)
        next_state = s + i
        if next_state <= 4:
            p_mat[0][s, next_state] += waste_probs[i]
        else:
            # Clamp overflowed states to 4, calculate overflow cost
            p_mat[0][s, 4] += waste_probs[i]
            overflow = next_state - 4
            expected_overflow_cost += overflow * 30 * waste_probs[i]
    r_mat[s, 0] = -expected_overflow_cost  # Reward is negative cost

# Action 1: empty
# Transition probabilities are based only on new waste produced
# Tank is reset to empty before production
for s in range(NUM_STATES):
    for i in range(len(waste_probs)):
        p_mat[1][s, i] = waste_probs[i]  # Transition to state i
    r_mat[s, 1] = -(25 + 5 * s)  # Cost of emptying tank

# Output results
state_labels = [f"s{i}" for i in range(NUM_STATES)]
action_labels = ["keep", "empty"]

# Display reward matrix
reward_df = pd.DataFrame(r_mat, index=state_labels, columns=action_labels)
print("Reward matrix with labels:")
print(reward_df)

# Display transition matrix for 'keep' action
transition_df = pd.DataFrame(p_mat[0], index=state_labels, columns=state_labels)
print("\nTransition matrix for action 'keep':")
print(transition_df)

# Display transition matrix for 'keep' action
transition_df = pd.DataFrame(p_mat[1], index=state_labels, columns=state_labels)
print("\nTransition matrix for action 'keep':")
print(transition_df)
```

We now can run policy and value iteration:

```{python}
# Run Value Iteration
V_vi, policy_vi, num_iters_vi = value_iteration(p_mat, r_mat)

# Run Policy Iteration
V_pi, policy_pi, num_iters_pi = policy_iteration(p_mat, r_mat)
```

Let us compare the results (which should be the same)

```{python}
# Display optimal policies and value functions
print("\nValue Iteration Results:")
print("Optimal policy (0 = keep, 1 = empty):", policy_vi)
print("Value function:", V_vi)
print("Converged in iterations:", num_iters_vi)

print("\nPolicy Iteration Results:")
print("Optimal policy (0 = keep, 1 = empty):", policy_pi)
print("Value function:", V_pi)
print("Converged in iterations:", num_iters_pi)

# Prepare output
df_result = pd.DataFrame({
    "State": state_labels,
    "V (vi)": V_vi.round(4),
    "Policy (vi)": [action_labels[i] for i in policy_vi],
    "V (pi)": V_pi.round(4),
    "Policy (pi)": [action_labels[i] for i in policy_pi],
})
print(df_result)
```

There is also a library that already has implemented policy and value iteration.

```{python}
import mdptoolbox as mdpbox

# Solve using Value Iteration
vi = mdpbox.mdp.ValueIteration(p_mat, r_mat, 0.5)
vi.run()

# Display optimal policy and value function
print("\nOptimal policy (0 = keep, 1 = empty):", vi.policy)
print("Value function:", vi.V)
```

Finally, let us try to solve the problem with a discount rate of 0.99:

```{python}
# Solve using Value Iteration
vi = mdpbox.mdp.PolicyIteration(p_mat, r_mat, 0.99)
vi.run()

# Display optimal policy and value function
print("\nOptimal policy (0 = keep, 1 = empty):", vi.policy)
print("Value function:", vi.V)
```

Note we now empty also at 3 m$^3$.


## Summary 

Read Chapter 4.8 in @Sutton18.

## Exercises

`r strExercises`

### Exercise - Gambler's problem {#sec-dp-gambler}

Consider the gambler's problem in [Exercise @sec-mdp-1-gambler].





1) Build the model in Python

```{r}
#' MDP model for the gamblers problem.
#' @param prH Probability of head.
#' @return The mdp object (R6 class).
buildGamblerModel <- function(prH) {
   mdp <- MDPClass$new()      # initialize mdp object
   mdp$addStateSpace(0:101)   # add states (states are keys in a hash and are always converted to strings), 101 represent finished
   for (s in mdp$getStateKeys()) {  # add actions for each state (only the key of the action)
      i <- as.numeric(s)
      if (i > 0 & i < 100) mdp$addActionSpace(s, 1:min(i, 100-i))
      if (i == 0) mdp$addActionSpace(s, "Loose")  
      if (i == 100) mdp$addActionSpace(s, "Win")  
      if (i == 101) mdp$addActionSpace(s, "Dummy")
   }
   # Add trans pr and expected reward to the actions
   for (s in as.character(1:99)) {
      for (a in mdp$getActionKeys(s)) {
         iS <- as.numeric(s)
         iA <- as.numeric(a)
         transPr <- c(prH, 1- prH)
         names(transPr) <- c(iS+iA, iS-iA)
         mdp$addAction(s, a, r = 0, pr = transPr)
      }
   }
   # add special actions
   mdp$addAction(s = "0", a = "Loose", r = 0, pr = c("101" = 1))
   mdp$addAction(s = "100", a = "Win", r = 1, pr = c("101" = 1))
   mdp$addAction(s = "101", a = "Dummy", r = 0, pr = c("101" = 1))
   return(mdp)
}
```

We make a function that return the mdp object

```{python, eval=FALSE}
import numpy as np
import mdptoolbox
import matplotlib.pyplot as plt

# Parameters
goal = 100  # Final target capital
ph = 0.4    # Probability of winning
gamma = 1.0  # Discount factor (no discounting)

n_states = goal + 1  # States range from 0 (lost all) to 100 (goal)
actions = list(range(1, goal))  # Possible stake sizes

# Lists to hold transition matrices and reward vectors
p_mat_list = []
r_mat_list = []

# Construct the MDP model for each action (stake size)
for a in actions:
    P = np.zeros((n_states, n_states))  # Transition matrix for action 'a'
    r = np.zeros(n_states)  # Reward vector for action 'a'

    for s in range(n_states):
        if s == 0 or s == goal or a > s or a > (goal - s):
            # Absorbing or illegal state/action: self-transition only
            P[s, s] = 1.0
        else:
            win_state = s + a
            lose_state = s - a

            # Probability of winning and transitioning to win_state
            P[s, win_state] += ph

            # Reward if win results in reaching goal state
            if win_state == goal:
                r[s] += ph * 1.0

            # Probability of losing and transitioning to lose_state
            P[s, lose_state] += 1 - ph

    p_mat_list.append(P)
    r_mat_list.append(r)

# Final transition and reward matrices
p_mat = [p for p in p_mat_list]
r_mat = [r for r in r_mat_list]

# Run Value Iteration algorithm from MDPtoolbox
vi = mdptoolbox.mdp.ValueIteration(p_mat, r_mat, gamma)
vi.run()

# Plot value function and policy
plt.figure(figsize=(10, 4))

# Value function
plt.subplot(1, 2, 1)
plt.plot(vi.V)
plt.title("Value Function")
plt.xlabel("Capital")
plt.ylabel("Value")

# Optimal policy: best stake at each capital
plt.subplot(1, 2, 2)
policy_plot = np.zeros(n_states)
for s in range(1, goal):
    policy_plot[s] = actions[vi.policy[s]]  # Convert action index to actual stake
plt.plot(policy_plot)
plt.title("Optimal Policy (Stake)")
plt.xlabel("Capital")
plt.ylabel("Stake")

plt.tight_layout()
plt.show()




import numpy as np
import pandas as pd
import mdptoolbox

# Constants
STATES = 101   # assume state = state index in matrix
ACTIONS = 51   # assume action = action index in matrix     

# Initialize transition probability matrices for each action
loose = 0
win = 100
ph = 0.4    # Probability of winning
p_mat = [np.zeros((STATES, STATES)) for _ in range(ACTIONS)]

# Initialize reward matrix: rows = states, columns = actions
r_mat = np.zeros((STATES, ACTIONS))

for a in range(ACTIONS-1):
   for s in range(STATES-1):
      if s == loose or s == win or a > s or a > (win - s) or a == 0:
            # Absorbing or illegal state/action: self-transition only
            p_mat[a][s, s] = 1.0
      else:
         win_state = s + a
         lose_state = s - a

         # Probability of winning and transitioning to win_state
         p_mat[a][s, win_state] = ph

         # Reward if win results in reaching goal state
         if win_state == win:
            print(s, a)
            r_mat[s, a] = ph * 1.0

         # Probability of losing and transitioning to lose_state
         p_mat[a][s, lose_state] = 1 - ph
      


# Output results
state_labels = [f"s{i}" for i in range(STATES-1)]
action_labels = [f"bet {i}" for i in range(ACTIONS-1)]

# Display reward matrix
reward_df = pd.DataFrame(r_mat, index=state_labels, columns=action_labels)
print("Reward matrix with labels:")
print(reward_df)

# Display transition matrix for 'keep' action
transition_df = pd.DataFrame(p_mat[0], index=state_labels, columns=state_labels)
print("\nTransition matrix for action 'keep':")
print(transition_df)

# Display transition matrix for 'keep' action
transition_df = pd.DataFrame(p_mat[1], index=state_labels, columns=state_labels)
print("\nTransition matrix for action 'keep':")
print(transition_df)
```









2) Solve the problem using value iteration with $p_h = 0.4$. Plot the policy with states 1-99 on the x-axis and action on the y-axis. Plot the state-values given states 1-99 on the x-axis. Your policy may not look like the policy in the book, why?


```{r}
solveGambler <- function(prH) {
   mdp <- buildGamblerModel(prH)
   mdp$valueIte(gamma = 1, theta = 0.0001)
   df <- left_join(mdp$getStateValues(), mdp$getPolicy(), by = "state") %>% 
      select(-pr)
   df <- df %>% 
      mutate(state = as.numeric(state)) %>% 
      filter(state > 0, state < 100) %>% 
      mutate(action = as.numeric(action)) 
   ptPr <- ggplot(df, aes(x = state, y = v)) +
      geom_col() + 
      labs(title = str_c("State-values for prH=", prH))
   ptPolicy <- ggplot(df, aes(x = state, y = action)) +
      geom_col() +
      labs(title = str_c("Optimal policy for prH=", prH))
   return(list(ptPr = ptPr, ptPolicy = ptPolicy, policy = df))   
}
res04 <- solveGambler(prH = 0.4)
res04$ptPr
res04$ptPolicy
```

There is a lot of different optimal policies. In general since $p_h$ is below 0.5 we want to find a policy with as few flips as possible.


3) Solve the problem using value iteration with $p_h = 0.22$ and $0.55$ and plot the results. What is the probability of winning in state 10 and 67?

```{r}
# Solve the problems
res025 <- solveGambler(prH = 0.25)
res055 <- solveGambler(prH = 0.55)
# State-values
res025$policy %>% filter(state %in% c(10,67))
res055$policy %>% filter(state %in% c(10,67))
# Plot results
library(patchwork)
(res025$ptPr + res055$ptPr) / (res025$ptPolicy + res055$ptPolicy)
```


### Exercise - Maintenance problem {#sec-dp-maintain}

At the beginning of each day a piece of equipment is inspected to reveal its actual working condition. The equipment will be found in one of the working conditions $s = 1,\ldots, N$ where the working condition $s$ is better than the working condition
$s+1$. 

The equipment deteriorates in time. If the present working condition is $s$ and no repair is done, then at the beginning of the next day the equipment has working condition $s'$ with probability $q_{ss'}$. It is assumed that $q_{ss'}=0$ for $s'<s$ and $\sum_{s'\geq s}q_{ss'}=1$. 

The working condition $s=N$ represents a malfunction that requires an enforced repair taking two days. For the intermediate states $s$ with $1<s<N$ there is a choice between preventively repairing the equipment and letting the equipment operate for the present day. A preventive repair takes only one day. A repaired system has the working condition $s=1$. 

The cost of an enforced repair upon failure is $C_{f}$ and the cost of a preemptive repair in working condition $s$ is $C_{p,s}$. We wish to determine a maintenance rule which minimizes the repair cost.

The problem can be formulated as an MDP. Since an enforced repair takes two days and the state of the system has to be defined at the beginning of each day, we need an auxiliary state for the situation in which an enforced repair is in progress already for one day.


<!-- Q1 -->
```{r, solution=TRUE, text="$$\\mathcal{S}=\\{1,2,\\ \\ldots,\\ N,\\ N+1\\}.$$ State $s$ with $1\\leq s\\leq N$ corresponds to the situation in which an inspection reveals working condition $s$, while state $N+1$ corresponds to the situation in which an enforced repair is in progress already for one day."}
```

1) Define the state space $\mathcal{S}$, i.e. the the set of possible states of the system.


<!-- Q2 -->
```{r, solution=TRUE, text="The set of possible actions in state $s$ is chosen as $$\\mathcal{A}(1)=\\{0\\},\\ \\mathcal{A}(s)=\\{0,1\\} \\text{ for } 1<s<N, \\mathcal{A}(N)=\\mathcal{A}(N+1)=\\{2\\}.$$"}
```

2) Consider actions
$$
a=\left\{\begin{array}{ll}
0 & \text{if no repair.}\\
1 & \text{if preventive repair.}\\
2 & \text{if forced repair.}\\
\end{array}\right.
$$
Define the action space $\mathcal{A}(s)$ for all states $s$.


<!-- Q3 -->
```{r, solution=TRUE, text="The expected reward is $r(N+1,2) = 0$ and for $0 < s < N$ is $r(s,0) = 0$, $r(s,1) = -C_{ps}$. Finally, $r(N,2) = -C_{f}$ and $r(N+1,2) = 0$."}
```

3) Assume that the number of possible working conditions equals $N=5$. What is the expected reward $r(s,a)$?


<!-- Q4 -->
```{r, solution=TRUE, text="The transition probabilities $p(s'|s,a)$: $$p(s'|s,0) = q_{ij}, \\text{ for } 1 \\leq s<N,$$ $$p(1|s,1) = 1 \\text{ for } 1<s<N,$$ $$p(N+1|N,2) = p(1|N+1,2) =1,$$ and zero otherwise."}
```

4) What is the transition probabilities?


<!-- Q5 -->
5) Try make a drawing of the state-expanded hypergraph for stage $t$ and $t+1$.


<!-- Q6 -->
```{r, solution=TRUE}
Q <- matrix(c(
   0.90, 0.10, 0, 0, 0,
   0, 0.80, 0.10, 0.05, 0.05,
   0, 0, 0.70, 0.10, 0.20,
   0, 0, 0, 0.50, 0.50), nrow=4, byrow=T)
row.names(Q) <- str_c(1:4)
colnames(Q) <- str_c(1:5)

mdp <- MDPClass$new()      # initialize mdp object
mdp$addStateSpace(1:6)   # add states (states are keys in a hash and are always converted to strings), 101 represent finished
for (s in mdp$getStateKeys()) {  # add actions for each state (only the key of the action)
   i <- as.numeric(s)
   if (i == 1) mdp$addActionSpace(s, "nr")  
   if (i > 1 & i <= 4) mdp$addActionSpace(s, c("nr", "pr"))
   if (i == 5) mdp$addActionSpace(s, "fr")  
   if (i == 6) mdp$addActionSpace(s, "fr")
}
# check some of the keys
mdp$getActionKeys("2")
mdp$getActionKeys("1")
mdp$getActionKeys("6")

## Add trans pr and expected reward to the actions
cPR<-c(0,7,7,5,0,0)
for (s in mdp$getStateKeys()) {
   for (a in mdp$getActionKeys(s)) {
      i <- as.numeric(s)
      if (a == "nr") {
         rew <- 0
         transPr <- Q[i, Q[i,] > 0]
      }
      if (a == "pr") {
         rew <- -cPR[i]
         transPr <- 1
         names(transPr) <- "1"
      }
      if (a == "fr" & i == 5) {
         rew = -10
         transPr <- 1
         names(transPr) <- "6"
      } 
      if (a == "fr" & i == 6) {
         rew = 0
         transPr <- 1
         names(transPr) <- "1"
      } 
      mdp$addAction(s, a, r = rew, pr = transPr)
   }
}
# check some of the keys
mdp$getActionInfo("1")
mdp$getActionInfo("2")
mdp$getActionInfo("5")
mdp$getActionInfo("6")
```

6) The repair costs are given by $C_{f}=10,\ C_{p2}=7,\ C_{p3}=7$ and $C_{p4}=5$ and the deterioration probabilities $q_{ij}$ are given by matrix Q:

   ```{r}
   Q <- matrix(c(
      0.90, 0.10, 0, 0, 0,
      0, 0.80, 0.10, 0.05, 0.05,
      0, 0, 0.70, 0.10, 0.20,
      0, 0, 0, 0.50, 0.50), nrow=4, byrow=T)
   Q
   ```
   
   Build the MDP in R.


<!-- Q7 -->
```{r, solution=TRUE, text="In state 3 the discounted cost is 2.53."}
mdp$valueIte(gamma = 0.6)
# mdp$policyIte(gamma = 0.6)
df <- left_join(mdp$getStateValues(), mdp$getPolicy(), by = "state") %>% 
select(-pr)
df
```

7) Find the optimal policy given a discount rate of $\gamma = 0.6$. What is the average discounted cost of being in state 3?


<!-- Q8 -->
```{r, solution=TRUE, text="A higher discont rate put more weight on future values, i.e. you have to look further ahead resulting in more iterations. This also results in a higher disconted cost, since costs in the future have higher weight. The optimal policy looks a bit different compared to the policy we found for $\\gamma = 0.6$. However, if the policy is the same for two different discount rates then you will have the same rewards/costs and hence the same cost of the policy. The discounted cost will not be the same since you use the discount rate to say how much you value the future."}
mdp$valueIte(gamma = 0.99)
# mdp$policyIte(gamma = 0.99)
df1 <- left_join(mdp$getStateValues(), mdp$getPolicy(), by = "state") %>% 
select(-pr)
df
df1
```

8) Find the optimal policy using value iteration given a discount rate of $\gamma = 0.99$. Why do the algorithm need more iterations compared to when $\gamma = 0.6$? Why are the average discounted costs higher compared to when $\gamma = 0.6$? Is it more costly to use this optimal policy?



### Exercise - Car rental {#sec-dp-rental}

Consider the car rental problem in [Exercise @sec-mdp-2-car]. Note the inventory dynamics (number of cars) at each parking lot is independent of the other given an action $a$. Let us consider Location 1 and assume that we are in state $x$ and chose action $a$.

The reward equals the reward of rentals minus the cost of movements. Note we have $\bar{x} = x - a$ and $\bar{y} = x + a$ after movement. Hence $$r(s,a) = \mathbb{E}[10(\min(D_1, \bar{x}) + \min(D_2, \bar{y}) )-2\mid a \mid]$$ 
where $$\mathbb{E}[\min(D, z)] = \sum_{i=0}^{z-1} i\Pr(D = i) + \Pr(D \geq z)z.$$

Let us make a reward function in R:

```{r}
# Mean of min(D,z). Assume z >= 0
meanMinD <- function(z, lambda) {
   if (z == 0) return(0)
   sum(dpois(0:(z-1), lambda) * 0:(z-1)) + ppois(z-1, lambda, lower.tail = F) * z
}

reward <- function(x, y, a) {
   10 * meanMinD(x-a, 3) + 10 * meanMinD(y+a, 4) - 2 * abs(a)
}

reward(20, 0, 0)
reward(20, 0, 5)
```

Let us have a look at the state transition, the number of cars after rental requests $\bar{x} - \min(D_1, \bar{x})$. Next, the number of returned cars are added: $\bar{x} - \min(D_1, \bar{x}) +  H_1$. Finally, note that if this number is above 20 (parking lot capacity), then we only have 20 cars, i.e. the inventory dynamics (number of cars at the end of the day) is $$X = \min(20,  \bar{x} - \min(D_1, \bar{x}) +  H_1))).$$ 
Similar for Location 2, if $\bar{y}= y+a$ we have $$Y = \min(20, \bar{y} - \min(D_2, \bar{y}) + H_2)).$$

Since the dynamics is independent given action a, the transition probabilities can be split: $$ p((x',y') | (x,y), a) = p(x' | x, a) p(y' | y, a).$$ 

Let us consider Location 1. If $x' < 20$ then 
$$
\begin{align} 
   p(x' | x, a) &= \Pr(x' = x-a - \min(D_1, x-a) +  H_1)\\ 
                &= \Pr(x' = \bar{x} - \min(D_1, \bar{x}) +  H_1)\\ 
                &= \Pr(H_1 - \min(D_1, \bar{x}) = x' - \bar{x}) \\ 
                &= \sum_{i=0}^{\bar{x}} \Pr(\min(D_1, \bar{x}) = i)\Pr(H_1 = x' - \bar{x} + i) \\ 
                &= \sum_{i=0}^{\bar{x}}\left( (\mathbf{1}_{(i<\bar{x})} \Pr(D_1 = i) + \mathbf{1}_{(i=\bar{x})} \Pr(D_1 \geq \bar{x}))\Pr(H_1 = x' - \bar{x} + i)\right) \\
                &= p(x' | \bar{x}).
\end{align}
$$ 

If $x' = 20$ then 
$$
\begin{align} 
   p(x' | x, a) &= \Pr(20 \leq \bar{x} - \min(D_1, \bar{x}) +  H_1)\\ 
                &= \Pr(H_1 - \min(D_1, \bar{x}) \geq 20 - \bar{x}) \\ 
                &= \sum_{i=0}^{\bar{x}} \Pr(\min(D_1, \bar{x}) = i)\Pr(H_1 \geq 20 - \bar{x} + i) \\ 
                &= \sum_{i=0}^{\bar{x}}\left( (\mathbf{1}_{(i<\bar{x})} \Pr(D_1 =i) + \mathbf{1}_{(i=\bar{x})} \Pr(D_1 \geq \bar{x}))\Pr(H_1 \geq 20 - \bar{x} + i)\right)\\
                &= p(x' = 20 | \bar{x}).
\end{align}
$$ 

Similar for Location 2. That is we need to calculate and store $p(x'| \bar{x})$ and $p(y'| \bar{y})$ to find $$ p((x',y') | (x,y), a) = p(x' | \bar{x} = x-a) p(y' | \bar{y} = y+a).$$ This is done in R using two matrices:

```{r car-transPr}
library(tidyverse)
lD <- c(3,4)
lH <- c(3,2)

# Pr(min(D_i, k) = d)
# assume that d<=k
prMin <- function(i, k, d) {
   if (k == 0) return(1)
   v <- c(dpois(0:(k-1), lD[i]), ppois(k-1, lD[i], lower.tail = F))
   return(v[d+1])
   # if (d == k) return(1 - pD[i, d])     # 1-pr(D <= d-1)
   # if (d < k) return(dD[i, d+1])
   # return(NA)
}

# Pr(xN | x, a)
transPrX <- function(xN, xBar) {
   if (xN == 20) {
      return(sum(prMin(1, xBar, 0:(xBar)) * ppois(xN - xBar + 0:(xBar) - 1, lH[1], lower.tail = F)))
   }
   if (xN < 20) {
      return(sum(prMin(1, xBar, 0:(xBar)) * dpois(xN - xBar + 0:(xBar), lH[1])))
   }
   error("Error in calculations!")
}

# Pr(yN | y, a)
transPrY <- function(yN, yBar) {
   if (yN == 20) {
      return(sum(prMin(2, yBar, 0:(yBar)) * ppois(yN - yBar + 0:(yBar) - 1, lH[2], lower.tail = F)))
   }
   if (yN < 20) {
      return(sum(prMin(2, yBar, 0:(yBar)) * dpois(yN - yBar + 0:(yBar), lH[2])))
   }
   error("Error in calculations!")
}

mat <- matrix(0, nrow = 21, ncol = 21)
colnames(mat) <- str_c(0:20)
rownames(mat) <- str_c(0:20)
matTransPrX <- mat     # matTransPrX[r,c] = Pr(xN = c-1 | xBar = r-1)
matTransPrY <- mat
for (r in 1:21) {
   xBar <- r-1
   for (c in 1:21) {
      xN <- c-1
      matTransPrX[r,c] <- transPrX(xN, xBar)
      matTransPrY[r,c] <- transPrY(xN, xBar)
   }
}
# check
rowSums(matTransPrX)
rowSums(matTransPrY)
```



<!-- Q1 -->
```{r, solution=TRUE}
mdp <- MDPClass$new()      # initialize mdp object
states <- expand_grid(x = 0:20, y = 0:20) %>% 
   mutate (state = str_c(x,",",y)) %>% 
   pull(state)
mdp$addStateSpace(states)   # add states (states are keys in a hash and are always converted to strings)
for (s in mdp$getStateKeys()) {  # add actions for each state (only the key of the action)
    x <- str_split(s, ",", simplify = T)
    y <- as.numeric(x[2])
    x <- as.numeric(x[1])
    a <- (-min(5, y, 20-x)):(min(5, x, 20-y))
    mdp$addActionSpace(s, a)
}
# check some of the keys
mdp$getActionKeys("6,7")
mdp$getActionKeys("0,3")
mdp$getActionKeys("0,0")
mdp$getActionKeys("20,20")
mdp$getStateKeys()

# Add trans pr and expected reward to the actions. This may take some time!!
states <- expand_grid(x = 0:20, y = 0:20) %>% 
   mutate (state = str_c(x,",",y), pr = 0) 
for (s in mdp$getStateKeys()) {
   for (aS in mdp$getActionKeys(s)) {
      x <- str_split(s, ",", simplify = T)
      y <- as.numeric(x[2])
      x <- as.numeric(x[1])
      a <- as.numeric(aS) 
      xBar <- x-a
      yBar <- y+a
      for (i in 1:nrow(states)) {
         states$pr[i] <- matTransPrX[xBar+1, states$x[i] + 1] * matTransPrX[yBar+1, states$y[i] + 1]
      }
      transPr <- states$pr
      names(transPr) <- states$state
      mdp$addAction(s, aS, r = reward(x, y, a), pr = transPr)
   }
}
# check some of the keys
mdp$getActionInfo("20,20")
sum(mdp$getActionInfo("20,20")$"0"$pr)
mdp$getActionInfo("20,0")
sum(mdp$getActionInfo("20,20")$"0"$pr)
```

```{r, hint=TRUE, eval=FALSE}
mdp <- MDPClass$new()      # initialize mdp object
states <- expand_grid(x = 0:20, y = 0:20) %>% 
   mutate (state = str_c(x,",",y)) %>% 
   pull(state)
mdp$addStateSpace(states)   # add states (states are keys in a hash and are always converted to strings)
for (s in mdp$getStateKeys()) {  # add actions for each state (only the key of the action)
    x <- str_split(s, ",", simplify = T)
    y <- as.numeric(x[2])
    x <- as.numeric(x[1])
    ___
    mdp$addActionSpace(s, a)
}
# check some of the keys
mdp$getActionKeys("6,7")
mdp$getActionKeys("0,3")
mdp$getActionKeys("0,0")
mdp$getActionKeys("20,20")
mdp$getStateKeys()

# Add trans pr and expected reward to the actions. This may take some time!!
states <- expand_grid(x = 0:20, y = 0:20) %>% 
   mutate (state = str_c(x,",",y), pr = 0) 
for (s in mdp$getStateKeys()) {
   for (aS in mdp$getActionKeys(s)) {
      x <- str_split(s, ",", simplify = T)
      y <- as.numeric(x[2])
      x <- as.numeric(x[1])
      a <- as.numeric(aS) 
      xBar <- x-a
      yBar <- y+a
      ___
      mdp$addAction(s, aS, r = reward(x, y, a), pr = transPr)
   }
}
# check some of the keys
mdp$getActionInfo("20,20")
sum(mdp$getActionInfo("20,20")$"0"$pr)
mdp$getActionInfo("20,0")
sum(mdp$getActionInfo("20,20")$"0"$pr)
```

1) Build the model in R.



<!-- Q2 -->
```{r, solution=TRUE, text="The threshold value affect the precision of the state-value. Here values with a difference below 0.9 is considered as the same."}
mdp$policyIte(gamma = 0.5, theta = 0.9)
df <- left_join(mdp$getStateValues(), mdp$getPolicy(), by = "state") %>% 
   select(-pr) %>% 
   separate(state, into = c("x", "y"), sep = ",", remove = F, convert = T) %>% 
   mutate(a = as.numeric(action))
df %>% filter(state %in% c("1,15", "10,3"))
ggplot(df, aes(x = y, y = x, label = a, col = factor(a))) +
   geom_label() +
   scale_fill_brewer(palette = "Set2") + 
   labs(title = str_c("Optimal policy for gamma = 0.9")) + 
   theme(legend.position = "none")
```

2) Solve the problem using policy iteration with a discount rate $\gamma = 0.5$ and threshold parameter $\theta = 0.9$. What is the optimal action in state $(1,15)$? What is the expected total discounted reward of being in state $(10,3)$? How do theta affect the state-values? Make a plot of the optimal policy with $x$ on the y-axis and $y$ on the x-axis, plotting the action. 



<!-- Q3 -->
```{r, solution=TRUE}
mdp$valueIte(gamma = 0.5, theta = 0.9)
df1 <- left_join(mdp$getStateValues(), mdp$getPolicy(), by = "state") %>% 
   select(-pr) %>% 
   separate(state, into = c("x", "y"), sep = ",", remove = F, convert = T) %>% 
   mutate(a = as.numeric(action))
all(abs(df$v - df1$v) <= 0.9)  # check if state values af close to each other (should return TRUE)
any(df$action != df1$action)   # there may be different policies giving the same approx. state-value
```

3) Solve the problem using value iteration. Check if the policy and state-values are the same as in Question 1. If not why could this be okay?



<!-- Q4 -->
```{r, solution=TRUE, text="A higher discount rate result in higher discounted rewards since look further into the future."}
mdp$policyIte(gamma = 0.9, theta = 0.9)
df <- left_join(mdp$getStateValues(), mdp$getPolicy(), by = "state") %>% 
   select(-pr) %>% 
   separate(state, into = c("x", "y"), sep = ",", remove = F, convert = T) %>% 
   mutate(a = as.numeric(action))
df
ggplot(df, aes(x = y, y = x, label = a, col = factor(a))) +
   geom_label() +
   scale_fill_brewer(palette = "Set2") + 
   labs(title = str_c("Optimal policy for gamma = 0.9")) + 
   theme(legend.position = "none")
```

4) Solve the problem using policy iteration with a discount rate $\gamma = 0.9$ and threshold parameter $\theta = 0.9$. Why are the state-values higher now?




```{r links, child="links.md", include=FALSE}
```


