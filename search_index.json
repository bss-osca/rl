[["index.html", "Reinforcement Learning for Business (RL) Course notes About the course notes Learning outcomes Purpose of the course Learning goals of the course Reinforcement learning textbook Course organization Programming software Acknowledgements and license Exercises", " Reinforcement Learning for Business (RL) Course notes Lars Relund Nielsen 2022-11-04 About the course notes This site contains course notes for the course “Reinforcement Learning for Business” held at Aarhus BSS. It consists of a set of learning modules. The course is an elective course mainly for the Operations and Supply Chain Analytics and Business Intelligence programme and intended to give you an introduction to Reinforcement Learning (RL). You can expect the site to be updated while the course runs. The date listed above is the last time the site was updated. Learning outcomes By the end of this module, you are expected to: Understand the prerequisites and the goals for the course. Have downloaded the textbook. Know how the course is organized. Installed R and RStudio. Annotated the online notes. The learning outcomes relate to the overall learning goals number 3, 5 and 6 of the course. Purpose of the course The purpose of this course is to give an introduction and knowledge about reinforcement learning (RL). RL may be seen as An approach of modelling sequential decision making problems. An approach for learning good decision making under uncertainty from experience. Mathematical models for learning-based decision making. Trying to optimize decisions in a sequential decision model. That is, making a good sequence of decisions. Estimating and finding near optimal decisions of a stochastic process with sequential decision making. A model where given a state of a system, the agent wants to take actions to maximize future reward. Often the agent does not know the underlying setting and, thus, is bound to learn from experience. RL can also be seen as a way of modelling intuition. As humans, we often learn by trial and error. For instance, when playing a game, our strategy is based on the game rules and what we have experienced works based on previous plays. In a RL setting, the system has specific states, actions and reward structure, that is, the rules of the game, and it is up to the agent how to solve the game, i.e. find actions that maximize the reward. Typically, the agent starts with totally random trials and finishes with sophisticated tactics and superhuman skills. By leveraging the power of search and many trials, RL is an effective way to find good actions. A classic RL example is the bandit problem: You are in a casino and want to choose one of many slot machines (one-armed bandits) in each round. However, you do not know the distribution of the payouts of the machines. In the beginning, you will probably just try out machines (exploration) and then, after some learning, you will prefer the best ones (exploitation). Now the problem arises that if you use a slot machine frequently, you will not be able to gain information about the others and may not even find the best machine (exploration-exploitation dilemma). RL focuses on finding a balance between exploration of uncharted territory and exploitation of current knowledge. The course starts by giving a general overview over RL and introducing bandit problems. Next, the mathematical framework of Markov decision processes (MDPs) is given as a classical formalization of sequential decision making. In this case, actions influence not just immediate rewards, but also subsequent situations, or states, and therefore also future rewards. An MDP assumes that the dynamics of the underlying process and the reward structure are known explicitly by the decision maker. In the last part of the course, we go beyond the case of decision making in known environments and study RL methods for stochastic control. Learning goals of the course After having participated in the course, you must, in addition to achieving general academic skills, demonstrate: Knowledge of RL for Bandit problems Markov decision processes and ways to optimize them the exploration vs exploitation challenge in RL and approaches for addressing this challenge the role of policy evaluation with stochastic approximation in the context of RL Skills to define the key features of RL that distinguishes it from other machine learning techniques discuss fundamental concepts in RL describe the mathematical framework of Markov decision processes formulate and solve Markov and semi-Markov decision processes for realistic problems with finite state space under different objectives apply fundamental techniques, results and concepts of RL on selected RL problems. given an application problem, decide if it should be formulated as a RL problem and define it formally (in terms of the state space, action space, dynamics and reward model) Competences to identify areas where RL are valuable select and apply the appropriate RL model for a given business problem interpret and communicate the results from RL Reinforcement learning textbook The course uses the free textbook Reinforcement Learning: An Introduction by Sutton and Barto (2018). The book is essential reading for anyone wishing to learn the theory and practice of modern Reinforcement learning. Read the weekly readings before the lecture to understand the material better, and perform better in the course. Sutton and Barto’s book is the most cited publication in RL research, and is responsible for making RL accessible to people around the world. The new edition, released in 2018, offers improved notation and explanations, additional algorithms, advanced topics, and many new examples; and it’s totally free. Just follow the citation link to download it. Course organization Each week considers a learning module. A learning module is related to a chapter in the textbook. The learning path in a typical week are Before lectures: Read the chapter in the textbook and consider the extra module material. Lectures (at campus). After lectures: Module Exercises (in groups). Lectures will not cover all the curriculum but focus on the main parts. In some weeks tutorials are given and we focus on a specific RL problem. This module gives a short introduction to the course. Next, the site consists of different parts each containing teaching modules about specific topics: Part I gives you a general introduction to RL and the bandit problem. Part II consider RL sequential decision problems where the state and state and action spaces are small enough so values can be represented as arrays, or tables. We start by considering bandit problems (Module 2) a RL problem in which there is only a single state. Next, Markov decision processes (the full model known) are considered as a general modelling framework (Module 3) and the concept of policies and value functions are discussed (Module 4). Model-based algorithms for finding the optimal policy (dynamic programming) are given in Module 5. The next modules consider model-free methods for finding the optimal policy, i.e. methods that do not require full knowledge of the transition probabilities and rewards of the process. Monte Carlo sampling methods are presented in Module 6 and … The appendix contains different modules that may be helpful for you including hints on how to work in groups, how to get help if you are stuck and how to annotate the course notes. Programming software We use R as programming software and it is assumed that you are familiar with using R. R is a programming language and free software environment. R can be run from a terminal but in general you use an IDE (integrated development environment) RStudio for running R and to saving your work. R and RStudio can either be run from your laptop or using RStudio Cloud which run R in the cloud using your browser. It is assumed as a prerequisite that you know how to use R. If you need a brush-up on your R programming skills then have a look at Module A in the appendix. Acknowledgements and license Materials are taken from various places: The notes are based on Sutton and Barto (2018). The bookdown skeleton and some notes are based on the Tools for Analytics course. Some notes are adopted from Scott Jeen, Bryn Elesedy and Peter Goldsborough. Some slides are inspired by the RL specialization at Coursera. Some exercises are taken from Sutton and Barto (2018) and modified slightly. I would like to thank all for their inspiration. This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International CC BY-NC-SA 4.0. Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! Exercise - How to annotate The online course notes can be annotated using hypothes.is. You can create both private and public annotations. Collaborative annotation helps people connect to each other and what they’re reading, even when they’re keeping their distance. You may also use public notes to help indicate spell errors, unclear content etc. in the notes. Sign-up at hypothes.is. If you are using Chrome you may also install the Chrome extension. Go back to this page and login in the upper right corner (there should be some icons e.g. &lt;). Select some text and try to annotate it using both a private and public annotation (you may delete it again afterwards). Go to the slides for this module and try to annotate the page with a private comment. Exercise - Templates A template in RMarkdown of the course notes and exercises are available at GitHub. You can download the repository and keep your own notes during the course by having an R project with it. Open R studio and do: File &gt; New Project … &gt; Version Control &gt; Git. Add https://github.com/bss-osca/rl-student as repository url and create the project. Run renv::restore() from the R command line to install needed packages (this may take some time). If you experience errors then try to install the packages one at a time using install.packages(\"pkg name\"). Open e.g. the file 01_rl-intro.Rmd and try to knit it using the Knit button in the upper left corner. A html file with the output will be made. You should be able to add you own notes and solve the exercises using the Rmd file for each module. References "],["mod-rl-intro.html", "Module 1 An introduction to RL 1.1 Learning outcomes 1.2 Textbook readings 1.3 What is reinforcement learning 1.4 RL and Business Analytics 1.5 RL in different research deciplines 1.6 RL and machine learning 1.7 The RL data-stream 1.8 States, actions, rewards and policies 1.9 Exploitation vs Exploration 1.10 RL in action (Tic-Tac-Toe) 1.11 Summary 1.12 Exercises", " Module 1 An introduction to RL This module gives a short introduction to Reinforcement learning. 1.1 Learning outcomes By the end of this module, you are expected to: Describe what RL is. Be able to identify different sequential decision problems. Know what Business Analytics are and identify RL in that framework. Memorise different names for RL and how it fits in a Machine Learning framework. Formulate the blocks of a RL model (environment, agent, data, states, actions, rewards and policies). Run your first RL algorithm and evaluate on its solution. The learning outcomes relate to the overall learning goals number 3, 5, 6, 9 and 11 of the course. 1.2 Textbook readings For this week, you will need to read Chapter 1-1.5 in Sutton and Barto (2018). Read it before continuing this module. Slides for this module can be seen here. You do not have to look at them before the lecture! 1.3 What is reinforcement learning RL can be seen as An approach of modelling sequential decision making problems. An approach for learning good decision making under uncertainty from experience. Mathematical models for learning-based decision making. Trying to optimize decisions in a sequential decision model. That is, making a good sequence of decisions. Estimating and finding near optimal decisions of a stochastic process with sequential decision making. A model where given a state of a system, the agent wants to take actions to maximize future reward. Often the agent does not know the underlying setting and, thus, is bound to learn from experience. Sequential decision problems are problems where you take decisions/actions over time. As an agent, you base your decision on the current state of the system (a state is a function of the information/data available). At the next time-step, the system have moved (stochastically) to the next stage. Here new information may be available and you receive a reward and take a new action. Examples of sequential decision problems are (with possible actions): Playing backgammon (how to move the checkers). Driving a car (left, right, forward, back, break, stop, …). How to invest/maintain a portfolio of stocks (buy, sell, amount). Control an inventory (wait, buy, amount). Vehicle routing (routes). Maintain a spare-part (wait, maintain). Robot operations (sort, move, …) Dairy cow treatment/replacement (treat, replace, …) Recommender systems e.g. Netflix recommendations (videos) Since RL involves a scalar reward signal, the goal is to choose actions such that the total reward is maximized. Note actions have an impact on the future and may have long term consequences. As such, you cannot simply choose the action that maximize the current reward. It may, in fact, be better to sacrifice immediate reward to gain more long term reward. RL can be seen as a way of modelling intuition. An RL model has specific states, actions and reward structure and our goal as an agent is to find good decisions/actions that maximize the total reward. The agent learn using, for instance: totally random trials (in the start), sophisticated tactics and superhuman skills (in the end). That is, as the agent learn, the reward estimate of a given action becomes better. As humans, we often learn by trial and error too: Learning to walk (by falling/pain). Learning to play (strategy is based on the game rules and what we have experienced works based on previous plays). This can also be seen as learning the reward of our actions. 1.4 RL and Business Analytics Business Analytics (BA) (or just Analytics) refers to the scientific process of transforming data into insight for making better decisions in business. BA can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value. As a process it can be characterized by descriptive, predictive, and prescriptive model building using “big” data sources. Descriptive Analytics: A set of technologies and processes that use data to understand and analyze business performance. Descriptive analytics are the most commonly used and most well understood type of analytics. Descriptive analytics categorizes, characterizes, consolidates, and classifies data. Examples are standard reporting and dashboards (KPIs, what happened or is happening now?) and ad-hoc reporting (how many/often?). Descriptive analytics often serves as a first step in the successful application of predictive or prescriptive analytics. Predictive Analytics: The use of data and statistical techniques to make predictions about future outputs/outcomes, identify patterns or opportunities for business performance. Examples of techniques are data mining (what data is correlated with other data?), pattern recognition and alerts (when should I take action to correct/adjust a spare part?), Monte-Carlo simulation (what could happen?), neural networks (which customer group are best?) and forecasting (what if these trends continue?). Prescriptive Analytics: The use of optimization and other decision modelling techniques using the results of descriptive and predictive analytics to suggest decision options with the goal of improving business performance. Prescriptive analytics attempt to quantify the effect of future decisions in order to advise on possible outcomes before the decisions are actually made. Prescriptive analytics predicts not only what will happen, but also why it will happen and provides recommendations regarding actions that will take advantage of the predictions. Prescriptive analytics are relatively complex to administer, and most companies are not yet using it in their daily course of business. However, when implemented correctly, it can have a huge impact on business performance and how businesses make decisions. Examples on prescriptive analytics are optimization in production planning and scheduling, inventory management, the supply chain and transportation planning. Since RL focus optimizing decisions it is Prescriptive Analytics also known as sequential decision analytics. Figure 1.1: Business Analytics and competive advantage. Companies who use BA focus on fact-based management to drive decision making and treats data and information as a strategic asset that is shared within the company. This enterprise approach generates a companywide respect for applying descriptive, predictive and prescriptive analytics in areas such as supply chain, marketing and human resources. Focusing on BA gives a company a competive advantage (see Figure 1.1). BA and related areas: In the past Business Intelligence traditionally focuses on querying, reporting, online analytical processing, i.e. descriptive analytics. However, a more modern definition of Business Intelligence is the union of descriptive and predictive analytics. Operations Research or Management Science deals with the application of advanced analytical methods to help make better decisions and can hence be seen as prescriptive analytics. However, traditionally it has been taking a more theoretical approach and focusing on problem-driven research while BA takes a more data-driven approach. Logistics is a cross-functional area focusing on the effective and efficient flows of goods and services, and the related flows of information and cash. Supply Chain Management adds a process-oriented and cross-company perspective. Both can be seen as prescriptive analytics with a more problem-driven research focus. Advanced Analytics is often used as a classification of both predictive and prescriptive analytics. Data science is an interdisciplinary field about scientific methods, processes, and systems to extract knowledge or insights from data in various forms, either structured or unstructured and can be seen as Business analytics applied to a wider range of data. 1.5 RL in different research deciplines RL is used in many research fields using different names: RL (most used) originated from computer science and AI. Approximate dynamic programming (ADP) is mostly used within operations research. Neuro-dynamic programming (when states are represented using a neural network). RL is closely related to Markov decision processes (a mathematical model for a sequential decision problem). Figure 1.2: Adopted from Silver (2015). 1.6 RL and machine learning Different ways of learning: Supervised learning: Given data \\((x_i, y_i)\\) learn to predict \\(y\\) from \\(x\\), i.e. find \\(y \\approx f(x)\\) (e.g. regression). Unsupervised learning: Given data \\((x_i)\\) learn patterns using \\(x\\), i.e. find \\(f(x)\\) (e.g. clustering). RL: Given state \\(x\\) you take an action and observe the reward \\(r\\) and the new state \\(x&#39;\\). There is no supervisor \\(y\\), only a reward signal \\(r\\). Your goal is to find a policy that optimize the total reward function. Figure 1.3: Adopted from Silver (2015). 1.7 The RL data-stream RL considers an agent in an environment: Agent: The one who takes the action (computer, robot, decision maker). Environment: The system/world where observations and rewards are found. Data are revealed sequentially as you take actions \\[(O_0, A_0, R_1, O_1, A_1, R_2, O_2, \\ldots).\\] At time \\(t\\) the agent have been taken action \\(A_{t-1}\\) and observed observation \\(O_t\\) and reward \\(R_t\\): Figure 1.4: Agent-environment representation. This gives us the history at time \\(t\\) is the sequence of observations, actions and rewards \\[H_t = (O_0, A_0, R_1, O_1, \\ldots, A_{t-1}, R_t, O_t).\\] 1.8 States, actions, rewards and policies The (agent) state \\(S_t\\) is the information used to take the next action \\(A_t\\): Figure 1.5: State and action. A state depends on the history, i.e. a state is a function of the history \\(S_t = f(H_t)\\). Different strategies for defining a state may be considered. Choosing \\(S_t = H_t\\) is bad since the size of a state representation grows very fast. A better strategy is to just store the information needed for taking the next action. Moreover, it is good to have Markov states where given the present state the future is independent of the past. That is, the current state holds just as much information as the history, i.e. it holds all useful information of the history. Symbolically, we call a state \\(S_t\\) Markov iff \\[\\Pr[S_{t+1} | S_t] = \\Pr[S_{t+1} | S_1,...,S_t].\\] That is, the probability of seeing some next state \\(S_{t+1}\\) given the current state is exactly equal to the probability of that next state given the entire history of states. Note that we can always find some Markov state. Though the smaller the state, the more “valuable” it is. In the worst case, \\(H_t\\) is Markov, since it represents all known information about itself. The reward \\(R_t\\) is a number representing the reward at time \\(t\\) (negative if a cost). Examples of rewards are Playing backgammon (0 (when play), 1 (when win), -1 (when loose)). How to invest/maintain a portfolio of stocks (the profit). Control an inventory (inventory cost, lost sales cost). Vehicle routing (transportation cost). The goal is to find a policy that maximize the total future reward. A policy is the agent’s behaviour and is a map from state to action, i.e. a function \\[a = \\pi(s)\\] saying that given the agent is in state \\(s\\) we choose action \\(a\\). The total future reward is a currently not defined clearly. Let the value function denote the future reward in state \\(s\\) and define it as the expected discounted future reward: \\[V_\\pi(s) = \\mathbb{E}_\\pi(R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\ldots | S = s).\\] Note the value function is defined using a specific policy and the goal is to find a policy that maximize the total future reward in all possible states \\[\\pi^* = \\arg\\max_{\\pi\\in\\Pi}(V_\\pi(s)).\\] The value of the discount rate is important: Discount rate \\(\\gamma=0\\): Only care about present reward. Discount rate \\(\\gamma=1\\): Future reward is as beneficial as immediate reward. Can be used if the time-horizon is finite. Discount rate \\(\\gamma&lt;1\\): Rewards near to the present more beneficial. Note \\(V(s)\\) will converge to a number even if the time-horizon is infinite. 1.9 Exploitation vs Exploration A key problem of reinforcement learning (in general) is the difference between exploration and exploitation. Should the agent sacrifice what is currently know as the best action to explore a (possibly) better opportunity, or should it just exploit its best possible policy? Exploitation takes the action assumed to be optimal with respect to the data observed so far. This, gives better predictions of the value function (given the current policy) but prevents the agent from discovering potential better decisions (a better policy). Exploration does not take the action that seems to be optimal. That is, the agent explore to find new states and update the value function for this state. Examples in the exploration and exploitation dilemma are for instance movie recommendations: recommending the user’s best rated movie type (exploitation) or trying another movie type (exploration) or oil drilling: drilling at the best known location (exploitation) or trying a new location (exploration). 1.10 RL in action (Tic-Tac-Toe) The current state of the board is represented by a row-wise concatenation of the players’ marks in a 3x3 grid. For example, the 9 character long string \"......X.O\" denotes a board state in which player X has placed a mark in the first field of the third column whereas player O has placed a mark in the third field of the third column: .table-bordered th, .table-bordered td { border: 1px solid black !important; } . . . . . . X . O That is, we index the fields row-wise: 1 2 3 4 5 6 7 8 9 The game is continued until all fields are filled or the game is over (win or loose). The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game. Reward for a player is 1 for ‘win’, 0.5 for ‘draw’, and 0 for ‘loss’. These values can be seen as the probability of winning. Examples of winning, loosing and a draw from player Xs point of view: . . X . X . X O O X . X . X . O O O X X O O O X X X O Note a state can be also be represented using a state vector of length 9: stateStr &lt;- function(sV) { str &lt;- str_c(sV, collapse = &quot;&quot;) return(str) } stateVec &lt;- function(s) { sV &lt;- str_split(s, &quot;&quot;)[[1]] return(sV) } sV &lt;- stateVec(&quot;X.X.X.OOO&quot;) sV #&gt; [1] &quot;X&quot; &quot;.&quot; &quot;X&quot; &quot;.&quot; &quot;X&quot; &quot;.&quot; &quot;O&quot; &quot;O&quot; &quot;O&quot; Given a state vector, we can check if we win or loose: #&#39; Check board state #&#39; #&#39; @param pfx Player prefix (the char used on the board). #&#39; @param sV Board state vector. #&#39; @return A number 1 (win), 0 (loose) or 0.5 (draw/unknown) win &lt;- function(pfx, sV) { idx &lt;- which(sV == pfx) mineV &lt;- rep(0, 9) mineV[idx] &lt;- 1 mineM &lt;- matrix(mineV, 3, 3, byrow = TRUE) if (any(rowSums(mineM) == 3) || # win any(colSums(mineM) == 3) || sum(diag(mineM)) == 3 || sum(mineM[1,3] + mineM[2,2] + mineM[3,1]) == 3) return(1) idx &lt;- which(sV == &quot;.&quot;) mineV[idx] &lt;- 1 mineM &lt;- matrix(mineV, 3, 3, byrow = TRUE) if (any(rowSums(mineM) == 0) || # loose any(colSums(mineM) == 0) || sum(diag(mineM)) == 0 || sum(mineM[1,3] + mineM[2,2] + mineM[3,1]) == 0) return(0) return(0.5) # draw } win(&quot;O&quot;, sV) #&gt; [1] 1 win(&quot;X&quot;, sV) #&gt; [1] 0 We start with an empty board and have at most 9 moves (a player may win before). If the opponent start and a state denote the board before the opponent makes a move, then then a draw game may look as in Figure 1.6. We start with an empty board state \\(S_0\\), and the opponent makes a move, next we choose a move \\(A_0\\) (among the empty fields) and we end up in state \\(S_1\\). This continues until the game is over. Figure 1.6: A draw. 1.10.1 Players and learning to play Assume that we initially define a value \\(V(S)\\) of each state \\(S\\) to be 1 if we win, 0 if we loose and 0.5 otherwise. Most of the time we exploit our knowledge, i.e. choose the action which gives us the highest estimated reward (probability of winning). However, some times (with probability \\(\\epsilon\\)) we explore and choose another action/move than what seems optimal. These moves make us experience states we may otherwise never see. If we exploit we update the value of a state using \\[V(S_t) = V(S_t) + \\alpha(V(S_{t+1})-V(S_t))\\] where \\(\\alpha\\) is the step-size parameter which influences the rate of learning. Let us implement a RL player using a R6 class and store the values using a hash list. We keep the hash list minimal by dynamically adding only states which has been explored or needed for calculations. Note using R6 is an object oriented approach and objects are modified by reference. The internal method move takes the previous state (from our point of view) and the current state (before we make a move) and returns the next state (after our move) and update the value function (if exploit). The player explore with probability epsilon if there is not a next state that makes us win. PlayerRL &lt;- R6Class(&quot;PlayerRL&quot;, public = list( pfx = &quot;&quot;, # player prefix hV = NA, # empty hash list (states are stored using a string key) control = list(epsilon = 0.2, alpha = 0.3), clearLearning = function() clear(self$hV), initialize = function(pfx = &quot;&quot;, control = list(epsilon = 0.2, alpha = 0.3)) { self$pfx &lt;- pfx self$control &lt;- control self$hV &lt;- hash() }, finalize = function() { # cat(&quot;FIN\\n&quot;) clear(self$hV) }, move = function(sP, sV) { # previous state (before opponent move) and current state (before we move) idx &lt;- which(sV == &quot;.&quot;) # possible places to place our move state &lt;- stateStr(sP) # state as a string if (!has.key(state, self$hV)) self$hV[[state]] &lt;- 0.5 # if the state hasn&#39;t a value then set it to 0.5 (default) # find possible moves and add missing states keys &lt;- c() keysV &lt;- NULL for (i in idx) { # find possible moves sV[i] &lt;- self$pfx str &lt;- str_c(sV, collapse = &quot;&quot;) keys &lt;- c(keys, str) keysV &lt;- rbind(keysV, sV) sV[i] &lt;- &quot;.&quot; # set the value back to default } # add missing states of next sP idx &lt;- which(!has.key(keys, self$hV)) if (length(idx) &gt; 0) { for (i in 1:nrow(keysV)) { self$hV[keys[i]] &lt;- win(self$pfx, keysV[i,]) } } # cat(&quot;Player&quot;, pfx, &quot;\\n&quot;) # print(self$hV) # update and find next state val &lt;- values(self$hV[keys]) # cat(&quot;Moves:&quot;); print(val) m &lt;- max(val) if (rbinom(1,1, self$control$epsilon) &gt; 0 &amp; any(val &lt; m) &amp; m &lt; 1) { # explore idx &lt;- which(val &lt; m) idx &lt;- idx[sample(length(idx), 1)] nextS &lt;- names(val)[idx] # cat(&quot;Explore - &quot;) } else { # exploit idx &lt;- which(val == m) idx &lt;- idx[sample(length(idx), 1)] nextS &lt;- names(val)[idx] # pick one self$hV[[state]] &lt;- self$hV[[state]] + self$control$alpha * (m - self$hV[[state]]) # cat(&quot;Exploit - &quot;) } # cat(&quot;Next:&quot;, nextS, &quot;\\n&quot;) return(str_split(nextS, &quot;&quot;)[[1]]) } ) ) We then can define a player using: playerA &lt;- PlayerRL$new(pfx = &quot;A&quot;, control = list(epsilon = 0.5, alpha = 0.1)) Other players may be defined similarly, e.g. a player which moves randomly (if can not win in the next move): PlayerRandom &lt;- R6Class(&quot;PlayerRandom&quot;, public = list( pfx = NA, initialize = function(pfx) { self$pfx &lt;- pfx }, move = function(sP, sV) { # previous state (before opponent move) and current state (before we move) idx &lt;- which(sV == &quot;.&quot;) state &lt;- stateStr(sV) keys &lt;- c() keysV &lt;- NULL for (i in idx) { # find possible moves sV[i] &lt;- self$pfx str &lt;- str_c(sV, collapse = &quot;&quot;) keys &lt;- c(keys, str) keysV &lt;- rbind(keysV, sV) sV[i] &lt;- &quot;.&quot; } # check if can win in one move for (i in 1:nrow(keysV)) { if (win(self$pfx, keysV[i,]) == 1) { return(keysV[i,]) # next state is the win state } } # else pick one random return(keysV[sample(nrow(keysV), 1),]) } ) ) A player which always place at the lowest field index: PlayerFirst &lt;- R6Class(&quot;PlayerFirst&quot;, public = list( pfx = NA, initialize = function(pfx) { self$pfx &lt;- pfx }, move = function(sP, sV) { # previous state (before opponent move) and current state (before we move) idx &lt;- which(sV == &quot;.&quot;) sV[idx[1]] &lt;- self$pfx return(sV) } ) ) 1.10.2 Gameplay We define a game which returns the prefix of the winner (NA if a draw): #&#39; @param player1 A player R6 object. This player starts the game #&#39; @param player2 A player R6 object. #&#39; @param verbose Print gameplay. #&#39; @return The winners prefix or NA if a tie. playGame &lt;- function(player1, player2, verbose = FALSE) { sP2 &lt;- rep(&quot;.&quot;, 9) # start state / game state sP1 &lt;- sP2 # state from player 1s viewpoint for (i in 1:5) { # at most 4.5 rounds ## player 1 if (verbose) cat(&quot;Player &quot;, player1$pfx, &quot;:\\n&quot;, sep=&quot;&quot;) sP1 &lt;- player1$move(sP1, sP2) # new state from player 1s viewpoint # states &lt;- c(states, stateChr(sV)) # cat(stateStr(sV), &quot; | &quot;, sep = &quot;&quot;) if (verbose) plot_board_state_cat(stateStr(sP1)) if (win(player1$pfx, sP1) == 1) { return(player1$pfx) break } if (i == 5) break # a draw ## player 2 if (verbose) cat(&quot;Player &quot;, player2$pfx, &quot;:\\n&quot;, sep=&quot;&quot;) sP2 &lt;- player2$move(sP2, sP1) # states &lt;- c(states, stateChr(sV)) # cat(stateStr(sV), &quot; | &quot;, sep = &quot;&quot;) if (verbose) plot_board_state_cat(stateStr(sP2)) if (win(player2$pfx, sP2) == 1) { return(player2$pfx) break } } return(NA) } Let us play a game between playerA and playerR: playerR &lt;- PlayerRandom$new(pfx = &quot;R&quot;) playGame(playerA, playerR, verbose = T) #&gt; Player A: #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; | A | . | . | #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; Player R: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | . | . | #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; Player A: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | A | . | #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; Player R: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | A | . | #&gt; |------------------| #&gt; | . | R | . | #&gt; |------------------| #&gt; Player A: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | A | A | #&gt; |------------------| #&gt; | . | R | . | #&gt; |------------------| #&gt; [1] &quot;A&quot; Note playerA has been learning when playing the game. The current estimates that are stored in the hash list are: playerA$hV #&gt; &lt;hash&gt; containing 22 key-value pair(s). #&gt; ......... : 0.5 #&gt; ........A : 0.5 #&gt; .......A. : 0.5 #&gt; ......A.. : 0.5 #&gt; .....A... : 0.5 #&gt; ....A.... : 0.5 #&gt; ...A..... : 0.5 #&gt; ..A...... : 0.5 #&gt; .A....... : 0.5 #&gt; A........ : 0.5 #&gt; R..A....A : 0.5 #&gt; R..A...A. : 0.5 #&gt; R..A..A.. : 0.5 #&gt; R..A.A... : 0.5 #&gt; R..AA.... : 0.55 #&gt; R..AA..RA : 0.5 #&gt; R..AA.AR. : 0.5 #&gt; R..AAA.R. : 1 #&gt; R.AA..... : 0.5 #&gt; R.AAA..R. : 0.5 #&gt; RA.A..... : 0.5 #&gt; RA.AA..R. : 0.5 1.10.3 Learning by a sequence of games With a single game only a few states are explored and estimates are not good. Let us instead play a sequence of games and learn along the way: #&#39; @param playerA Player A (R6 object). #&#39; @param playerB Player B (R6 object). #&#39; @param games Number of games #&#39; @param prA Probability of `playerA` starts. #&#39; @return A list with results (a data frame and a plot). playGames &lt;- function(playerA, playerB, games, prA = 0.5) { winSeq &lt;- rep(NA, games) for (g in 1:games) { # find start player if (sample(0:1, 1, prob = c(prA, 1-prA)) == 0) { player1 &lt;- playerA player2 &lt;- playerB } else { player2 &lt;- playerA player1 &lt;- playerB } winSeq[g] &lt;- playGame(player1, player2) } # process the data dat &lt;- tibble(game = 1:length(winSeq), winner = winSeq) %&gt;% mutate( players = str_c(playerA$pfx, playerB$pfx), winA := case_when( winner == playerA$pfx ~ 1, winner == playerB$pfx ~ 0, TRUE ~ 0.5 ), winsA_r = rollapply(winA, ceiling(games/10), mean, align = &quot;right&quot;, fill = NA) #, fill = 0, partial = T ) # make a plot pt &lt;- dat %&gt;% ggplot(aes(x = game, y = winA)) + geom_line(aes(y = winsA_r), size = 0.2) + geom_smooth(se = F) + labs(y = str_c(&quot;Avg. wins player &quot;, playerA$pfx), title = str_c(&quot;Wins &quot;, playerA$pfx, &quot; = &quot;, round(mean(dat$winA), 2), &quot; &quot;, playerB$pfx, &quot; = &quot;, round(1-mean(dat$winA), 2))) return(list(dat = dat, plot = pt)) } Let us now play games against a player who moves randomly using \\(\\epsilon = 0.1\\) (explore probability) and \\(\\alpha = 0.1\\) (step size). playerA &lt;- PlayerRL$new(pfx = &quot;A&quot;, control = list(epsilon = 0.1, alpha = 0.1)) playerR &lt;- PlayerRandom$new(pfx = &quot;R&quot;) res &lt;- playGames(playerA, playerR, games = 2000) res$plot The black curve is the moving average of winning with a trend line. Note the values of the parameters have an effect on our learning: In general we do not need to explore (\\(\\epsilon = 0\\)) (the other player explore enough for us) and a high explore probability (\\(\\epsilon = 0.9\\)) make us loose. Moreover, using a high step size seems to work best. Other players may give different results. If the RL player play against a player which always move to first free field index: Here a high step size and a low exploration probability is good and the RL player will soon figure out how to win all the time. This is different if the RL player A play against another clever (RL) player B. playerA &lt;- PlayerRL$new(pfx = &quot;A&quot;, control = list(epsilon = 0, alpha = 0.1)) playerB &lt;- PlayerRL$new(pfx = &quot;B&quot;, control = list(epsilon = 0, alpha = 0.1)) If both players play using the same control parameters, one would expect that they after learning should win/loose with probability 0.5. However if there is no exploration (\\(\\epsilon = 0\\)) this is not always true: Depending on how the game starts a player may learn a better strategy and win/loose more. That is, exploration is important. Finally let us play against a player B with fixed control parameters. In general it is best to explore using the same probability otherwise you loose more and a higher step size than your opponent will make you win. 1.11 Summary Read Chapter 1.6 in Sutton and Barto (2018). 1.12 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 1.12.1 Exercise - Self-Play × Solution If the exploration parameter is non-zero, the algorithm will continue to adapt until it reaches an equilibrium (either fixed or cyclical). Close Solution Consider Tic-Tac-Toe and assume that instead of an RL player against a random opponent, the reinforcement learning algorithm described above played against itself. What do you think would happen in this case? Would it learn a different way of playing? 1.12.2 Exercise - Symmetries Many tic-tac-toe positions appear different but are really the same because of symmetries. × Solution It is possible to use 4 axis of symmetry to essentially fold the board down to a quarter of the size. Close Solution How might we amend the reinforcement learning algorithm described above to take advantage of this? × Solution A smaller state space would increase the speed of learning and reduce the memory required. Close Solution In what ways would this improve the algorithm? × Solution If the opponent did not use symmetries then it could result in a worse learning. For example, if the opponent always played correct except for 1 corner, then using symmetries would mean you never take advantage of that information. That is, we should not use symmetries too since symmetrically equivalent positions do not always hold the same value in such a game. Close Solution Suppose the opponent did not take advantage of symmetries. In that case, should we? Is it true, then, that symmetrically equivalent positions should necessarily have the same value? 1.12.3 Exercise - Greedy Play × Solution As seen in Section 1.10.3 using \\(\\epsilon = 0\\) may be okay for this game if the opponent use a simple strategy (e.g. random or first index). However, in general the RL player would play worse. The chance the optimal action is the one with the current best estimate of winning is low and depending on the gameplay the RL player might win or loose. The RL player would also be unable to adapt to an opponent that slowly alter behaviour over time. Close Solution Consider Tic-Tac-Toe and suppose the RL player is only greedy (\\(\\epsilon = 0\\)), that is, always playing the move that that gives the highest probability of winning. Would it learn to play better, or worse, than a non-greedy player? What problems might occur? 1.12.4 Exercise - Learning from Exploration Consider Tic-Tac-Toe and suppose the RL player is playing against an opponent with a fixed strategy. Suppose learning updates occur after all moves, including exploratory moves. If the step-size parameter is appropriately reduced over time (but not the tendency to explore), then the state values would converge to a set of probabilities. × Solution The probability set \\(V(s)\\) found by applying no learning from exploration is the probability of winning when using the optimal policy. The probability set \\(V(s)\\) found by applying learning from exploration is the probability of winning including the active exploration policy. Close Solution What are the two sets of probabilities computed when we do, and when we do not, learn from exploratory moves? × Solution The probability set found by applying no learning from exploration would result in more wins. The probability set found by applying learning from exploration is better to learn, as it reduces variance from sub-optimal future states. Close Solution Assuming that we do continue to make exploratory moves, which set of probabilities might be better to learn? Which would result in more wins? 1.12.5 Exercise - Other Improvements × Solution Altering the exploration rate/learning based on the variance in the opponent's actions. If the opponent is always making the same moves and you are winning from it then using a non-zero exploration rate will make you lose you games. If the agent is able to learn how the opponent may react to certain moves, it will be easier for it to win as it can influence the opponent to make moves that leads it to a better state. Close Solution Consider Tic-Tac-Toe. Can you think of other ways to improve the reinforcement learning player? References "],["mod-bandit.html", "Module 2 Multi-armed bandits 2.1 Learning outcomes 2.2 Textbook readings 2.3 The k-armed bandit problem 2.4 Estimating the value of an action 2.5 The role of the step-size 2.6 Optimistic initial values 2.7 Upper-Confidence Bound Action Selection 2.8 Summary 2.9 Exercises", " Module 2 Multi-armed bandits This module consider the k-armed bandit problem which is a sequential decision problem with one state and \\(k\\) actions. The problem is used to illustrate different learning methods used in RL. The module is also the first module in the Tabular methods part of the notes. This part describe almost all the core ideas of reinforcement learning algorithms in their simplest forms where the state and action spaces are small enough for the approximate value functions to be represented as arrays or tables. 2.1 Learning outcomes By the end of this module, you are expected to: Define a k-armed bandit and understand the nature of the problem. Define the reward of a action (action-reward). Describe different methods for estimating the action-reward. Explain the differences between exploration and exploitation. Formulate an \\(\\epsilon\\)-greedy algorithm for selecting the next action. Interpret the sample-average (variable step-size) versus exponential recency-weighted average (constant step-size) action-reward estimation. Argue why we might use a constant stepsize in the case of non-stationarity. Understand the effect of optimistic initial values. Formulate an upper confidence bound action selection algorithm. The learning outcomes relate to the overall learning goals number 1, 3, 6, 9, 10 and 12 of the course. 2.2 Textbook readings For this week, you will need to read Chapter 2 - 2.7 in Sutton and Barto (2018). Read it before continuing this module. A summary of the book notation can be seen here. Slides for this module can be seen here. You do not have to look at them before the lecture! 2.3 The k-armed bandit problem Multi-armed bandits attempt to find the best option among a collection of alternatives by learning through trial and error. The name derives from “one-armed bandit,” a slang term for a slot machine — which is a perfect analogy for how these algorithms work. Figure 2.1: A 4-armed bandit. Imagine you are facing a wall with \\(k\\) slot machines (see Figure 2.1), and each one pays out at a different rate. A natural way to figure out how to make the most money (rewards) would be to try each at random for a while (exploration), and start playing the higher paying ones once you have gained some experience (exploitation). That is, from an agent/environment point of view the agent considers a single state \\(s\\) at time \\(t\\) and have to choose among \\(k\\) actions given the environment representing the \\(k\\) bandits. Only the rewards from the \\(k\\) bandits are unknown, but the agent observe samples of the reward of an action and can use this to estimate the expected reward of that action. The objective is to find an optimal policy that maximize the total expected reward. Note since the process only have a single state, this is the same as finding an optimal policy \\(\\pi^*(s) = \\pi^* = a^*\\) that chooses the action with the highest expected reward. Due to uncertainty, there is an exploration vs exploitation dilemma. The agent have one action that seems to be most valuable at a time point, but it is highly likely, at least initially, that there are actions yet to explore that are more valuable. Multi-armed bandits can be used in e.g. digital advertising. Suppose you are an advertiser seeking to optimize which ads (\\(k\\) to choose among) to show visitors on a particular website. For each visitor, you can choose one out of a collection of ads, and your goal is to maximize the number of clicks over time. Figure 2.2: Which ad to choose? It is reasonable to assume that each of these ads will have different effects, and some will be more engaging than others. That is, each ad has some theoretical — but unknown — click-through-rate (CTR) that is assumed to not change over time. How do we go about solving which ad we should choose (see Figure 2.2)? 2.4 Estimating the value of an action How can the value of an action be estimated, i.e. the expected reward of an action \\(q_*(a) = \\mathbb{E}[R_t | A_t = a]\\). Assume that at time \\(t\\) action \\(a\\) has been chosen \\(N_t(a)\\) times. Then the estimated action value is \\[\\begin{equation} Q_t(a) = \\frac{R_1+R_2+\\cdots+R_{N_t(a)}}{N_t(a)}, \\end{equation}\\] Storing \\(Q_t(a)\\) this way is cumbersome since memory and computation requirements grow over time. Instead an incremental approach is better. If we assume that \\(N_t(a) = n-1\\) and set \\(Q_t(a) = Q_n\\) then \\(Q_{n+1}\\) becomes: \\[\\begin{align} Q_{n+1} &amp;= \\frac{1}{n}\\sum_{i=1}^{n}R_i \\nonumber \\\\ &amp;= \\frac{1}{n}\\left( R_{n} + \\sum_{i=1}^{n-1} R_i \\right) \\nonumber \\\\ &amp;= \\frac{1}{n}\\left( R_{n} + (n-1)\\frac{1}{n-1}\\sum_{i=1}^{n-1} R_i \\right) \\nonumber \\\\ &amp;= \\frac{1}{n}\\left( R_{n} + (n-1)Q_n \\right) \\nonumber \\\\ &amp;= Q_n + \\frac{1}{n} \\left[R_n - Q_n\\right]. \\tag{2.1} \\end{align}\\] That is, we can update the estimate of the value of \\(a\\) using the previous estimate, the observed reward and how many times the action has occurred (\\(n\\)). A greedy approach for selecting the next action is \\[\\begin{equation} A_t =\\arg \\max_a Q_t(a). \\end{equation}\\] Here \\(\\arg\\max_a\\) means the value of \\(a\\) for which \\(Q_t(a)\\) is maximised. A pure greedy approach do not explore other actions. Instead an \\(\\varepsilon\\)-greedy approach is used in which with probability \\(\\varepsilon\\) we take a random draw from all of the actions (choosing each action with equal probability) and hereby providing some exploration. Let us try to implement the algorithm using an agent and environment class. First we define the agent that do actions based on an \\(\\epsilon\\)-greedy strategy, stores the estimated \\(Q\\) values and the number of times an action has been chosen: #&#39; R6 Class representing the RL agent RLAgent &lt;- R6Class(&quot;RLAgent&quot;, public = list( #&#39; @field qV Q estimates. qV = NULL, #&#39; @field nV Action counter. nV = NULL, #&#39; @field k Number of bandits. k = NULL, #&#39; @field epsilon Epsilon used in epsilon greed action selection. epsilon = NULL, #&#39; @description Create an object (when call new). #&#39; @param k Number of bandits. #&#39; @param epsilon Epsilon used in epsilon greed action selection. #&#39; @param ini Initial qV values. #&#39; @return The new object. initialize = function(k = 10, epsilon = 0.01, ini = 0) { self$epsilon &lt;- epsilon self$qV &lt;- rep(ini, k) # k-length vector self$nV &lt;- rep(0, k) # k-length vector self$k &lt;- k }, #&#39; @description Clear learning. clearLearning = function() { self$qV &lt;- 0 self$nV &lt;- 0 }, #&#39; @description Select next action using an epsilon greedy strategy. #&#39; @return Action (index). selectActionEG = function() { if (runif(1) &lt;= self$epsilon) { # explore a &lt;- sample(1:self$k, 1) } else { # exploit a &lt;- which(self$qV == max(self$qV)) a &lt;- a[sample(length(a), 1)] # choose a action random if more than one } return(a) }, #&#39; @description Update learning values (including action counter). #&#39; @param a Action. #&#39; @param r Reward. #&#39; @return NULL (invisible) updateQ = function(a, r) { self$nV[a] &lt;- self$nV[a] + 1 self$qV[a] &lt;- self$qV[a] + 1/self$nV[a] * (r - self$qV[a]) return(invisible(NULL)) } ) ) Next, the environment generating rewards. The true mean reward \\(q_*(a)\\) of an action is selected according to a normal (Gaussian) distribution with mean 0 and variance 1. The observed reward is then generated using a normal distribution with mean \\(q_*(a)\\) and variance 1: #&#39; R6 Class representing the RL environment #&#39; #&#39; Assume that bandits are normal distributed with a mean and std.dev of one. RLEnvironment &lt;- R6Class(&quot;RLEnvironment&quot;, public = list( #&#39; @field mV Mean values mV = NULL, #&#39; @field k Number of bandits. k = NULL, #&#39; @description Create an object (when call new). #&#39; @param k Number of bandits. #&#39; @return The new object. initialize = function(k = 10) { self$mV &lt;- rnorm(k) # means are from a N(0,1) }, #&#39; @description Sample reward of a bandit. #&#39; @param a Bandit (index). #&#39; @return The reward. reward = function(a) { return(rnorm(1, self$mV[a])) # pick a random value from N(self$mV[a],1) }, #&#39; @description Returns action with best mean. optimalAction = function() return(which.max(self$mV)) ) ) To test the RL algorithm we use a function returning two plots that compare the performance: #&#39; Performance of the bandit algorithm using different epsilons. #&#39; #&#39; @param k Bandits. #&#39; @param steps Time steps. #&#39; @param runs Number of runs with a new environment generated. #&#39; @param epsilons Epsilons to be tested. #&#39; @param ini Initial value estimates. #&#39; @return Two plots in a list. performance &lt;- function(k = 10, steps = 1000, runs = 500, epsilons = c(0, 0.01, 0.1), ini = 0) { rew &lt;- matrix(0, nrow = steps, ncol = length(epsilons)) # rewards (one col for each eps) best &lt;- matrix(0, nrow = steps, ncol = length(epsilons)) # add 1 if find the best action for (run in 1:runs) { env &lt;- RLEnvironment$new(k) oA &lt;- env$optimalAction() # print(oA); print(env$mV) for (i in 1:length(epsilons)) { agent &lt;- RLAgent$new(k, epsilons[i], ini) for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) agent$updateQ(a, r) rew[t, i] &lt;- rew[t, i] + r # sum of rewards generated at t best[t, i] &lt;- best[t, i] + (a == oA) # times find best actions } } } colnames(rew) &lt;- epsilons colnames(best) &lt;- epsilons dat1 &lt;- tibble(t = 1:steps) %&gt;% bind_cols(rew) %&gt;% # bind data together pivot_longer(!t, values_to = &quot;reward&quot;, names_to = &quot;epsilon&quot;) %&gt;% # move rewards to a single column group_by(epsilon) %&gt;% mutate(All = cumsum(reward/runs)/t, `Moving avg (50)` = rollapply(reward/runs, 50, mean, align = &quot;right&quot;, fill = NA)) %&gt;% select(-reward) %&gt;% pivot_longer(!c(t, epsilon)) dat2 &lt;- tibble(t = 1:steps) %&gt;% bind_cols(best) %&gt;% # bind data together pivot_longer(!t, values_to = &quot;optimal&quot;, names_to = &quot;epsilon&quot;) %&gt;% group_by(epsilon) %&gt;% mutate(All = cumsum(optimal/runs)/t, `Moving avg (50)` = rollapply(optimal/runs, 50, mean, align = &quot;right&quot;, fill = NA)) %&gt;% select(-optimal) %&gt;% pivot_longer(!c(t, epsilon)) # calc average pt1 &lt;- dat1 %&gt;% ggplot(aes(x = t, y = value, col = epsilon, linetype = name)) + geom_line() + labs(y = &quot;Average reward per time unit&quot;, x = &quot;Time&quot;, title = str_c(&quot;Average over &quot;, runs, &quot; runs &quot;), col = &quot;Epsilon&quot;, linetype = &quot;&quot;) + theme(legend.position = &quot;bottom&quot;) pt2 &lt;- dat2 %&gt;% ggplot(aes(x = t, y = value, col = epsilon, linetype = name)) + geom_line() + labs(y = &quot;Average number of times optimal action chosen&quot;, x = &quot;Time&quot;, title = str_c(&quot;Average over &quot;, runs, &quot; runs&quot;), col = &quot;Epsilon&quot;, linetype = &quot;&quot;) + theme(legend.position = &quot;bottom&quot;) return(list(ptR = pt1, ptO = pt2)) } We test the performance using 2000 runs over 1000 time steps. pts &lt;- performance(runs = 2000, steps = 1000) pts$ptR pts$ptO The solid line shows averages over all the runs from \\(t=1\\) to the considered time-step while the dotted line is a moving average over the last 50 time-steps. Since we are expected to learn over the time-steps the moving averages will in general be higher than the overall averages. Note that if we have 1000 time-steps a greedy approach in general is bad and an \\(\\epsilon\\)-greedy approach is better (\\(\\epsilon = 0.1\\) is best). That is, exploration is beneficial. 2.5 The role of the step-size In general we update the reward estimate of an action using \\[\\begin{equation} Q_{n+1} = Q_n +\\alpha_n(a) \\left[R_n - Q_n\\right] \\end{equation}\\] Until now we have used the sample average \\(\\alpha_n(a)= 1/n\\); however, other choices of \\(\\alpha_n(a)\\) is possible. In general we will converge to the true reward if \\[\\begin{equation} \\sum_n \\alpha_n(a) = \\infty \\quad\\quad \\mathsf{and} \\quad\\quad \\sum_n \\alpha_n(a)^2 &lt; \\infty. \\end{equation}\\] Meaning that the coefficients must be large enough to recover from initial fluctuations, but not so large that they do not converge in the long run. However, if the process is non-stationary, i.e. the expected reward of an action change over time, then convergence is undesirable and we may want to use a constant \\(\\alpha_n(a)= \\alpha \\in (0, 1]\\) instead. This results in \\(Q_{n+1}\\) being a weighted average of the past rewards and the initial estimate \\(Q_1\\): \\[\\begin{align} Q_{n+1} &amp;= Q_n +\\alpha \\left[R_n - Q_n\\right] \\nonumber \\\\ &amp;= \\alpha R_n + (1 - \\alpha)Q_n \\nonumber \\\\ &amp;= \\alpha R_n + (1 - \\alpha)[\\alpha R_{n-1} + (1 - \\alpha)Q_{n-1}] \\nonumber \\\\ &amp;= \\alpha R_n + (1 - \\alpha)\\alpha R_{n-1} + (1 - \\alpha)^2 Q_{n-1} \\nonumber \\\\ &amp;= \\vdots \\nonumber \\\\ &amp;= (1-\\alpha)^n Q_1 + \\sum_{i=1}^{n} \\alpha (1 - \\alpha)^{n-i} R_i \\\\ \\end{align}\\] Because the weight given to each reward depends on how long ago it was observed, we can see that more recent rewards are given more weight. Note the weights \\(\\alpha\\) sum to 1 here, ensuring it is indeed a weighted average where more weight is allocated to recent rewards. Since the weight given to each reward decays exponentially into the past. This sometimes called an exponential recency-weighted average. 2.6 Optimistic initial values The methods discussed so far are dependent to some extent on the initial action-value estimate i.e. they are biased by their initial estimates. For methods with constant \\(\\alpha\\) this bias is permanent. We may set initial value estimates artificially high to encourage exploration in the short run. For instance, by setting initial values of \\(Q\\) to 5 rather than 0 we encourage exploration, even in the greedy case. Here the agent will almost always be disappointed with it’s samples because they are less than the initial estimate and so will explore elsewhere until the values converge. 2.7 Upper-Confidence Bound Action Selection An \\(\\epsilon\\)-greed algorithm choose the action to explore with equal probability in an exploration step. It would be better to select among non-greedy actions according to their potential for actually being optimal, taking into account both how close their estimates are to being maximal and the uncertainty in those estimates. One way to do this is to select actions using the upper-confidence bound: \\[\\begin{equation} A_t = \\arg\\max_a \\left(Q_t(a) + c\\sqrt{\\frac{\\ln t}{N_t(a)}}\\right), \\end{equation}\\] Note the square root term is a measure of the uncertainty in our estimate (see Figure 2.3). It is proportional to \\(t\\) i.e. how many time-steps have passed and inversely proportional to \\(N_t(a)\\) i.e. how many times that action has been visited. The more time has passed, and the less we have sampled an action, the higher our upper-confidence-bound. As the timesteps increases, the denominator dominates the numerator as the ln term flattens. Each time we select an action our uncertainty decreases because \\(N\\) is the denominator of this equation. If \\(N_t(a) = 0\\) then we consider \\(a\\) as a maximal action, i.e. we select first among actions with \\(N_t(a) = 0\\). The parameter \\(c&gt;0\\) controls the degree of exploration. Higher \\(c\\) results in more weight on the uncertainty. Since upper-confidence bound action selection select actions according to their potential, it is expected to perform better than \\(\\epsilon\\)-greedy methods. Figure 2.3: Square root term for an action using different \\(c\\)-values. 2.8 Summary Read Chapter 2.10 in Sutton and Barto (2018). 2.9 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 2.9.1 Exercise - Advertising Suppose you are an advertiser seeking to optimize which ads to show visitors on a particular website. For each visitor, you can choose one out of a collection of ads, and your goal is to maximize the number of clicks over time. Assume that: You have \\(k=5\\) adds to choose among. If add \\(A\\) is chosen then the user clicks the add with probability \\(p_A\\) which can be seen as the unknown click trough rate CTR (or an average reward). The CTRs are unknown and samples can be picked using the RLAdEnv class and the reward function which returns 1 if click on ad and 0 otherwise. #&#39; R6 Class representing the RL advertising environment RLAdEnv &lt;- R6Class(&quot;RLAdEnv&quot;, public = list( #&#39; @field mV Click trough rates (unknown to you) mV = c(0.1, 0.83, 0.85, 0.5, 0.7), #&#39; @field k Number of ads. k = 5, #&#39; @description Sample reward of a bandit. #&#39; @param a Bandit/ad (index). #&#39; @return One if click on ad and zero otherwise. reward = function(a) { return(rbinom(1, 1, self$mV[a])) }, #&#39; @description Returns action with best mean. optimalAction = function() return(which.max(self$mV)) ) ) env &lt;- RLAdEnv$new() env$reward(2) # click on ad number two (return 0 or 1)? #&gt; [1] 1 env$optimalAction() # the best ad #&gt; [1] 3 env$mV # true CTRs #&gt; [1] 0.10 0.83 0.85 0.50 0.70 In the class the true CTRs can be observed but in practice this is hidden from the agent (you). Consider an \\(\\epsilon\\)-greedy algorithm to find the best ad. Assume the webpage is visited by 10000 users per day. × Solution set.seed(327) # to get same results #&#39; Performance of the bandit algorithm. #&#39; @param steps Steps (users). #&#39; @param epsilon Epsilon to be tested. #&#39; @return A list with statistics. testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rew &lt;- 0 for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) rew &lt;- rew + r agent$updateQ(a, r) } return(list(qV = agent$qV, avgReward = rew/steps)) } testEG(0.01) #&gt; $qV #&gt; [1] 0.000 0.800 0.852 0.409 0.654 #&gt; #&gt; $avgReward #&gt; [1] 0.849 testEG(0.1) #&gt; $qV #&gt; [1] 0.119 0.843 0.849 0.516 0.685 #&gt; #&gt; $avgReward #&gt; [1] 0.824 testEG(0.5) #&gt; $qV #&gt; [1] 0.110 0.844 0.851 0.484 0.703 #&gt; #&gt; $avgReward #&gt; [1] 0.725 # True values env$optimalAction() #&gt; [1] 3 env$mV #&gt; [1] 0.10 0.83 0.85 0.50 0.70 Epsilon = 0.01 seems to give the best average number of clicks. Close Solution × Hint set.seed(327) # to get same results #&#39; Performance of the bandit algorithm. #&#39; @param steps Steps (users). #&#39; @param epsilon Epsilon to be tested. #&#39; @return A list with statistics. testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(___) rew &lt;- 0 for (t in 1:steps) { a &lt;- agent$___ r &lt;- env$___ rew &lt;- rew + r agent$updateQ(___) } return(list(qV = ___, avgReward = ___)) } testEG(0.01) testEG(0.1) testEG(0.5) # True values env$optimalAction() env$mV Close Hint Run the \\(\\epsilon\\)-greedy algorithm with \\(\\epsilon = 0.01, 0.1, 0.5\\) over the 10000 steps. What are the estimated CTRs for each action (\\(Q_t(a)\\))? What is the average number of clicks per user? × Solution ## Test function modified with plot feature testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rew &lt;- 0 qVal &lt;- matrix(0, nrow = steps, ncol = 5) # store qV in a row for each t colnames(qVal) = str_c(&quot;A&quot;, 1:5) for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) rew &lt;- rew + r agent$updateQ(a, r) qVal[t,] &lt;- agent$qV } # make plot dat &lt;- tibble(t = 1:steps) %&gt;% bind_cols(qVal) %&gt;% # bind data together pivot_longer(!t, values_to = &quot;ctr&quot;, names_to = &quot;action&quot;) pt &lt;- dat %&gt;% ggplot(aes(x = t, y = ctr, col = action)) + geom_line() + labs(y = &quot;Empirical CTRs&quot;, x = &quot;Time&quot;, title = str_c(&quot;CTRs eps = &quot;, epsilon), col = &quot;Action&quot;) + theme(legend.position = &quot;bottom&quot;) return(list(qV = agent$qV, avgReward = rew/steps, plt = pt)) } testEG(0.01)$plt testEG(0.5)$plt As epsilon grows we estimate the true values better for all actions. Close Solution × Hint ## Test function modified with plot feature testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rew &lt;- 0 qVal &lt;- matrix(0, nrow = steps, ncol = 5) # store qV in a row for each t colnames(qVal) = str_c(&quot;A&quot;, 1:5) for (t in 1:steps) { ___ } # make plot dat &lt;- tibble(t = 1:steps) %&gt;% bind_cols(qVal) %&gt;% # bind data together pivot_longer(!t, values_to = &quot;ctr&quot;, names_to = &quot;action&quot;) pt &lt;- dat %&gt;% ggplot(aes(x = t, y = ctr, col = action)) + geom_line() + labs(y = &quot;Empirical CTRs&quot;, x = &quot;Time&quot;, title = str_c(&quot;CTRs eps = &quot;, epsilon), col = &quot;Action&quot;) + theme(legend.position = &quot;bottom&quot;) return(list(qV = agent$qV, avgReward = rew/steps, plt = pt)) } testEG(0.01)$plt testEG(0.5)$plt Close Hint Make a plot of the empirical CTRs for \\(\\epsilon = 0.01, 0.5\\) over 10000 time-steps, i.e. plot \\(Q_t(a)\\). × Solution ## Test function modified with rewards testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rewards &lt;- c(10, 8, 5, 15, 2) rew &lt;- 0 qVal &lt;- matrix(0, nrow = 10000, ncol = 5) colnames(qVal) = str_c(&quot;A&quot;, 1:5) for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) * rewards[a] rew &lt;- rew + r agent$updateQ(a, r) qVal[t,] &lt;- agent$qV } return(list(qV = agent$qV, avgReward = rew/steps)) } testEG(0.01) #&gt; $qV #&gt; [1] 0.909 6.591 4.583 7.610 1.111 #&gt; #&gt; $avgReward #&gt; [1] 7.15 testEG(0.5) #&gt; $qV #&gt; [1] 0.951 6.646 4.286 7.459 1.361 #&gt; #&gt; $avgReward #&gt; [1] 5.74 # True average reward values env$mV * c(10, 8, 5, 15, 2) #&gt; [1] 1.00 6.64 4.25 7.50 1.40 The best action is now 4 and eps = 0.01 seems to give the best overall average reward. Close Solution × Hint ## Test function modified with rewards testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rewards &lt;- ___ rew &lt;- 0 qVal &lt;- matrix(0, nrow = 10000, ncol = 5) colnames(qVal) = str_c(&quot;A&quot;, 1:5) for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- ___ rew &lt;- rew + r agent$updateQ(a, r) qVal[t,] &lt;- agent$qV } return(list(qV = agent$qV, avgReward = rew/steps)) } testEG(0.01) testEG(0.5) # True average reward values env$mV * c(10, 8, 5, 15, 2) Close Hint Assume that the rewards of ad clicks is equal to (10, 8, 5, 15, 2). Modify the algorithm so you look at rewards instead of CTRs. What is the best action to choose? We now modify the RLAgent and add an upper-confidence bound function selectActionUCB: #&#39; R6 Class representing the RL agent RLAgent &lt;- R6Class(&quot;RLAgent&quot;, public = list( #&#39; @field qV Q estimates. qV = NULL, #&#39; @field nV Action counter. nV = NULL, #&#39; @field k Number of bandits. k = NULL, #&#39; @field epsilon Epsilon used in epsilon greed action selection. epsilon = NULL, #&#39; @description Create an object (when call new). #&#39; @param k Number of bandits. #&#39; @param epsilon Epsilon used in epsilon greed action selection. #&#39; @return The new object. initialize = function(k = 10, epsilon = 0.01, ini = 0) { self$epsilon &lt;- epsilon self$qV &lt;- rep(ini, k) self$nV &lt;- rep(0, k) self$k &lt;- k }, #&#39; @description Clear learning. #&#39; @param eps Epsilon. #&#39; @return Action (index). clearLearning = function() { self$qV &lt;- 0 self$nV &lt;- 0 }, #&#39; @description Select next action using an epsilon greedy strategy. #&#39; @return Action (index). selectActionEG = function() { if (runif(1) &lt;= self$epsilon) { # explore a &lt;- sample(1:self$k, 1) } else { # exploit a &lt;- which(self$qV == max(self$qV)) a &lt;- a[sample(length(a), 1)] } return(a) }, #&#39; @description Select next action using UCB #&#39; @return Action (index). selectActionUCB = function(c, t) { val &lt;- self$qV + c * sqrt(log(t + 0.01)/self$nV) a &lt;- which.max(val) return(a) }, #&#39; @description Update learning values (including action counter). #&#39; @param a Action. #&#39; @param r Reward. #&#39; @return NULL (invisible) updateQ = function(a, r) { self$nV[a] &lt;- self$nV[a] + 1 self$qV[a] &lt;- self$qV[a] + 1/self$nV[a] * (r - self$qV[a]) return(invisible(NULL)) } ) ) × Solution testUCB &lt;- function(c = 2, steps = 10000) { agent &lt;- RLAgent$new(k = 5) rewards &lt;- c(10, 8, 5, 15, 2) rew &lt;- 0 for (t in 1:steps) { a &lt;- agent$selectActionUCB(c, t) r &lt;- env$reward(a) * rewards[a] rew &lt;- rew + r agent$updateQ(a, r) } return(list(qV = agent$qV, avgReward = rew/steps)) } testUCB(0.1) #&gt; $qV #&gt; [1] 0.00 6.67 5.00 7.48 0.00 #&gt; #&gt; $avgReward #&gt; [1] 7.48 testUCB(5) #&gt; $qV #&gt; [1] 1.43 6.08 4.64 7.51 1.33 #&gt; #&gt; $avgReward #&gt; [1] 7.48 testUCB(10) #&gt; $qV #&gt; [1] 0.556 6.429 4.560 7.489 1.048 #&gt; #&gt; $avgReward #&gt; [1] 7.38 testUCB(20) #&gt; $qV #&gt; [1] 0.758 6.668 4.061 7.570 1.512 #&gt; #&gt; $avgReward #&gt; [1] 7.26 A value \\(c = 10\\) seems to be a good choice. Close Solution × Hint testUCB &lt;- function(c = 2, steps = 10000) { agent &lt;- RLAgent$new(k = 5) rewards &lt;- c(10, 8, 5, 15, 2) rew &lt;- 0 for (t in 1:steps) { ___ } return(list(qV = agent$qV, avgReward = rew/steps)) } testUCB(0.1) testUCB(5) testUCB(10) testUCB(20) Close Hint Test the UCB algorithm for \\(c\\) values \\((0.1, 5, 10, 20)\\). Which algorithm seems to find the best average reward? 2.9.2 Exercise - A coin game Consider a game where you choose to flip one of two (possibly unfair) coins. You win 1 if your chosen coin shows heads and lose 1 if it shows tails. × Solution This is a 2-bandit problem with actions of choosing coin 1 or 2. Close Solution Model this as a K-armed bandit problem: define the action set. × Solution The reward is stochastic. If consider coin \\(i\\) then \\(\\mathbb{E}[R_t | a_i] = \\Pr(H)\\cdot 1.\\) Close Solution Is the reward a deterministic or stochastic function of your action? × Solution The estimates are \\[Q_t(a_1) = (-1+1+1-1-1-1)/6 = -1/3\\] and \\[Q_t(a_2) = (1-1+1+1+1-1)/6 = 1/3\\]. Close Solution You do not know the coin flip probabilities. Instead, you are able to view 6 sample flips for each coin respectively: (T,H,H,T,T,T) and (H,T,H,H,H,T). Use the sample average formula (2.1) to compute the estimates of the value of each action. × Solution Coin 2 is chosen since the best action-value. Close Solution Decide on which coin to flip next assuming that you exploit. References "],["mod-mdp-1.html", "Module 3 Markov decision processes (MDPs) 3.1 Learning outcomes 3.2 Textbook readings 3.3 An MDP as a model for the agent-environment 3.4 Rewards and the objective function (goal) 3.5 Summary 3.6 Exercises", " Module 3 Markov decision processes (MDPs) This module gives an introduction to Markov decision processes (MDPs) with a finite number of states and actions. This gives us a full model of a sequential decision problem. MDPs are a classical formalization of sequential decision making, where actions influence not just immediate rewards, but also what will be the next state, and hence future rewards. Thus MDPs involve delayed reward and the need to consider the trade-off between immediate and delayed reward. MDPs are a mathematically idealized form of the RL problem where a full description is known and the optimal policy can be found. Often in a RL problem some parts of this description is unknown and we hereby have to estimate the best policy by learning. For example, in the bandit problem the rewards was unknown. 3.1 Learning outcomes By the end of this module, you are expected to: Identify the different elements of a Markov Decision Processes (MDP). Describe how the dynamics of an MDP are defined. Understand how the agent-environment RL description relates to an MDP. Interpret the graphical representation of a Markov Decision Process. Describe how rewards are used to define the objective function (expected return). Interpret the discount rate and its effect on the objective function. Identify episodes and how to formulate an MDP by adding an absorbing state. The learning outcomes relate to the overall learning goals number 2, 7, 10, and 12 of the course. 3.2 Textbook readings For this week, you will need to read Chapter 3-3.4 in Sutton and Barto (2018). Read it before continuing this module. You do not have to put to much focus on the examples. A summary of the book notation can be seen here. Slides for this module can be seen here. You do not have to look at them before the lecture! 3.3 An MDP as a model for the agent-environment Let us recall the RL problem which considers an agent in an environment: Agent: The one who takes the action (computer, robot, decision maker), i.e. the decision making component of a system. Everything else is the environment. A general rule is that anything that the agent does not have absolute control over forms part of the environment. Environment: The system/world where observations and rewards are found. At time step \\(t\\) the agent is in state \\(S_t\\) and takes action \\(A_{t}\\) and observe the new state \\(S_{t+1}\\) and reward \\(R_{t+1}\\): Figure 1.3: Agent-environment representation. Note we here assume that the Markov property is satisfied and the current state holds just as much information as the history of observations. That is, given the present state the future is independent of the past: \\[\\Pr(S_{t+1} | S_t, A_t) = \\Pr(S_{t+1} | S_1,...,S_t, A_t).\\] That is, the probability of seeing some next state \\(S_{t+1}\\) given the current state is exactly equal to the probability of that next state given the entire history of states. A Markov decision process (MDP) is a mathematical model that for each time-step \\(t\\) have defined states \\(S_t \\in \\mathcal{S}\\), possible actions \\(A_t \\in \\mathcal{A}(s)\\) given a state and rewards \\(R_t \\in \\mathcal{R} \\subset \\mathbb{R}\\). Consider the example in Figure 3.1. Each time-step have five states \\(\\mathcal{S} = \\{1,2,3,4,5\\}\\). Assume that the agent start in state \\(s_0\\) with two actions to choose among \\(\\mathcal{A}(s_0) = \\{a_1, a_2\\}\\). After choosing \\(a_1\\) a transition to \\(s_1\\) happens with reward \\(R_1 = r_1\\). Next, in state \\(s_1\\) the agent chooses action \\(a_2\\) and a transition to \\(s_2\\) happens with reward \\(r_2\\). This continues as time evolves. Figure 3.1: State-expanded hypergraph In a finite MDP, the sets of states, actions, and rewards all have a finite number of elements. In this case, the random variables have well defined discrete probability distributions dependent only on the preceding state and action which defines the dynamics of the system: \\[\\begin{equation} p(s&#39;, r | s, a) = \\Pr(S_t = s&#39;, R_t = r | S_{t-1} = s, A_{t-1} = a), \\end{equation}\\] which can be used to find the transition probabilities: \\[\\begin{equation} p(s&#39; | s, a) = \\Pr(S_t = s&#39;| S_{t-1} = s, A_{t-1}=A) = \\sum_{r \\in \\mathcal{R}} p(s&#39;, r | s, a), \\end{equation}\\] and the expected reward: \\[\\begin{equation} r(s, a) = \\mathbb{E}[R_t | S_{t-1} = s, A_{t-1} = a] = \\sum_{r \\in \\mathcal{R}} r \\sum_{s&#39; \\in \\mathcal{S}} p(s&#39;, r | s, a). \\end{equation}\\] That is, to define an MDP the following are needed: A finite number of states and actions. That is, we can store values using tabular methods. All states \\(S \\in \\mathcal{S}\\) and actions \\(A \\in \\mathcal{A}(s)\\) are known. The transition probabilities \\(p(s&#39; | s, a)\\) and expected rewards \\(r(s, a)\\) are given. Alternatively, \\(p(s&#39;, r | s, a)\\). Moreover, for now a stationary MDP is considered, i.e. at each time-step all states, actions and probabilities are the same and hence the time index can be dropped. 3.4 Rewards and the objective function (goal) The reward hypothesis is a central assumption in reinforcement learning: All of what we mean by goals and purposes can be well thought of as the maximisation of the expected value of the cumulative sum of a received scalar signal (called reward). This assumption can be questioned but in this course we assume it holds. The reward signal is our way of communicating to the agent what we want to achieve not how we want to achieve it. The return \\(G_t\\) can be defined as the sum of future rewards; however, if the time horizon is infinite the return is also infinite. Hence we use a discount rate \\(0 \\leq \\gamma \\leq 1\\) and define the return as \\[\\begin{equation} G_t = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\cdots = \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} \\end{equation}\\] Discounting is important since it allows us to work with finite returns because if \\(\\gamma &lt; 1\\) and the reward is bounded by a number \\(B\\) then the return is always finite: \\[\\begin{equation} G_t = \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} \\leq B \\sum_{k=0}^{\\infty} \\gamma^k = B \\frac{1}{1 - \\gamma} \\end{equation}\\] Note gamma close to one put weight on future rewards while a gamma close to zero put weight on present rewards. Moreover, an infinite time-horizon is assumed. An MDP modelling a problem over a finite time-horizon can be transformed into an infinite time-horizon using an absorbing state with transitions only to itself and a reward of zero. This breaks the agent-environment interaction into episodes (e.g playing a board game). Each episode ends in the absorbing state, possibly with a different reward. Each starts independently of the last, with some distribution of starting states. Sequences of interaction without an absorbing state are called continuing tasks. The objective function is to choose actions such that the expected return is maximized. We will formalize this mathematically in the next module. 3.5 Summary MDPs formalize the problem of an agent interacting with an environment. The agent and environment interact at discrete time steps. At each time, the agent observes the current state of the environment. Then selects an action and the the environment transitions to a new state with a reward. An agent’s choices have long-term consequences (delayed reward). Selected actions influences future states and rewards. The objective is to maximize the expected discounted return. With a discount rate less than one, we can guarantee the return remains finite. The value of the discount rate defines how much we care about short-term rewards versus long-term rewards. A first step in applying reinforcement learning is to formulate the problem as an MDP. 3.6 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 3.6.1 Exercise - Sequential decision problems × Solution Examples could be: Ludo - State: position on the board. Actions: Possible movements. Rewards: In a win state e.g. 1, in a loose state -1 and 0 otherwise. Inventory management - State: inventory level. Actions: Order \\(x\\) units, wait. Rewards: a negative number representing inventory holding cost plus ordering cost. Investment - State: current portfolio, KPI's from considered companies. Actions: Buy/sell \\(x\\) stocks of company \\(y.\\) Rewards: returns - costs. Close Solution Think of two sequential decision problems and try to formulate them as MDPs. Describe the states, actions and rewards in words. × Solution For the k-bandit problem we only have a single state representing before we chose an action. We have \\(k\\) actions and the rewards are the probability distribution from each slot machine. Note the k-bandit problem is trivial if we know the MDP, since then we know the expected reward of each action and hence the action with best expected reward will be optimal. Close Solution How do the states, actions and rewards look like for the bandit problem? Try drawing the state-expanded hypergraph. 3.6.2 Exercise - Expected return × Solution gam &lt;- 0.8 g &lt;-0 r &lt;- c(-3, 5, 2, 7, 1) for (i in 4:0) { g &lt;- r[i+1] + gam*g } g #&gt; [1] 6.27 Close Solution Suppose \\(\\gamma=0.8\\) and we observe the following sequence of rewards: \\(R_1 = -3\\), \\(R_2 = 5\\), \\(R_3=2\\), \\(R_4 = 7\\), and \\(R_5 = 1\\) with a finite time-horizon of \\(T=5\\). What is \\(G_0\\)? Hint: work backwards and recall that \\(G_t = R_{t+1} + \\gamma G_{t+1}\\). × Solution # recall sum_k g^k = 1/(1-g) g1 &lt;- 7 * 1/(1-0.9) g1 #&gt; [1] 70 g0 &lt;- 2 + 0.9 * 70 g0 #&gt; [1] 65 Close Solution Suppose \\(\\gamma=0.9\\) and we observe rewards: \\(R_1 = 2\\), \\(R_t = 7\\), \\(t&gt;1\\) given a infinite time-horizon. What is \\(G_0\\) and \\(G_1\\)? 3.6.3 Exercise - Gambler’s problem A gambler has the opportunity to make bets on the outcomes of a sequence of coin flips. The coin may be an unequal coin where there is not equal probability \\(p_H\\) for a head (H) and a tail (T). If the coin comes up heads, the gambler wins as many dollars as he has staked on that flip; if it is tails, he loses his stake. The game ends when the gambler reaches his goal of a capital equal 100, or loses by running out of money. On each flip, the gambler must decide what portion of his capital to stake, in integer numbers of dollars. This problem can be formulated as an undiscounted, episodic, finite MDP, where we assume that the gambler starts with a capital \\(0 &lt; s_0 &lt; 100\\). × Solution Capital of the gambler: \\[\\mathcal{S} = \\{0, \\ldots, 100 \\}.\\] Terminal states are 0 and 100 (loose or win). Close Solution Define the state space \\(\\mathcal{S}\\). Which states are terminal states? × Solution Given his capital choose to gamble \\(a\\): \\[\\mathcal{A}(s) = \\{ a\\in \\mathcal{S} | 0 \\leq a \\leq \\min(s, 100-s) \\}.\\] Close Solution Define the action space \\(\\mathcal{A}(s)\\). × Solution The expected reward is: \\[r(s,a) = \\mathbb{E}[R_a] = p_H a\\] where \\(p_H\\) denote the probability of head. The state-value denote the expected reward. Close Solution Let \\(R_a\\) denote the reward given bet \\(a\\). Calculate the expected rewards. If the state-value for the terminal states is set to zero, what do the state-value of a policy mean? × Solution Since \\(r(s,a) = 0\\) for all states and actions, the state-value is the probability of winning. Close Solution Let \\(R_a\\) be zero for all bets \\(a\\) and set the state-value for the terminal state 0 to zero and for state 100 to one. What do the state-value of a policy mean? × Solution If \\(C\\) denote a Bernoulli variable equal 1 if head. Then \\[p(s&#39; | s, a) = \\Pr(s&#39; = s + Ca - (1-C)a).\\] Hence there are two transitions: if \\(s&#39; = s - a\\) then \\(p(s&#39; | s, a) = 1-p_H\\) and if \\(s&#39; = s + a\\) then \\(p(s&#39; | s, a) = p_H\\). Close Solution Calculate the transition probabilities. 3.6.4 Exercise - Factory storage A factory has a storage tank with a capacity of 4 \\(\\mathrm{m}^{3}\\) for temporarily storing waste produced by the factory. Each week the factory produces \\(0,1\\), 2 or 3 \\(\\mathrm{m}^{3}\\) waste with respective probabilities \\[p_{0}=\\displaystyle \\frac{1}{8},\\ p_{1}=\\displaystyle \\frac{1}{2},\\ p_{2}=\\displaystyle \\frac{1}{4} \\text{ and } p_{3}=\\displaystyle \\frac{1}{8}.\\] If the amount of waste produced in one week exceeds the remaining capacity of the tank, the excess is specially removed at a cost of $30 per cubic metre. At the end of each week there is a regular opportunity to remove all waste from the storage tank at a fixed cost of $25 and a variable cost of $5 per cubic metre. The problem can be modelled as a finite MDP where a state denote the amount of waste in the tank at the end of week \\(n\\) just before the regular removal opportunity. × Solution \\[\\mathcal{S} = \\{ 0,1,2,3,4 \\}\\] Close Solution Define the state space \\(\\mathcal{S}\\). × Solution Let \\(e\\) and \\(k\\) denote empty and keep the waste from the tank. Then the action space is \\[\\mathcal{A}(s) = \\{ e, k \\}.\\] Close Solution Define the action space \\(\\mathcal{A}(s)\\). × Solution The expected cost of a given state and action is the cost of empting the container and the expected cost of a special removal during the next week. Hence \\[r(s, e) = -(25 + 5s)\\]and\\[r(s,k) = -30\\sum_{i&gt;4-s} (s+i-4)p_i\\] Close Solution Calculate the expected rewards \\(r(s,a)\\). × Solution The transition probabilities are: \\[p(s&#39;|s,k) = p_{s&#39;-s}\\text{ if } s\\leq s&#39; \\leq 3\\] \\[p(4|s,k) = \\sum_{i\\geq 4-s} p_i\\] \\[p(s&#39;|s,e) = p_{s&#39;}\\text{ if } 0\\leq s&#39; \\leq 4\\] \\[p(s&#39;|s,a) = 0 \\text{ otherwise.}\\] Close Solution Calculate the transition probabilities \\(p(s&#39;|s,a)\\). References "],["mod-mdp-2.html", "Module 4 Policies and value functions for MDPs 4.1 Learning outcomes 4.2 Textbook readings 4.3 Policies and value functions 4.4 Optimal policies and value functions 4.5 Optimality vs approximation 4.6 Semi-MDPs (non-fixed time length) 4.7 Summary 4.8 Exercises", " Module 4 Policies and value functions for MDPs This module go deeper in the theory of finite Markov decision processes (MDPs). The concept of a policy and value functions is considered. Once the problem is formulated as an MDP, finding the optimal policy can be found using value functions. 4.1 Learning outcomes By the end of this module, you are expected to: Identify a policy as a distribution over actions for each possible state. Define value functions for a state and action. Derive the Bellman equation for a value function. Understand how Bellman equations relate current and future values. Define an optimal policy. Derive the Bellman optimality equation for a value function. The learning outcomes relate to the overall learning goals number 2, 7, 10, and 12 of the course. 4.2 Textbook readings For this week, you will need to read Chapter 3.5-3.7 in Sutton and Barto (2018). Read it before continuing this module. You do not have to put to much focus on the examples. A summary of the book notation can be seen here. Slides for this module can be seen here. You do not have to look at them before the lecture! 4.3 Policies and value functions A policy \\(\\pi\\) is a distribution over actions, given some state: \\[\\pi(a | s) = \\Pr(A_t = a | S_t = s).\\] Since the MDP is stationary the policy is time-independent, i.e. given a state, we choose the same action no matter the time-step. If \\(\\pi(a | s) = 1\\) for a single state, i.e. an action is chosen with probability one always then the policy is called deterministic. Otherwise a policy is called stochastic. Given a policy we can define some value functions. The state-value function \\(v_\\pi(s)\\) denote the expected return starting from state \\(s\\) when following the policy \\(\\pi\\): \\[ \\begin{align} v_\\pi(s) &amp;= \\mathbb{E}_\\pi[G_t | S_t = s] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1} + \\gamma G_{t+1} | S_t = s]. \\end{align} \\] Note the last equal sign comes from \\(G_t = R_{t+1} + \\gamma G_{t+1}\\). The action-value function \\(q_\\pi(s, a)\\), denote the expected return starting from state \\(s\\), taking action \\(a\\) and from thereon following policy \\(\\pi\\): \\[ \\begin{align} q_\\pi(s, a) &amp;= \\mathbb{E}_\\pi[G_t | S_t = s, A_t = a] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1} + \\gamma G_{t+1} | S_t = s, A_t = a]. \\end{align} \\] This action-value, also known as “q-value”, is very important, as it tells us directly what action to pick in a particular state. Given the definition of q-values, the state-value function is an average over the q-values of all actions we could take in that state: \\[\\begin{equation} v_\\pi(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a|s)q_\\pi(s, a) \\tag{4.1} \\end{equation}\\] A q-value (action-value) is equal to the expected reward \\(r(s,a)\\) that we get from choosing action \\(a\\) in state \\(s\\), plus a discounted amount of the average state-value of all the future states: \\[q_\\pi(s, a) = r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\] Joining the equations, the state-value of a particular state \\(s\\) now becomes the sum of weighted state-values of all possible subsequent states \\(s&#39;\\), where the weights are the policy probabilities: \\[ \\begin{align} v_\\pi(s) &amp;= \\sum_{a \\in \\mathcal{A}}\\pi(a | s)q_\\pi(s, a) \\\\ &amp;= \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\right), \\end{align} \\tag{4.2} \\] which is known as the Bellman equation. 4.4 Optimal policies and value functions The objective function of an MDP can now be stated mathematically which is to find an optimal policy \\(\\pi_*\\) with state-value function: \\[v_*(s) = \\max_\\pi v_\\pi(s).\\] That is, a policy \\(\\pi&#39;\\) is defined as better than policy \\(\\pi\\) if its expected return is higher for all states. Note the objective function is not a scalar here but if the agent start in state \\(s_0\\) then we may reformulate the objective function maximize the expected return to \\[v_*(s_0) = \\max_\\pi \\mathbb{E}_\\pi[G_0 | S_0 = s_0] = \\max_\\pi v_\\pi(s_0)\\] If the MDP has the right properties (details are not given here), there exists an optimal deterministic policy \\(\\pi_*\\) which is better than or just as good as all other policies. For all such optimal policies (there may be more than one), we only need to find one optimal policy that have the optimal state-value function \\(v_*\\). We may rewrite \\(v_*(s)\\) using Eq. (4.1): \\[ \\begin{align} v_*(s) &amp;= \\max_\\pi v_\\pi(s) \\\\ &amp;= \\max_\\pi \\sum_{a \\in \\mathcal{A}}\\pi(a|s)q_\\pi(s, a) \\\\ &amp;= \\max_\\pi \\max_a q_\\pi(s, a)\\qquad \\text{(set $\\pi(a|s) = 1$ where $q_\\pi$ is maximal)} \\\\ &amp;= \\max_a \\max_\\pi q_\\pi(s, a) \\\\ &amp;= \\max_a q_*(s, a), \\\\ \\end{align} \\] where the optimal q-value/action-value function \\(q_*\\) is: \\[ \\begin{align} q_*(s, a) &amp;= \\max_\\pi q_\\pi(s, a) \\\\ &amp;= r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_*(s&#39;) \\\\ &amp;= r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) \\max_{a&#39;} q_*(s&#39;, a&#39;). \\end{align} \\] This is the the Bellman optimality equation for \\(q_*\\) and the optimal policy is: \\[ \\pi_*(a | s) = \\begin{cases} 1 \\text{ if } a = \\arg\\max_{a \\in \\mathcal{A}} q_*(s, a) \\\\ 0 \\text { otherwise.} \\end{cases} \\] Or we may define a deterministic policy as \\[ \\begin{align} \\pi_*(s) &amp;= \\arg\\max_{a \\in \\mathcal{A}} q_*(s, a) \\\\ &amp;= \\arg\\max_{a \\in \\mathcal{A}} \\left(r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_*(s&#39;)\\right). \\end{align} \\tag{4.3} \\] Similar we can write the Bellman optimality equation for \\(v_*\\): \\[ \\begin{align} v_*(s) &amp;= \\max_a q_*(s, a) \\\\ &amp;= \\max_a r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_*(s&#39;) \\end{align} \\tag{4.4} \\] Note the Bellman equations define our state-value and q-value function, while the Bellman optimality equations define how to find the optimal value functions. Using \\(v_*\\), the optimal expected long term return is turned into a quantity that is immediately available for each state. On the other hand if we do not store \\(v_*\\), we can find \\(v_*\\) by a one-step-ahead search using \\(q_*\\), acting greedy. 4.5 Optimality vs approximation In Section 4.4 optimal policies and value functions was found; however solving the Bellman optimality equations can be expensive, e.g. if the number of states is huge. Consider a state \\(s = (x_1,\\ldots,x_n)\\) with state variables \\(x_i\\) each taking two possible values, then the number of states is \\(|\\mathcal{S}| = 2^n\\). That is, the state space grows exponentially with the number of state variables also known as the curse of dimensionality. Large state or action spaces may happen in practice; moreover, they may also be continuous. As a result we need to approximate the value functions because calculation of optimality is too expensive. This is indeed what happens in RL where we approximate the expected return. Furthermore, often we focus on states with high encountering probability while allowing the agent to make sub-optimal decisions in states that have a low probability. 4.6 Semi-MDPs (non-fixed time length) So far we have considered MDPs with a fixed length between each time-step. The model can be extended to MDPs with non-fixed time-lengths known as semi-MDPs. Let \\(l(s&#39;|s,a)\\) denote the length of a time-step given that the system is in state \\(s\\), action \\(a\\) is chosen and makes a transition to state \\(s&#39;\\). Then the discount rate over a time-step with length \\(l(s&#39;|s,a)\\) is then \\[\\gamma(s&#39;|s,a) = \\gamma^{l(s&#39;|s,a)},\\] and the Bellman optimality equations becomes: \\[ v_*(s) = \\max_a r(s,a) + \\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) \\gamma(s&#39;|s,a) v_*(s&#39;), \\] and \\[ q_*(s, a) = r(s,a) + \\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) \\gamma(s&#39;|s,a) \\max_{a&#39;} q_*(s&#39;, a&#39;). \\] That is, the discount rate now is a part of the sum since it depends on the length which depends on the transition. 4.7 Summary Read Chapter 3.8 in Sutton and Barto (2018). 4.8 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 4.8.1 Exercise - Optimal policy Figure 4.1: A simple MDP. × Solution Let \\(\\pi_L\\) and \\(\\pi_R\\) denote the left and right policy, respectively. Recall the Bellman equation: \\[v_\\pi(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\right).\\] For the left policy this reduces to \\[v_{\\pi_L}(s) = 1 + \\gamma(v_\\pi(s&#39;)) = 1 + \\gamma(0 + \\gamma v_{\\pi_L}(s)).\\] Isolating \\(v_{\\pi_L}(s)\\) gives us \\[v_{\\pi_L}(s) = 1/(1-\\gamma^2).\\] Similar for the right policy we get \\[v_{\\pi_R}(s) = 0 + \\gamma(v_\\pi(s&#39;)) = 0 + \\gamma(2 + \\gamma v_{\\pi_R}(s)).\\] Isolating \\(v_{\\pi_R}(s)\\) gives us \\[v_{\\pi_R}(s) = 2\\gamma/(1-\\gamma^2).\\] Now for \\(\\gamma=0\\) we get \\(v_{\\pi_L}(s) = 1\\) and \\(v_{\\pi_R}(s) = 0\\), i.e. left policy optimal. for \\(\\gamma=0.9\\) we get \\(v_{\\pi_L}(s) = 5.26\\) and \\(v_{\\pi_R}(s) = 9.47\\), i.e. right policy optimal. for \\(\\gamma=0.5\\) we get \\(v_{\\pi_L}(s) = 1.33\\) and \\(v_{\\pi_R}(s) = 1.33\\), i.e. both policies optimal. Close Solution Consider the transition diagram for an MDP shown in Figure 4.1 with 3 states (white circles). The only decision to be made is that in the top state \\(s\\), where two actions are available, left and right. The numbers show the rewards that are received deterministically after each action. There are exactly two deterministic policies left and right. Which policy is optimal if \\(\\gamma = 0, 0.9\\) and \\(0.5\\)? 4.8.2 Exercise - Car rental Consider a rental company with two locations, each with a capacity of 20 cars. Each day, customers arrive at each location to rent cars. If a car is available, it is rented out with a reward of $10. Otherwise the opportunity is lost. Cars become available for renting the day after they are returned. The number of cars rental requests \\(D_i\\) at Location \\(i=1,2\\) are Poisson distributed with mean 3 and 4. Similar, the number of cars returned \\(H_i\\) at Location \\(i=1,2\\) are Poisson distributed with mean 3 and 2. Cars returned resulting in more cars than the capacity are lost (and thus disappear from the problem). To ensure that cars are available where they are needed, they can be moved between the two locations overnight, at a cost of $2 per car. A maximum of five cars can be moved from one location to the other in one night. Formulate the problem as an finite MDP where the time-steps are days. × Solution \\[\\mathcal{S} = \\{ (x,y) | 0 \\leq x \\leq 20, 0 \\leq y \\leq 20 \\}\\] Close Solution Define the state space (with states \\((x,y)\\)) equal the number of cars at each location at the end of the day. × Solution \\[\\mathcal{A}(s) = \\{ a | -\\min(5,y,20-x) \\leq a \\leq min(5,x,20-y) \\}\\] Close Solution Define the action space equal the net numbers of cars moved from Location 1 to Location 2 overnight, i.e. negative if move from Location 2 to 1. × Solution The reward equals the reward of rentals minus the cost of movements. Note we have \\(\\bar{x} = x - a\\) and \\(\\bar{y} = x + a\\) after movement. Hence \\[r(s,a) = \\mathbb{E}[10(\\min(D_1, \\bar{x}) + \\min(D_2, \\bar{y}) )-2\\mid a \\mid]\\] where \\[\\mathbb{E}[\\min(D, z)] = \\sum_{i=0}^z ip(D = i) + (1-p(D\\leq z))z.\\] Close Solution Calculate the expected reward \\(r(s,a)\\). Note the inventory dynamics (number of cars) at each parking lot is independent of the other given an action \\(a\\). Let us consider Location 1 and assume that we are in state \\(x\\) and chose action \\(a\\). Then the number of cars after movement is \\(x - a\\) and after rental requests \\(x - a - \\min(D_1, x-a)\\). Next, the number of returned cars are added: \\(x - a - \\min(D_1, x-a) + H_1\\). Finally, note that if this number is above 20 (parking lot capacity), then we only have 20 cars, i.e. the inventory dynamics (number of cars at the end of the day) is \\[X = \\min(20, x-a - \\min(D_1, x-a) + H_1))).\\] × Solution Only difference is that cars moved to Location 2 is \\(a\\) (and not \\(-a\\)): \\[Y = \\min(20, y + a - \\min(D_2, y+a) + H_2)).\\] Close Solution Give the inventory dynamics for Location 2. References "],["mod-dp.html", "Module 5 Dynamic programming 5.1 Learning outcomes 5.2 Textbook readings 5.3 Policy evaluation 5.4 Policy Improvement 5.5 Policy Iteration 5.6 Value Iteration 5.7 Generalized policy iteration 5.8 Example - Factory Storage 5.9 Summary 5.10 Exercises", " Module 5 Dynamic programming The term Dynamic Programming (DP) refers to a collection of algorithms that can be used to compute optimal policies of a model with full information about the dynamics, e.g. a Markov Decision Process (MDP). A DP model must satisfy the principle of optimality. That is, an optimal policy must consist for optimal sub-polices or alternatively the optimal value function in a state can be calculated using optimal value functions in future states. This is indeed what is described with the Bellman optimality equations. DP do both policy evaluation (prediction) and control. Policy evaluation give us the value function \\(v_\\pi\\) given a policy \\(\\pi\\). Control refer to finding the best policy or optimizing the value function. This can be done using the Bellman optimality equations. Two main problems arise with DP. First, often we do not have full information about the MDP model, e.g. the rewards or transition probabilities are unknown. Second, we need to calculate the value function in all states using the rewards, actions, and transition probabilities. Hence, using DP may be computationally expensive if we have a large number of states and actions. Note the term programming in DP have nothing to do with a computer program but comes from that the mathematical model is called a “program”. 5.1 Learning outcomes By the end of this module, you are expected to: Describe the distinction between policy evaluation and control. Identify when DP can be applied, as well as its limitations. Explain and apply iterative policy evaluation for estimating state-values given a policy. Interpret the policy improvement theorem. Explain and apply policy iteration for finding an optimal policy. Explain and apply value iteration for finding an optimal policy. Describe the ideas behind generalized policy iteration. Interpret the distinction between synchronous and asynchronous dynamic programming methods. The learning outcomes relate to the overall learning goals number 2, 4, 6, 7, 8, 10 and 12 of the course. 5.2 Textbook readings For this week, you will need to read Chapter 4-4.7 in Sutton and Barto (2018). Read it before continuing this module. A summary of the book notation can be seen here. Slides for this module can be seen here. You do not have to look at them before the lecture! 5.3 Policy evaluation The state-value function can be represented using the Bellman equation (4.2): \\[ v_\\pi(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\right). \\tag{5.1} \\] If the dynamics are known perfectly, this becomes a system of \\(|\\mathcal{S}|\\) simultaneous linear equations in \\(|\\mathcal{S}|\\) unknowns \\(v_\\pi(s), s \\in \\mathcal{S}\\). This linear system can be solved using e.g. some software. However, inverting the matrix can be computationally expensive for a large state space. Instead we consider an iterative method and a sequence of value function approximations \\(v_0, v_1, v_2, \\ldots\\), with initial approximation \\(v_0\\) chosen arbitrarily e.g. \\(v_0(s) = 0 \\: \\forall s\\) (ensuring terminal state = 0). We can use a sweep with the Bellman equation to update the values: \\[\\begin{equation} v_{k+1}(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_k(s&#39;)\\right) \\end{equation}\\] We call this update an expected update because it is based on the expectation over all possible next states, rather than a sample of reward from the next state. This update will converge to \\(v_\\pi\\) after a number of sweeps of the state-space. Since we do not want an infinite number of sweeps we introduce a threshold \\(\\theta\\) (see Figure 5.1). Note the algorithm uses two arrays to maintain the state-value (\\(v\\) and \\(V\\)). Alternatively, a single array could be used that update values in place, i.e. \\(V\\) is used in place of \\(v\\). Hence, state-values are updated faster. Figure 5.1: Iterative policy evaluation (Sutton and Barto 2018). 5.4 Policy Improvement From the Bellman optimality equation (4.4) we have \\[ \\begin{align} \\pi_*(s) &amp;= \\arg\\max_{a \\in \\mathcal{A}} q_*(s, a) \\\\ &amp;= \\arg\\max_{a \\in \\mathcal{A}} \\left(r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_*(s&#39;)\\right). \\end{align} \\tag{5.2} \\] That is, a deterministic optimal policy can be found by choosing greedy the best action given the optimal value function. If we apply this greed action selection to the value function for a policy \\(\\pi\\) and pick the action with most \\(q\\): \\[ \\begin{align} \\pi&#39;(s) &amp;= \\arg\\max_{a \\in \\mathcal{A}} q_\\pi(s, a) \\\\ &amp;= \\arg\\max_{a \\in \\mathcal{A}} \\left(r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\right), \\end{align} \\tag{5.3} \\] then \\[ q_\\pi(s, \\pi&#39;(s)) \\geq q_\\pi(s, \\pi(s)) = v_\\pi(s) \\quad \\forall s \\in \\mathcal{S}. \\] Note if \\(\\pi&#39;(s) = \\pi(s), \\forall s\\in\\mathcal{S}\\) then the Bellman optimality equation (4.4) holds and \\(\\pi\\) must be optimal; Otherwise, \\[ \\begin{align} v_\\pi(s) &amp;\\leq q_\\pi(s, \\pi&#39;(s)) = \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma v_\\pi(S_{t+1}) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma q_\\pi(S_{t+1}, \\pi&#39;(S_{t+1})) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma (R_{t+2} + \\gamma^2 v_\\pi(S_{t+2})) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma R_{t+2} + \\gamma^2 q_\\pi(S_{t+2}, \\pi&#39;(S_{t+2})) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + ...)) | S_t = s] \\\\ &amp;= v_{\\pi&#39;}(s), \\end{align} \\] That is, policy \\(\\pi&#39;\\) is strictly better than policy \\(\\pi\\) since there is at least one state \\(s\\) for which \\(v_{\\pi&#39;}(s) &gt; v_\\pi(s)\\). We can formalize the above deductions in a theorem. Theorem 5.1 (Policy improvement theorem) Let \\(\\pi\\), \\(\\pi&#39;\\) be any pair of deterministic policies, such that \\[\\begin{equation} q_\\pi(s, \\pi&#39;(s)) \\geq v_\\pi(s) \\quad \\forall s \\in \\mathcal{S}. \\end{equation}\\] That is, \\(\\pi&#39;\\) is as least as good as \\(\\pi\\). 5.5 Policy Iteration Given the policy improvement theorem we can now improve policies iteratively until we find an optimal policy: Pick an arbitrary initial policy \\(\\pi\\). Given a policy \\(\\pi\\), estimate \\(v_\\pi(s)\\) via the policy evaluation algorithm. Generate a new, improved policy \\(\\pi&#39; \\geq \\pi\\) by greedily picking \\(\\pi&#39; = \\text{greedy}(v_\\pi)\\) using Eq. (5.3). If \\(\\pi&#39;=\\pi\\) then stop (\\(\\pi_*\\) has been found); otherwise go to Step 2. The algorithm is given in Figure 5.2. The sequence of calculations will be: \\[\\pi_0 \\xrightarrow[]{E} v_{\\pi_0} \\xrightarrow[]{I} \\pi_1 \\xrightarrow[]{E} v_{\\pi_1} \\xrightarrow[]{I} \\pi_2 \\xrightarrow[]{E} v_{\\pi_2} \\ldots \\xrightarrow[]{I} \\pi_* \\xrightarrow[]{E} v_{*}\\] The number of steps of policy iteration needed to find the optimal policy are often low. Figure 5.2: Policy iteration (Sutton and Barto 2018). 5.6 Value Iteration Policy iteration requires full policy evaluation at each iteration step. This could be an computationally expensive process which requires may sweeps of the state space. In value iteration, the policy evaluation is stopped after one sweep of the state space. Value iteration is achieved by turning the Bellman optimality equation into an update rule: \\[ v_{k+1}(s) = \\max_a \\left(r(s,a) + \\gamma\\sum_{s&#39;} p(s&#39;|s, a)v_k(s&#39;)\\right) \\] Value iteration effectively combines, in each of its sweeps, one sweep of policy evaluation and one sweep of policy improvement, since it performs a greedy update while also evaluating the current policy. Also, it is important to understand that the value-iteration algorithm does not require a policy to work. No actions have to be chosen. Rather, the state-values are updated and after the last step of value-iteration the optimal policy \\(\\pi_*\\) is found: \\[ \\pi_*(s) = \\arg\\max_{a \\in \\mathcal{A}} \\left(r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_*(s&#39;)\\right), \\] The algorithm is given in Figure 5.3. Since we do not want an infinite number of iterations we introduce a threshold \\(\\theta\\). The sequence of calculations will be (where G denotes greedy action selection): \\[v_{0} \\xrightarrow[]{EI} v_{1} \\xrightarrow[]{EI} v_{2} \\ldots \\xrightarrow[]{EI} v_{*} \\xrightarrow[]{G} \\pi_{*}\\] Figure 5.3: Value iteration (Sutton and Barto 2018). 5.7 Generalized policy iteration Generalised Policy Iteration (GPI) is the process of letting policy evaluation and policy improvement interact, independent of granularity. For instance, improvement/evaluation can be performed by doing complete sweeps of the state space (policy iteration), or improve the state-value using a single sweep of the state space (value iteration). GPI can also do asynchronous updates of the state-value where states are updated individually, in any order. This can significantly improve computation. Examples on asynchronous DP are In-place DP mentioned in Section 5.3 where instead of keeping a copy of the old and new value function in each value-iteration update, you can just update the value functions in-place. Hence asynchronous updates in other parts of the state-space will directly be affected resulting in faster updates. Prioritized sweeping where we keep track of how “effective” or “significant” updates to our state-values are. States where the updates are more significant are likely further away from converging to the optimal value. As such, we would like to update them first. For this, we would compute the Bellman error: \\[|v_{k+1}(s) - v_k(s)|,\\] and keep these values in a priority queue. You can then efficiently pop the top of it to always get the state you should update next. Prioritize local updates where you update nearby states given the current state, e.g. if your robot is in a particular region of the grid, it is much more important to update nearby states than faraway ones. GPI works and will convergence to the optimal policy and optimal value function if the states are visited (in theory) an infinite number of times. That is, you must explore the whole state space for GPI to work. 5.8 Example - Factory Storage Let us consider Exercise 3.6.4 where a factory has a storage tank with a capacity of 4 \\(\\mathrm{m}^{3}\\) for temporarily storing waste produced by the factory. Each week the factory produces \\(0,1\\), 2 or 3 \\(\\mathrm{m}^{3}\\) waste with respective probabilities \\[p_{0}=\\displaystyle \\frac{1}{8},\\ p_{1}=\\displaystyle \\frac{1}{2},\\ p_{2}=\\displaystyle \\frac{1}{4} \\text{ and } p_{3}=\\displaystyle \\frac{1}{8}.\\] If the amount of waste produced in one week exceeds the remaining capacity of the tank, the excess is specially removed at a cost of $30 per cubic metre. At the end of each week there is a regular opportunity to remove all waste from the storage tank at a fixed cost of $25 and a variable cost of $5 per cubic metre. The problem can be modelled as a finite MDP where a state denote the amount of waste in the tank at the end of week \\(n\\) just before the regular removal opportunity \\[\\mathcal{S} = \\{ 0,1,2,3,4 \\}.\\] The action space is \\[\\mathcal{A}(s) = \\{ empty, keep \\}.\\] The expected cost of a given state and action is the cost of empting the container and the expected cost of a special removal during the next week. Hence the expected reward is \\[r(s, e) = -(25 + 5s)\\] and \\[r(s,k) = -30\\sum_{i&gt;4-s} (s+i-4)p_i.\\] Finally, the transition probabilities are: \\[ \\begin{align} p(s&#39;|s,k) &amp;= p_{s&#39;-s}\\text{ if } s\\leq s&#39; \\leq 3, \\\\ p(4|s,k) &amp;= \\sum_{i\\geq 4-s} p_i, \\\\ p(s&#39;|s,e) &amp;= p_{s&#39;}\\text{ if } 0\\leq s&#39; \\leq 4, \\\\ p(s&#39;|s,a) &amp;= 0 \\text{ otherwise.} \\end{align} \\] For solving the MDP we implement an MDP R6 class in R: library(R6) library(hash) library(tidyverse) #&#39; R6 class representing the MDP #&#39; #&#39; Note since the MDP is a model with full information, we combine the agent and environment into a single class. MDPClass &lt;- R6Class(&quot;MDPClass&quot;, public = list( #&#39; @field model The Markov decision process (model). The model is represented #&#39; using a hash list for the states. Each states contains a list with `actions`: a hash #&#39; list with actions and `pi` a vector with policy pr (named vector with only #&#39; positive values). The `actions` hash list contains actions with trans #&#39; pr `pr` (named vector only with positive values) and expected reward `reward`. model = NULL, #&#39; @field sV The state-values stored in a hash. Value updates are done in-place (one-array version). v = NULL, #&#39; @description Create an object (when call new). #&#39; @return The new object. initialize = function() { self$model &lt;- hash() self$v &lt;- hash() }, #&#39; @description Add the states (keys/strings in the hash) #&#39; @param s A vector of states (converted to strings). addStateSpace = function(s) { keys &lt;- make.keys(s) self$model[keys] &lt;- list(pi = NA) # don&#39;t use pi = NULL since then won&#39;t be defined self$setStateValue() # so v defined return(invisible(NULL)) }, #&#39; @description Add the actions to a state #&#39; @param stateStr State key/string. #&#39; @param a A vector of actions (converted to strings). addActionSpace = function(stateStr, a) { a &lt;- make.keys(a) self$model[[stateStr]]$actions &lt;- hash() self$model[[stateStr]]$actions[a] &lt;- NA return(invisible(NULL)) }, #&#39; @description Add expected reward and trans pr to an action #&#39; @param stateStr State key/string. #&#39; @param actionStr Action key/string. #&#39; @param r The expected reward. #&#39; @param pr A named vector with positive trans pr. The name of an element must be the state key. addAction = function(stateStr, actionStr, r, pr) { if (!has.key(stateStr, self$model)) { self$addStateSpace(stateStr) # self$model[make.keys(stateStr)] &lt;- hash(pi = NA, actions = hash()) } self$model[[stateStr]]$actions[[actionStr]] &lt;- list(r = r, pr = pr) return(invisible(NULL)) }, #&#39; @description Set the state-value of states #&#39; @param stateStr A vector of state keys. #&#39; @param value The value. setStateValue = function(stateStr = keys(self$model), value = 0) { self$v[stateStr] &lt;- value return(invisible(NULL)) }, #&#39; @description Set the policy to a random determistic policy. setRandomDeterministicPolicy = function() { stateStr = keys(self$model) for (s in stateStr) { self$model[[s]]$pi &lt;- 1 names(self$model[[s]]$pi) &lt;- sample(self$getActionKeys(s), 1) } return(invisible(NULL)) }, #&#39; @description Set a deterministic policy #&#39; @param sa A named vector with action keys and names equal state keys- setDeterministicPolicy = function(sa) { states &lt;- names(sa) pi = 1 for (i in 1:length(sa)) { names(pi) &lt;- sa[i] s &lt;- states[i] self$model[[s]]$pi &lt;- pi } return(invisible(NULL)) }, #&#39; @description Set the policy to the named vector pi for a set of states #&#39; @param states States under consideration. #&#39; @param pi A named vector with policy pr (only psitive values). setPolicy = function(states, pi) { for (s in states) { self$model[[s]]$pi &lt;- pi } return(invisible(NULL)) }, #&#39; @description Return the state keys getStateKeys = function() { keys(self$model) }, #&#39; @description Return the action keys #&#39; @param s The state considered. getActionKeys = function(s) { keys(self$model[[s]]$actions) }, #&#39; @description Return the expected reward and trans pr of actions in a state #&#39; @param s The state considered. getActionInfo = function(s) { as.list(self$model[[s]]$actions) }, #&#39; @description Return the current policy as a tibble getPolicy = function() { # if (all(sapply(self$model, FUN = function(s) {s$pi}) == 1)) { # deterministic policy # sapply(self$model, FUN = function(s) {names(s$pi)}) # } else { map_dfr(self$getStateKeys(), .f = function(s) { list(state = s, action = names(self$model[[s]]$pi), pr = self$model[[s]]$pi) }) }, #&#39; @description Return the state-values as a tibble #&#39; @param s A vector of state keys. getStateValues = function(s = keys(self$v)) { tibble(state = s, v = values(self$v, keys = s)) }, #&#39; @description Return a matrix with trans pr for a given action. #&#39; @param a Action key. getTransPrActionMat = function(a) { states &lt;- keys(self$model) m &lt;- matrix(0, nrow = length(states), ncol = length(states)) colnames(m) &lt;- states rownames(m) &lt;- states for (s in states) { m[s, names(self$model[[s]]$actions[[a]]$pr)] &lt;- self$model[[s]]$actions[[a]]$pr } return(m) }, #&#39; @description Returns all rewards in a matrix getRewardMat = function() { states &lt;- keys(self$model) actions &lt;- unique(unlist(sapply(states, function(s) self$getActionKeys(s)))) m &lt;- matrix(NA, nrow = length(states), ncol = length(actions)) colnames(m) &lt;- actions rownames(m) &lt;- states for (s in states) { for (a in self$getActionKeys(s)) { m[s, a] &lt;- self$model[[s]]$actions[[a]]$r } } return(m) }, #&#39; @description Bellman calculations for a given state and action #&#39; @param gamma Discount rate. #&#39; @param s State key. #&#39; @param a Action key. bellmanCalc = function(gamma, s, a) { pr &lt;- self$model[[s]]$actions[[a]]$pr r &lt;- self$model[[s]]$actions[[a]]$r nS &lt;- names(pr) vS &lt;- values(self$v, nS) return(r + gamma * sum(pr * vS)) }, #&#39; @description Iterative policy evaluation of current policy (defined by pi) #&#39; @param gamma Discount rate. #&#39; @param theta Threshold parameter. #&#39; @param maxIte Maximum number of iterations. #&#39; @param reset If true set all state-values to 0. policyEval = function(gamma, theta = 0.00001, maxIte = 10000, reset = TRUE) { if (reset) self$setStateValue() # set to 0 for (ite in 1:maxIte) { delta &lt;- 0 # Bellman error for (s in keys(self$model)) { v &lt;- self$v[[s]] # update pi &lt;- self$model[[s]]$pi actions &lt;- names(pi) val = 0 for (a in actions) { # pr &lt;- self$model[[s]]$actions[[a]]$pr # r &lt;- self$model[[s]]$actions[[a]]$r # nS &lt;- names(pr) # vS &lt;- values(self$v, nS) val &lt;- val + pi[a] * self$bellmanCalc(gamma, s, a) } self$v[[s]] &lt;- val delta &lt;- max(delta, abs(v-val)) } if (delta &lt; theta) break } if (ite == maxIte) warning(&quot;Policy evaluation algorithm stopped at max iterations allowed:&quot;, maxIte) }, #&#39; @description Policy iteration using iterative policy eval #&#39; @param gamma Discount rate. #&#39; @param theta Threshold parameter. #&#39; @param maxIteEval Maximum number of iterations when evaluate policy. #&#39; @param maxItePolicy Maximum number of policy iterations. policyIte = function(gamma, theta = 0.00001, maxIteEval = 10000, maxItePolicy = 100) { self$setRandomDeterministicPolicy() for (ite in 1:maxItePolicy) { self$policyEval(gamma, theta, maxIteEval, reset = FALSE) stable &lt;- TRUE for (s in keys(self$model)) { piOld &lt;- names(self$model[[s]]$pi) actions &lt;- self$getActionKeys(s) vMax = -Inf for (a in actions) { val &lt;- self$bellmanCalc(gamma, s, a) if (val &gt; vMax) { names(self$model[[s]]$pi) &lt;- a vMax &lt;- val } } if (piOld != names(self$model[[s]]$pi) ) stable &lt;- FALSE } if (stable) break } if (ite == maxItePolicy) warning(&quot;Policy Iteration algorithm stopped at max iterations allowed:&quot;, maxItePolicy) message(str_c(&quot;Policy iteration algorihm finished in &quot;, ite, &quot; iterations.&quot;)) return(invisible(NULL)) }, #&#39; @description Value iteration #&#39; @param gamma Discount rate. #&#39; @param theta Threshold parameter. #&#39; @param maxIte Maximum number of iterations. #&#39; @param reset If true initialize all state-values to 0. valueIte = function(gamma, theta = 0.00001, maxIte = 10000, reset = TRUE) { self$setRandomDeterministicPolicy() if (reset) self$setStateValue() # set to 0 for (ite in 1:maxIte) { delta &lt;- 0 # Bellman error for (s in keys(self$model)) { v &lt;- self$v[[s]] actions &lt;- self$getActionKeys(s) vMax = -Inf for (a in actions) { val &lt;- self$bellmanCalc(gamma, s, a) if (val &gt; vMax) { vMax &lt;- val names(self$model[[s]]$pi) &lt;- a } } self$v[[s]] &lt;- vMax delta &lt;- max(delta, abs(v-vMax)) } if (delta &lt; theta) break } if (ite == maxIte) warning(&quot;Value iteration algorithm stopped at max iterations allowed:&quot;, maxIte) message(str_c(&quot;Value iteration algorihm finished in &quot;, ite, &quot; iterations.&quot;)) return(invisible(NULL)) } ) ) You may have a look at the code and try to get an overview. Let us now try to solve the problem. First we need some functions for calculating the reward and transition probabilities: #&#39; Expected reward of an action #&#39; @param s Waste amount (state). #&#39; @param a Action (keep or empty). #&#39; @return The expected reward reward &lt;-function(s, a) { i &lt;- as.numeric(s) p&lt;-c(1/8, 1/2, 1/4, 1/8) if (a==&quot;keep&quot;) { if (i&lt;2) return(0) # no excess waste k &lt;- (4-i+1):3 return(-30*sum( (i+k-4)*p[k+1] ) ) } if (a==&quot;empty&quot;) { return(-1*(25 + 5*i)) } return(NULL) } #&#39; Find transition probabilities #&#39; @param s Waste amount (state). #&#39; @param a Action (keep or empty). #&#39; @return The trans pr and id transPr&lt;-function(s, a) { i &lt;- as.numeric(s) p&lt;-c(1/8, 1/2, 1/4, 1/8) pr&lt;-NULL id&lt;-NULL if (a==&quot;keep&quot;) { if (i&lt;4) for (j in i:3) { pr&lt;-c(pr,p[j-i+1]) id&lt;-c(id,j) } if (i&gt;0) { pr&lt;-c(pr,sum(p[(4-i):3+1])) id&lt;-c(id,4) } } if (a==&quot;empty&quot;) { for (j in 0:3) { pr&lt;-c(pr,p[j+1]) id&lt;-c(id,j) } } names(pr) &lt;- id return(pr) } For instance the expected reward in state 4 under action keep is: s &lt;- 3 a &lt;- &quot;keep&quot; reward(s, a) #&gt; [1] -15 transPr(s, a) #&gt; 3 4 #&gt; 0.125 0.875 We are now ready to build the model: mdp &lt;- MDPClass$new() mdp$addStateSpace(0:4) # add state keys for (s in mdp$getStateKeys()) mdp$addActionSpace(s, c(&quot;empty&quot;, &quot;keep&quot;)) # add action keys # Add trans pr and rewards for (s in mdp$getStateKeys()) { for (a in mdp$getActionKeys(s)) { mdp$addAction(s, a, r = reward(s,a), pr = transPr(s,a)) } } We may check that we have built the MDP correct using: mdp$getTransPrActionMat(&quot;keep&quot;) #&gt; 0 1 2 3 4 #&gt; 0 0.125 0.500 0.250 0.125 0.000 #&gt; 1 0.000 0.125 0.500 0.250 0.125 #&gt; 2 0.000 0.000 0.125 0.500 0.375 #&gt; 3 0.000 0.000 0.000 0.125 0.875 #&gt; 4 0.000 0.000 0.000 0.000 1.000 mdp$getTransPrActionMat(&quot;empty&quot;) #&gt; 0 1 2 3 4 #&gt; 0 0.125 0.5 0.25 0.125 0 #&gt; 1 0.125 0.5 0.25 0.125 0 #&gt; 2 0.125 0.5 0.25 0.125 0 #&gt; 3 0.125 0.5 0.25 0.125 0 #&gt; 4 0.125 0.5 0.25 0.125 0 mdp$getRewardMat() #&gt; empty keep empty keep empty keep empty keep empty keep #&gt; 0 -25 0.00 NA NA NA NA NA NA NA NA #&gt; 1 -30 0.00 NA NA NA NA NA NA NA NA #&gt; 2 -35 -3.75 NA NA NA NA NA NA NA NA #&gt; 3 -40 -15.00 NA NA NA NA NA NA NA NA #&gt; 4 -45 -41.25 NA NA NA NA NA NA NA NA mdp$getActionInfo(&quot;3&quot;) #&gt; $keep #&gt; $keep$r #&gt; [1] -15 #&gt; #&gt; $keep$pr #&gt; 3 4 #&gt; 0.125 0.875 #&gt; #&gt; #&gt; $empty #&gt; $empty$r #&gt; [1] -40 #&gt; #&gt; $empty$pr #&gt; 0 1 2 3 #&gt; 0.125 0.500 0.250 0.125 Let us try to evaluate a fixed policy given a discount rate of 0.5: sa &lt;- c(&quot;0&quot; = &quot;keep&quot;, &quot;1&quot; = &quot;keep&quot;, &quot;2&quot; = &quot;keep&quot;, &quot;3&quot; = &quot;keep&quot;, &quot;4&quot; = &quot;empty&quot;) mdp$setDeterministicPolicy(sa) mdp$getPolicy() #&gt; # A tibble: 5 × 3 #&gt; state action pr #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 keep 1 #&gt; 2 1 keep 1 #&gt; 3 2 keep 1 #&gt; 4 3 keep 1 #&gt; 5 4 empty 1 mdp$policyEval(gamma = 0.5) mdp$getStateValues() #&gt; # A tibble: 5 × 2 #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 -10.7 #&gt; 2 1 -16.3 #&gt; 3 2 -26.3 #&gt; 4 3 -42.0 #&gt; 5 4 -55.7 Let us try to find the optimal policy using policy iteration: mdp$policyIte(gamma = 0.5) mdp$getPolicy() #&gt; # A tibble: 5 × 3 #&gt; state action pr #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 keep 1 #&gt; 2 1 keep 1 #&gt; 3 2 keep 1 #&gt; 4 3 keep 1 #&gt; 5 4 empty 1 mdp$getStateValues() #&gt; # A tibble: 5 × 2 #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 -10.7 #&gt; 2 1 -16.3 #&gt; 3 2 -26.3 #&gt; 4 3 -42.0 #&gt; 5 4 -55.7 If we do value iteration we should get the same results: mdp$valueIte(0.5) mdp$getPolicy() #&gt; # A tibble: 5 × 3 #&gt; state action pr #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 keep 1 #&gt; 2 1 keep 1 #&gt; 3 2 keep 1 #&gt; 4 3 keep 1 #&gt; 5 4 empty 1 mdp$getStateValues() #&gt; # A tibble: 5 × 2 #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 -10.7 #&gt; 2 1 -16.3 #&gt; 3 2 -26.3 #&gt; 4 3 -42.0 #&gt; 5 4 -55.7 Finally, let us try to solve the problem with a discount rate of 0.99: mdp$policyIte(gamma =0.99) mdp$getPolicy() #&gt; # A tibble: 5 × 3 #&gt; state action pr #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 keep 1 #&gt; 2 1 keep 1 #&gt; 3 2 keep 1 #&gt; 4 3 empty 1 #&gt; 5 4 empty 1 mdp$getStateValues() #&gt; # A tibble: 5 × 2 #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 -1750. #&gt; 2 1 -1762. #&gt; 3 2 -1776. #&gt; 4 3 -1790. #&gt; 5 4 -1795. Note we now empty also at 3 m\\(^3\\). 5.9 Summary Read Chapter 4.8 in Sutton and Barto (2018). 5.10 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 5.10.1 Exercise - Gambler’s problem Consider the gambler’s problem in Exercise 3.6.3. × Solution #&#39; MDP model for the gamblers problem. #&#39; @param prH Probability of head. #&#39; @return The mdp object (R6 class). buildGamblerModel &lt;- function(prH) { mdp &lt;- MDPClass$new() # initialize mdp object mdp$addStateSpace(0:101) # add states (states are keys in a hash and are always converted to strings), 101 represent finished for (s in mdp$getStateKeys()) { # add actions for each state (only the key of the action) i &lt;- as.numeric(s) if (i &gt; 0 &amp; i &lt; 100) mdp$addActionSpace(s, 1:min(i, 100-i)) if (i == 0) mdp$addActionSpace(s, &quot;Loose&quot;) if (i == 100) mdp$addActionSpace(s, &quot;Win&quot;) if (i == 101) mdp$addActionSpace(s, &quot;Dummy&quot;) } # Add trans pr and expected reward to the actions for (s in as.character(1:99)) { for (a in mdp$getActionKeys(s)) { iS &lt;- as.numeric(s) iA &lt;- as.numeric(a) transPr &lt;- c(prH, 1- prH) names(transPr) &lt;- c(iS+iA, iS-iA) mdp$addAction(s, a, r = 0, pr = transPr) } } # add special actions mdp$addAction(s = &quot;0&quot;, a = &quot;Loose&quot;, r = 0, pr = c(&quot;101&quot; = 1)) mdp$addAction(s = &quot;100&quot;, a = &quot;Win&quot;, r = 1, pr = c(&quot;101&quot; = 1)) mdp$addAction(s = &quot;101&quot;, a = &quot;Dummy&quot;, r = 0, pr = c(&quot;101&quot; = 1)) return(mdp) } We make a function that return the mdp object Close Solution Build the model in R. × Solution solveGambler &lt;- function(prH) { mdp &lt;- buildGamblerModel(prH) mdp$valueIte(gamma = 1, theta = 0.0001) df &lt;- left_join(mdp$getStateValues(), mdp$getPolicy(), by = &quot;state&quot;) %&gt;% select(-pr) df &lt;- df %&gt;% mutate(state = as.numeric(state)) %&gt;% filter(state &gt; 0, state &lt; 100) %&gt;% mutate(action = as.numeric(action)) ptPr &lt;- ggplot(df, aes(x = state, y = v)) + geom_col() + labs(title = str_c(&quot;State-values for prH=&quot;, prH)) ptPolicy &lt;- ggplot(df, aes(x = state, y = action)) + geom_col() + labs(title = str_c(&quot;Optimal policy for prH=&quot;, prH)) return(list(ptPr = ptPr, ptPolicy = ptPolicy, policy = df)) } res04 &lt;- solveGambler(prH = 0.4) res04$ptPr res04$ptPolicy There is a lot of different optimal policies. In general since \\(p_h\\) is below 0.5 we want to find a policy with as few flips as possible. Close Solution Solve the problem using value iteration with \\(p_h = 0.4\\). Plot the policy with states 1-99 on the x-axis and action on the y-axis. Plot the state-values given states 1-99 on the x-axis. Your policy may not look like the policy in the book, why? × Solution # Solve the problems res025 &lt;- solveGambler(prH = 0.25) res055 &lt;- solveGambler(prH = 0.55) # State-values res025$policy %&gt;% filter(state %in% c(10,67)) #&gt; # A tibble: 2 × 3 #&gt; state v action #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 10 0.00708 10 #&gt; 2 67 0.309 17 res055$policy %&gt;% filter(state %in% c(10,67)) #&gt; # A tibble: 2 × 3 #&gt; state v action #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 10 0.855 1 #&gt; 2 67 1.00 1 # Plot results library(patchwork) (res025$ptPr + res055$ptPr) / (res025$ptPolicy + res055$ptPolicy) Close Solution Solve the problem using value iteration with \\(p_h = 0.22\\) and \\(0.55\\) and plot the results. What is the probability of winning in state 10 and 67? 5.10.2 Exercise - Maintenance problem At the beginning of each day a piece of equipment is inspected to reveal its actual working condition. The equipment will be found in one of the working conditions \\(s = 1,\\ldots, N\\) where the working condition \\(s\\) is better than the working condition \\(s+1\\). The equipment deteriorates in time. If the present working condition is \\(s\\) and no repair is done, then at the beginning of the next day the equipment has working condition \\(s&#39;\\) with probability \\(q_{ss&#39;}\\). It is assumed that \\(q_{ss&#39;}=0\\) for \\(s&#39;&lt;s\\) and \\(\\sum_{s&#39;\\geq s}q_{ss&#39;}=1\\). The working condition \\(s=N\\) represents a malfunction that requires an enforced repair taking two days. For the intermediate states \\(s\\) with \\(1&lt;s&lt;N\\) there is a choice between preventively repairing the equipment and letting the equipment operate for the present day. A preventive repair takes only one day. A repaired system has the working condition \\(s=1\\). The cost of an enforced repair upon failure is \\(C_{f}\\) and the cost of a preemptive repair in working condition \\(s\\) is \\(C_{p,s}\\). We wish to determine a maintenance rule which minimizes the repair cost. The problem can be formulated as an MDP. Since an enforced repair takes two days and the state of the system has to be defined at the beginning of each day, we need an auxiliary state for the situation in which an enforced repair is in progress already for one day. × Solution \\[\\mathcal{S}=\\{1,2,\\ \\ldots,\\ N,\\ N+1\\}.\\] State \\(s\\) with \\(1\\leq s\\leq N\\) corresponds to the situation in which an inspection reveals working condition \\(s\\), while state \\(N+1\\) corresponds to the situation in which an enforced repair is in progress already for one day. Close Solution Define the state space \\(\\mathcal{S}\\), i.e. the the set of possible states of the system. × Solution The set of possible actions in state \\(s\\) is chosen as \\[\\mathcal{A}(1)=\\{0\\},\\ \\mathcal{A}(s)=\\{0,1\\} \\text{ for } 1&lt;s&lt;N, \\mathcal{A}(N)=\\mathcal{A}(N+1)=\\{2\\}.\\] Close Solution Consider actions \\[ a=\\left\\{\\begin{array}{ll} 0 &amp; \\text{if no repair.}\\\\ 1 &amp; \\text{if preventive repair.}\\\\ 2 &amp; \\text{if forced repair.}\\\\ \\end{array}\\right. \\] Define the action space \\(\\mathcal{A}(s)\\) for all states \\(s\\). × Solution The expected reward is \\(r(N+1,2) = 0\\) and for \\(0 &lt; s &lt; N\\) is \\(r(s,0) = 0\\), \\(r(s,1) = -C_{ps}\\). Finally, \\(r(N,2) = -C_{f}\\) and \\(r(N+1,2) = 0\\). Close Solution Assume that the number of possible working conditions equals \\(N=5\\). What is the expected reward \\(r(s,a)\\)? × Solution The transition probabilities \\(p(s&#39;|s,a)\\): \\[p(s&#39;|s,0) = q_{ij}, \\text{ for } 1 \\leq s&lt;N,\\] \\[p(1|s,1) = 1 \\text{ for } 1&lt;s&lt;N,\\] \\[p(N+1|N,2) = p(1|N+1,2) =1,\\] and zero otherwise. Close Solution What is the transition probabilities? Try make a drawing of the state-expanded hypergraph for stage \\(t\\) and \\(t+1\\). × Solution Q &lt;- matrix(c( 0.90, 0.10, 0, 0, 0, 0, 0.80, 0.10, 0.05, 0.05, 0, 0, 0.70, 0.10, 0.20, 0, 0, 0, 0.50, 0.50), nrow=4, byrow=T) row.names(Q) &lt;- str_c(1:4) colnames(Q) &lt;- str_c(1:5) mdp &lt;- MDPClass$new() # initialize mdp object mdp$addStateSpace(1:6) # add states (states are keys in a hash and are always converted to strings), 101 represent finished for (s in mdp$getStateKeys()) { # add actions for each state (only the key of the action) i &lt;- as.numeric(s) if (i == 1) mdp$addActionSpace(s, &quot;nr&quot;) if (i &gt; 1 &amp; i &lt;= 4) mdp$addActionSpace(s, c(&quot;nr&quot;, &quot;pr&quot;)) if (i == 5) mdp$addActionSpace(s, &quot;fr&quot;) if (i == 6) mdp$addActionSpace(s, &quot;fr&quot;) } # check some of the keys mdp$getActionKeys(&quot;2&quot;) #&gt; [1] &quot;nr&quot; &quot;pr&quot; mdp$getActionKeys(&quot;1&quot;) #&gt; [1] &quot;nr&quot; mdp$getActionKeys(&quot;6&quot;) #&gt; [1] &quot;fr&quot; ## Add trans pr and expected reward to the actions cPR&lt;-c(0,7,7,5,0,0) for (s in mdp$getStateKeys()) { for (a in mdp$getActionKeys(s)) { i &lt;- as.numeric(s) if (a == &quot;nr&quot;) { rew &lt;- 0 transPr &lt;- Q[i, Q[i,] &gt; 0] } if (a == &quot;pr&quot;) { rew &lt;- -cPR[i] transPr &lt;- 1 names(transPr) &lt;- &quot;1&quot; } if (a == &quot;fr&quot; &amp; i == 5) { rew = -10 transPr &lt;- 1 names(transPr) &lt;- &quot;6&quot; } if (a == &quot;fr&quot; &amp; i == 6) { rew = 0 transPr &lt;- 1 names(transPr) &lt;- &quot;1&quot; } mdp$addAction(s, a, r = rew, pr = transPr) } } # check some of the keys mdp$getActionInfo(&quot;1&quot;) #&gt; $nr #&gt; $nr$r #&gt; [1] 0 #&gt; #&gt; $nr$pr #&gt; 1 2 #&gt; 0.9 0.1 mdp$getActionInfo(&quot;2&quot;) #&gt; $nr #&gt; $nr$r #&gt; [1] 0 #&gt; #&gt; $nr$pr #&gt; 2 3 4 5 #&gt; 0.80 0.10 0.05 0.05 #&gt; #&gt; #&gt; $pr #&gt; $pr$r #&gt; [1] -7 #&gt; #&gt; $pr$pr #&gt; 1 #&gt; 1 mdp$getActionInfo(&quot;5&quot;) #&gt; $fr #&gt; $fr$r #&gt; [1] -10 #&gt; #&gt; $fr$pr #&gt; 6 #&gt; 1 mdp$getActionInfo(&quot;6&quot;) #&gt; $fr #&gt; $fr$r #&gt; [1] 0 #&gt; #&gt; $fr$pr #&gt; 1 #&gt; 1 Close Solution The repair costs are given by \\(C_{f}=10,\\ C_{p2}=7,\\ C_{p3}=7\\) and \\(C_{p4}=5\\) and the deterioration probabilities \\(q_{ij}\\) are given by matrix Q: Q &lt;- matrix(c( 0.90, 0.10, 0, 0, 0, 0, 0.80, 0.10, 0.05, 0.05, 0, 0, 0.70, 0.10, 0.20, 0, 0, 0, 0.50, 0.50), nrow=4, byrow=T) Q #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 0.9 0.1 0.0 0.00 0.00 #&gt; [2,] 0.0 0.8 0.1 0.05 0.05 #&gt; [3,] 0.0 0.0 0.7 0.10 0.20 #&gt; [4,] 0.0 0.0 0.0 0.50 0.50 Build the MDP in R. × Solution mdp$valueIte(gamma = 0.6) # mdp$policyIte(gamma = 0.6) df &lt;- left_join(mdp$getStateValues(), mdp$getPolicy(), by = &quot;state&quot;) %&gt;% select(-pr) df #&gt; # A tibble: 6 × 3 #&gt; state v action #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1 -0.146 nr #&gt; 2 2 -1.12 nr #&gt; 3 3 -2.53 nr #&gt; 4 4 -4.31 nr #&gt; 5 5 -10.1 fr #&gt; 6 6 -0.0876 fr In state 3 the discounted cost is 2.53. Close Solution Find the optimal policy given a discount rate of \\(\\gamma = 0.6\\). What is the average discounted cost of being in state 3? × Solution mdp$valueIte(gamma = 0.99) # mdp$policyIte(gamma = 0.99) df1 &lt;- left_join(mdp$getStateValues(), mdp$getPolicy(), by = &quot;state&quot;) %&gt;% select(-pr) df #&gt; # A tibble: 6 × 3 #&gt; state v action #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1 -0.146 nr #&gt; 2 2 -1.12 nr #&gt; 3 3 -2.53 nr #&gt; 4 4 -4.31 nr #&gt; 5 5 -10.1 fr #&gt; 6 6 -0.0876 fr df1 #&gt; # A tibble: 6 × 3 #&gt; state v action #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1 -41.3 nr #&gt; 2 2 -45.5 nr #&gt; 3 3 -47.4 nr #&gt; 4 4 -45.9 pr #&gt; 5 5 -50.5 fr #&gt; 6 6 -40.9 fr A higher discont rate put more weight on future values, i.e. you have to look further ahead resulting in more iterations. This also results in a higher disconted cost, since costs in the future have higher weight. The optimal policy looks a bit different compared to the policy we found for \\(\\gamma = 0.6\\). However, if the policy is the same for two different discount rates then you will have the same rewards/costs and hence the same cost of the policy. The discounted cost will not be the same since you use the discount rate to say how much you value the future. Close Solution Find the optimal policy using value iteration given a discount rate of \\(\\gamma = 0.99\\). Why do the algorithm need more iterations compared to when \\(\\gamma = 0.6\\)? Why are the average discounted costs higher compared to when \\(\\gamma = 0.6\\)? Is it more costly to use this optimal policy? 5.10.3 Exercise - Car rental Consider the car rental problem in Exercise 4.8.2. Note the inventory dynamics (number of cars) at each parking lot is independent of the other given an action \\(a\\). Let us consider Location 1 and assume that we are in state \\(x\\) and chose action \\(a\\). The reward equals the reward of rentals minus the cost of movements. Note we have \\(\\bar{x} = x - a\\) and \\(\\bar{y} = x + a\\) after movement. Hence \\[r(s,a) = \\mathbb{E}[10(\\min(D_1, \\bar{x}) + \\min(D_2, \\bar{y}) )-2\\mid a \\mid]\\] where \\[\\mathbb{E}[\\min(D, z)] = \\sum_{i=0}^{z-1} i\\Pr(D = i) + \\Pr(D \\geq z)z.\\] Let us make a reward function in R: # Mean of min(D,z). Assume z &gt;= 0 meanMinD &lt;- function(z, lambda) { if (z == 0) return(0) sum(dpois(0:(z-1), lambda) * 0:(z-1)) + ppois(z-1, lambda, lower.tail = F) * z } reward &lt;- function(x, y, a) { 10 * meanMinD(x-a, 3) + 10 * meanMinD(y+a, 4) - 2 * abs(a) } reward(20, 0, 0) #&gt; [1] 30 reward(20, 0, 5) #&gt; [1] 55.9 Let us have a look at the state transition, the number of cars after rental requests \\(\\bar{x} - \\min(D_1, \\bar{x})\\). Next, the number of returned cars are added: \\(\\bar{x} - \\min(D_1, \\bar{x}) + H_1\\). Finally, note that if this number is above 20 (parking lot capacity), then we only have 20 cars, i.e. the inventory dynamics (number of cars at the end of the day) is \\[X = \\min(20, \\bar{x} - \\min(D_1, \\bar{x}) + H_1))).\\] Similar for Location 2, if \\(\\bar{y}= y+a\\) we have \\[Y = \\min(20, \\bar{y} - \\min(D_2, \\bar{y}) + H_2)).\\] Since the dynamics is independent given action a, the transition probabilities can be split: \\[ p((x&#39;,y&#39;) | (x,y), a) = p(x&#39; | x, a) p(y&#39; | y, a).\\] Let us consider Location 1. If \\(x&#39; &lt; 20\\) then \\[ \\begin{align} p(x&#39; | x, a) &amp;= \\Pr(x&#39; = x-a - \\min(D_1, x-a) + H_1)\\\\ &amp;= \\Pr(x&#39; = \\bar{x} - \\min(D_1, \\bar{x}) + H_1)\\\\ &amp;= \\Pr(H_1 - \\min(D_1, \\bar{x}) = x&#39; - \\bar{x}) \\\\ &amp;= \\sum_{i=0}^{\\bar{x}} \\Pr(\\min(D_1, \\bar{x}) = i)\\Pr(H_1 = x&#39; - \\bar{x} + i) \\\\ &amp;= \\sum_{i=0}^{\\bar{x}}\\left( (\\mathbf{1}_{(i&lt;\\bar{x})} \\Pr(D_1 = i) + \\mathbf{1}_{(i=\\bar{x})} \\Pr(D_1 \\geq \\bar{x}))\\Pr(H_1 = x&#39; - \\bar{x} + i)\\right) \\\\ &amp;= p(x&#39; | \\bar{x}). \\end{align} \\] If \\(x&#39; = 20\\) then \\[ \\begin{align} p(x&#39; | x, a) &amp;= \\Pr(20 \\leq \\bar{x} - \\min(D_1, \\bar{x}) + H_1)\\\\ &amp;= \\Pr(H_1 - \\min(D_1, \\bar{x}) \\geq 20 - \\bar{x}) \\\\ &amp;= \\sum_{i=0}^{\\bar{x}} \\Pr(\\min(D_1, \\bar{x}) = i)\\Pr(H_1 \\geq 20 - \\bar{x} + i) \\\\ &amp;= \\sum_{i=0}^{\\bar{x}}\\left( (\\mathbf{1}_{(i&lt;\\bar{x})} \\Pr(D_1 =i) + \\mathbf{1}_{(i=\\bar{x})} \\Pr(D_1 \\geq \\bar{x}))\\Pr(H_1 \\geq 20 - \\bar{x} + i)\\right)\\\\ &amp;= p(x&#39; = 20 | \\bar{x}). \\end{align} \\] Similar for Location 2. That is we need to calculate and store \\(p(x&#39;| \\bar{x})\\) and \\(p(y&#39;| \\bar{y})\\) to find \\[ p((x&#39;,y&#39;) | (x,y), a) = p(x&#39; | \\bar{x} = x-a) p(y&#39; | \\bar{y} = y+a).\\] This is done in R using two matrices: library(tidyverse) lD &lt;- c(3,4) lH &lt;- c(3,2) # Pr(min(D_i, k) = d) # assume that d&lt;=k prMin &lt;- function(i, k, d) { if (k == 0) return(1) v &lt;- c(dpois(0:(k-1), lD[i]), ppois(k-1, lD[i], lower.tail = F)) return(v[d+1]) # if (d == k) return(1 - pD[i, d]) # 1-pr(D &lt;= d-1) # if (d &lt; k) return(dD[i, d+1]) # return(NA) } # Pr(xN | x, a) transPrX &lt;- function(xN, xBar) { if (xN == 20) { return(sum(prMin(1, xBar, 0:(xBar)) * ppois(xN - xBar + 0:(xBar) - 1, lH[1], lower.tail = F))) } if (xN &lt; 20) { return(sum(prMin(1, xBar, 0:(xBar)) * dpois(xN - xBar + 0:(xBar), lH[1]))) } error(&quot;Error in calculations!&quot;) } # Pr(yN | y, a) transPrY &lt;- function(yN, yBar) { if (yN == 20) { return(sum(prMin(2, yBar, 0:(yBar)) * ppois(yN - yBar + 0:(yBar) - 1, lH[2], lower.tail = F))) } if (yN &lt; 20) { return(sum(prMin(2, yBar, 0:(yBar)) * dpois(yN - yBar + 0:(yBar), lH[2]))) } error(&quot;Error in calculations!&quot;) } mat &lt;- matrix(0, nrow = 21, ncol = 21) colnames(mat) &lt;- str_c(0:20) rownames(mat) &lt;- str_c(0:20) matTransPrX &lt;- mat # matTransPrX[r,c] = Pr(xN = c-1 | xBar = r-1) matTransPrY &lt;- mat for (r in 1:21) { xBar &lt;- r-1 for (c in 1:21) { xN &lt;- c-1 matTransPrX[r,c] &lt;- transPrX(xN, xBar) matTransPrY[r,c] &lt;- transPrY(xN, xBar) } } # check rowSums(matTransPrX) #&gt; 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #&gt; 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 rowSums(matTransPrY) #&gt; 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #&gt; 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 × Solution mdp &lt;- MDPClass$new() # initialize mdp object states &lt;- expand_grid(x = 0:20, y = 0:20) %&gt;% mutate (state = str_c(x,&quot;,&quot;,y)) %&gt;% pull(state) mdp$addStateSpace(states) # add states (states are keys in a hash and are always converted to strings) for (s in mdp$getStateKeys()) { # add actions for each state (only the key of the action) x &lt;- str_split(s, &quot;,&quot;, simplify = T) y &lt;- as.numeric(x[2]) x &lt;- as.numeric(x[1]) a &lt;- (-min(5, y, 20-x)):(min(5, x, 20-y)) mdp$addActionSpace(s, a) } # check some of the keys mdp$getActionKeys(&quot;6,7&quot;) #&gt; [1] &quot;-1&quot; &quot;-2&quot; &quot;-3&quot; &quot;-4&quot; &quot;-5&quot; &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; mdp$getActionKeys(&quot;0,3&quot;) #&gt; [1] &quot;-1&quot; &quot;-2&quot; &quot;-3&quot; &quot;0&quot; mdp$getActionKeys(&quot;0,0&quot;) #&gt; [1] &quot;0&quot; mdp$getActionKeys(&quot;20,20&quot;) #&gt; [1] &quot;0&quot; mdp$getStateKeys() #&gt; [1] &quot;0,0&quot; &quot;0,1&quot; &quot;0,10&quot; &quot;0,11&quot; &quot;0,12&quot; &quot;0,13&quot; &quot;0,14&quot; &quot;0,15&quot; &quot;0,16&quot; &quot;0,17&quot; &quot;0,18&quot; #&gt; [12] &quot;0,19&quot; &quot;0,2&quot; &quot;0,20&quot; &quot;0,3&quot; &quot;0,4&quot; &quot;0,5&quot; &quot;0,6&quot; &quot;0,7&quot; &quot;0,8&quot; &quot;0,9&quot; &quot;1,0&quot; #&gt; [23] &quot;1,1&quot; &quot;1,10&quot; &quot;1,11&quot; &quot;1,12&quot; &quot;1,13&quot; &quot;1,14&quot; &quot;1,15&quot; &quot;1,16&quot; &quot;1,17&quot; &quot;1,18&quot; &quot;1,19&quot; #&gt; [34] &quot;1,2&quot; &quot;1,20&quot; &quot;1,3&quot; &quot;1,4&quot; &quot;1,5&quot; &quot;1,6&quot; &quot;1,7&quot; &quot;1,8&quot; &quot;1,9&quot; &quot;10,0&quot; &quot;10,1&quot; #&gt; [45] &quot;10,10&quot; &quot;10,11&quot; &quot;10,12&quot; &quot;10,13&quot; &quot;10,14&quot; &quot;10,15&quot; &quot;10,16&quot; &quot;10,17&quot; &quot;10,18&quot; &quot;10,19&quot; &quot;10,2&quot; #&gt; [56] &quot;10,20&quot; &quot;10,3&quot; &quot;10,4&quot; &quot;10,5&quot; &quot;10,6&quot; &quot;10,7&quot; &quot;10,8&quot; &quot;10,9&quot; &quot;11,0&quot; &quot;11,1&quot; &quot;11,10&quot; #&gt; [67] &quot;11,11&quot; &quot;11,12&quot; &quot;11,13&quot; &quot;11,14&quot; &quot;11,15&quot; &quot;11,16&quot; &quot;11,17&quot; &quot;11,18&quot; &quot;11,19&quot; &quot;11,2&quot; &quot;11,20&quot; #&gt; [78] &quot;11,3&quot; &quot;11,4&quot; &quot;11,5&quot; &quot;11,6&quot; &quot;11,7&quot; &quot;11,8&quot; &quot;11,9&quot; &quot;12,0&quot; &quot;12,1&quot; &quot;12,10&quot; &quot;12,11&quot; #&gt; [89] &quot;12,12&quot; &quot;12,13&quot; &quot;12,14&quot; &quot;12,15&quot; &quot;12,16&quot; &quot;12,17&quot; &quot;12,18&quot; &quot;12,19&quot; &quot;12,2&quot; &quot;12,20&quot; &quot;12,3&quot; #&gt; [100] &quot;12,4&quot; &quot;12,5&quot; &quot;12,6&quot; &quot;12,7&quot; &quot;12,8&quot; &quot;12,9&quot; &quot;13,0&quot; &quot;13,1&quot; &quot;13,10&quot; &quot;13,11&quot; &quot;13,12&quot; #&gt; [111] &quot;13,13&quot; &quot;13,14&quot; &quot;13,15&quot; &quot;13,16&quot; &quot;13,17&quot; &quot;13,18&quot; &quot;13,19&quot; &quot;13,2&quot; &quot;13,20&quot; &quot;13,3&quot; &quot;13,4&quot; #&gt; [122] &quot;13,5&quot; &quot;13,6&quot; &quot;13,7&quot; &quot;13,8&quot; &quot;13,9&quot; &quot;14,0&quot; &quot;14,1&quot; &quot;14,10&quot; &quot;14,11&quot; &quot;14,12&quot; &quot;14,13&quot; #&gt; [133] &quot;14,14&quot; &quot;14,15&quot; &quot;14,16&quot; &quot;14,17&quot; &quot;14,18&quot; &quot;14,19&quot; &quot;14,2&quot; &quot;14,20&quot; &quot;14,3&quot; &quot;14,4&quot; &quot;14,5&quot; #&gt; [144] &quot;14,6&quot; &quot;14,7&quot; &quot;14,8&quot; &quot;14,9&quot; &quot;15,0&quot; &quot;15,1&quot; &quot;15,10&quot; &quot;15,11&quot; &quot;15,12&quot; &quot;15,13&quot; &quot;15,14&quot; #&gt; [155] &quot;15,15&quot; &quot;15,16&quot; &quot;15,17&quot; &quot;15,18&quot; &quot;15,19&quot; &quot;15,2&quot; &quot;15,20&quot; &quot;15,3&quot; &quot;15,4&quot; &quot;15,5&quot; &quot;15,6&quot; #&gt; [166] &quot;15,7&quot; &quot;15,8&quot; &quot;15,9&quot; &quot;16,0&quot; &quot;16,1&quot; &quot;16,10&quot; &quot;16,11&quot; &quot;16,12&quot; &quot;16,13&quot; &quot;16,14&quot; &quot;16,15&quot; #&gt; [177] &quot;16,16&quot; &quot;16,17&quot; &quot;16,18&quot; &quot;16,19&quot; &quot;16,2&quot; &quot;16,20&quot; &quot;16,3&quot; &quot;16,4&quot; &quot;16,5&quot; &quot;16,6&quot; &quot;16,7&quot; #&gt; [188] &quot;16,8&quot; &quot;16,9&quot; &quot;17,0&quot; &quot;17,1&quot; &quot;17,10&quot; &quot;17,11&quot; &quot;17,12&quot; &quot;17,13&quot; &quot;17,14&quot; &quot;17,15&quot; &quot;17,16&quot; #&gt; [199] &quot;17,17&quot; &quot;17,18&quot; &quot;17,19&quot; &quot;17,2&quot; &quot;17,20&quot; &quot;17,3&quot; &quot;17,4&quot; &quot;17,5&quot; &quot;17,6&quot; &quot;17,7&quot; &quot;17,8&quot; #&gt; [210] &quot;17,9&quot; &quot;18,0&quot; &quot;18,1&quot; &quot;18,10&quot; &quot;18,11&quot; &quot;18,12&quot; &quot;18,13&quot; &quot;18,14&quot; &quot;18,15&quot; &quot;18,16&quot; &quot;18,17&quot; #&gt; [221] &quot;18,18&quot; &quot;18,19&quot; &quot;18,2&quot; &quot;18,20&quot; &quot;18,3&quot; &quot;18,4&quot; &quot;18,5&quot; &quot;18,6&quot; &quot;18,7&quot; &quot;18,8&quot; &quot;18,9&quot; #&gt; [232] &quot;19,0&quot; &quot;19,1&quot; &quot;19,10&quot; &quot;19,11&quot; &quot;19,12&quot; &quot;19,13&quot; &quot;19,14&quot; &quot;19,15&quot; &quot;19,16&quot; &quot;19,17&quot; &quot;19,18&quot; #&gt; [243] &quot;19,19&quot; &quot;19,2&quot; &quot;19,20&quot; &quot;19,3&quot; &quot;19,4&quot; &quot;19,5&quot; &quot;19,6&quot; &quot;19,7&quot; &quot;19,8&quot; &quot;19,9&quot; &quot;2,0&quot; #&gt; [254] &quot;2,1&quot; &quot;2,10&quot; &quot;2,11&quot; &quot;2,12&quot; &quot;2,13&quot; &quot;2,14&quot; &quot;2,15&quot; &quot;2,16&quot; &quot;2,17&quot; &quot;2,18&quot; &quot;2,19&quot; #&gt; [265] &quot;2,2&quot; &quot;2,20&quot; &quot;2,3&quot; &quot;2,4&quot; &quot;2,5&quot; &quot;2,6&quot; &quot;2,7&quot; &quot;2,8&quot; &quot;2,9&quot; &quot;20,0&quot; &quot;20,1&quot; #&gt; [276] &quot;20,10&quot; &quot;20,11&quot; &quot;20,12&quot; &quot;20,13&quot; &quot;20,14&quot; &quot;20,15&quot; &quot;20,16&quot; &quot;20,17&quot; &quot;20,18&quot; &quot;20,19&quot; &quot;20,2&quot; #&gt; [287] &quot;20,20&quot; &quot;20,3&quot; &quot;20,4&quot; &quot;20,5&quot; &quot;20,6&quot; &quot;20,7&quot; &quot;20,8&quot; &quot;20,9&quot; &quot;3,0&quot; &quot;3,1&quot; &quot;3,10&quot; #&gt; [298] &quot;3,11&quot; &quot;3,12&quot; &quot;3,13&quot; &quot;3,14&quot; &quot;3,15&quot; &quot;3,16&quot; &quot;3,17&quot; &quot;3,18&quot; &quot;3,19&quot; &quot;3,2&quot; &quot;3,20&quot; #&gt; [309] &quot;3,3&quot; &quot;3,4&quot; &quot;3,5&quot; &quot;3,6&quot; &quot;3,7&quot; &quot;3,8&quot; &quot;3,9&quot; &quot;4,0&quot; &quot;4,1&quot; &quot;4,10&quot; &quot;4,11&quot; #&gt; [320] &quot;4,12&quot; &quot;4,13&quot; &quot;4,14&quot; &quot;4,15&quot; &quot;4,16&quot; &quot;4,17&quot; &quot;4,18&quot; &quot;4,19&quot; &quot;4,2&quot; &quot;4,20&quot; &quot;4,3&quot; #&gt; [331] &quot;4,4&quot; &quot;4,5&quot; &quot;4,6&quot; &quot;4,7&quot; &quot;4,8&quot; &quot;4,9&quot; &quot;5,0&quot; &quot;5,1&quot; &quot;5,10&quot; &quot;5,11&quot; &quot;5,12&quot; #&gt; [342] &quot;5,13&quot; &quot;5,14&quot; &quot;5,15&quot; &quot;5,16&quot; &quot;5,17&quot; &quot;5,18&quot; &quot;5,19&quot; &quot;5,2&quot; &quot;5,20&quot; &quot;5,3&quot; &quot;5,4&quot; #&gt; [353] &quot;5,5&quot; &quot;5,6&quot; &quot;5,7&quot; &quot;5,8&quot; &quot;5,9&quot; &quot;6,0&quot; &quot;6,1&quot; &quot;6,10&quot; &quot;6,11&quot; &quot;6,12&quot; &quot;6,13&quot; #&gt; [364] &quot;6,14&quot; &quot;6,15&quot; &quot;6,16&quot; &quot;6,17&quot; &quot;6,18&quot; &quot;6,19&quot; &quot;6,2&quot; &quot;6,20&quot; &quot;6,3&quot; &quot;6,4&quot; &quot;6,5&quot; #&gt; [375] &quot;6,6&quot; &quot;6,7&quot; &quot;6,8&quot; &quot;6,9&quot; &quot;7,0&quot; &quot;7,1&quot; &quot;7,10&quot; &quot;7,11&quot; &quot;7,12&quot; &quot;7,13&quot; &quot;7,14&quot; #&gt; [386] &quot;7,15&quot; &quot;7,16&quot; &quot;7,17&quot; &quot;7,18&quot; &quot;7,19&quot; &quot;7,2&quot; &quot;7,20&quot; &quot;7,3&quot; &quot;7,4&quot; &quot;7,5&quot; &quot;7,6&quot; #&gt; [397] &quot;7,7&quot; &quot;7,8&quot; &quot;7,9&quot; &quot;8,0&quot; &quot;8,1&quot; &quot;8,10&quot; &quot;8,11&quot; &quot;8,12&quot; &quot;8,13&quot; &quot;8,14&quot; &quot;8,15&quot; #&gt; [408] &quot;8,16&quot; &quot;8,17&quot; &quot;8,18&quot; &quot;8,19&quot; &quot;8,2&quot; &quot;8,20&quot; &quot;8,3&quot; &quot;8,4&quot; &quot;8,5&quot; &quot;8,6&quot; &quot;8,7&quot; #&gt; [419] &quot;8,8&quot; &quot;8,9&quot; &quot;9,0&quot; &quot;9,1&quot; &quot;9,10&quot; &quot;9,11&quot; &quot;9,12&quot; &quot;9,13&quot; &quot;9,14&quot; &quot;9,15&quot; &quot;9,16&quot; #&gt; [430] &quot;9,17&quot; &quot;9,18&quot; &quot;9,19&quot; &quot;9,2&quot; &quot;9,20&quot; &quot;9,3&quot; &quot;9,4&quot; &quot;9,5&quot; &quot;9,6&quot; &quot;9,7&quot; &quot;9,8&quot; #&gt; [441] &quot;9,9&quot; # Add trans pr and expected reward to the actions. This may take some time!! states &lt;- expand_grid(x = 0:20, y = 0:20) %&gt;% mutate (state = str_c(x,&quot;,&quot;,y), pr = 0) for (s in mdp$getStateKeys()) { for (aS in mdp$getActionKeys(s)) { x &lt;- str_split(s, &quot;,&quot;, simplify = T) y &lt;- as.numeric(x[2]) x &lt;- as.numeric(x[1]) a &lt;- as.numeric(aS) xBar &lt;- x-a yBar &lt;- y+a for (i in 1:nrow(states)) { states$pr[i] &lt;- matTransPrX[xBar+1, states$x[i] + 1] * matTransPrX[yBar+1, states$y[i] + 1] } transPr &lt;- states$pr names(transPr) &lt;- states$state mdp$addAction(s, aS, r = reward(x, y, a), pr = transPr) } } # check some of the keys mdp$getActionInfo(&quot;20,20&quot;) #&gt; $`0` #&gt; $`0`$r #&gt; [1] 70 #&gt; #&gt; $`0`$pr #&gt; 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 #&gt; 1.71e-23 1.49e-22 9.92e-22 6.11e-21 3.56e-20 1.96e-19 1.01e-18 4.93e-18 2.24e-17 9.45e-17 3.69e-16 #&gt; 0,11 0,12 0,13 0,14 0,15 0,16 0,17 0,18 0,19 0,20 1,0 #&gt; 1.32e-15 4.34e-15 1.29e-14 3.44e-14 8.18e-14 1.71e-13 3.09e-13 4.80e-13 6.29e-13 2.41e-12 1.49e-22 #&gt; 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 1,11 #&gt; 1.30e-21 8.65e-21 5.33e-20 3.10e-19 1.71e-18 8.85e-18 4.30e-17 1.95e-16 8.24e-16 3.22e-15 1.15e-14 #&gt; 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,19 1,20 2,0 2,1 #&gt; 3.79e-14 1.12e-13 3.00e-13 7.13e-13 1.49e-12 2.70e-12 4.19e-12 5.49e-12 2.11e-11 9.92e-22 8.65e-21 #&gt; 2,2 2,3 2,4 2,5 2,6 2,7 2,8 2,9 2,10 2,11 2,12 #&gt; 5.74e-20 3.54e-19 2.06e-18 1.13e-17 5.88e-17 2.86e-16 1.30e-15 5.47e-15 2.14e-14 7.66e-14 2.51e-13 #&gt; 2,13 2,14 2,15 2,16 2,17 2,18 2,19 2,20 3,0 3,1 3,2 #&gt; 7.47e-13 1.99e-12 4.73e-12 9.88e-12 1.79e-11 2.78e-11 3.64e-11 1.40e-10 6.11e-21 5.33e-20 3.54e-19 #&gt; 3,3 3,4 3,5 3,6 3,7 3,8 3,9 3,10 3,11 3,12 3,13 #&gt; 2.18e-18 1.27e-17 6.98e-17 3.62e-16 1.76e-15 7.98e-15 3.37e-14 1.31e-13 4.72e-13 1.55e-12 4.60e-12 #&gt; 3,14 3,15 3,16 3,17 3,18 3,19 3,20 4,0 4,1 4,2 4,3 #&gt; 1.23e-11 2.91e-11 6.08e-11 1.10e-10 1.71e-10 2.24e-10 8.60e-10 3.56e-20 3.10e-19 2.06e-18 1.27e-17 #&gt; 4,4 4,5 4,6 4,7 4,8 4,9 4,10 4,11 4,12 4,13 4,14 #&gt; 7.39e-17 4.07e-16 2.11e-15 1.02e-14 4.65e-14 1.96e-13 7.66e-13 2.75e-12 9.01e-12 2.68e-11 7.15e-11 #&gt; 4,15 4,16 4,17 4,18 4,19 4,20 5,0 5,1 5,2 5,3 5,4 #&gt; 1.70e-10 3.54e-10 6.42e-10 9.97e-10 1.31e-09 5.01e-09 1.96e-19 1.71e-18 1.13e-17 6.98e-17 4.07e-16 #&gt; 5,5 5,6 5,7 5,8 5,9 5,10 5,11 5,12 5,13 5,14 5,15 #&gt; 2.24e-15 1.16e-14 5.64e-14 2.56e-13 1.08e-12 4.21e-12 1.51e-11 4.96e-11 1.47e-10 3.94e-10 9.34e-10 #&gt; 5,16 5,17 5,18 5,19 5,20 6,0 6,1 6,2 6,3 6,4 6,5 #&gt; 1.95e-09 3.54e-09 5.49e-09 7.19e-09 2.76e-08 1.01e-18 8.85e-18 5.88e-17 3.62e-16 2.11e-15 1.16e-14 #&gt; 6,6 6,7 6,8 6,9 6,10 6,11 6,12 6,13 6,14 6,15 6,16 #&gt; 6.01e-14 2.92e-13 1.33e-12 5.59e-12 2.18e-11 7.84e-11 2.57e-10 7.64e-10 2.04e-09 4.84e-09 1.01e-08 #&gt; 6,17 6,18 6,19 6,20 7,0 7,1 7,2 7,3 7,4 7,5 7,6 #&gt; 1.83e-08 2.84e-08 3.73e-08 1.43e-07 4.93e-18 4.30e-17 2.86e-16 1.76e-15 1.02e-14 5.64e-14 2.92e-13 #&gt; 7,7 7,8 7,9 7,10 7,11 7,12 7,13 7,14 7,15 7,16 7,17 #&gt; 1.42e-12 6.44e-12 2.72e-11 1.06e-10 3.81e-10 1.25e-09 3.71e-09 9.91e-09 2.35e-08 4.91e-08 8.90e-08 #&gt; 7,18 7,19 7,20 8,0 8,1 8,2 8,3 8,4 8,5 8,6 8,7 #&gt; 1.38e-07 1.81e-07 6.95e-07 2.24e-17 1.95e-16 1.30e-15 7.98e-15 4.65e-14 2.56e-13 1.33e-12 6.44e-12 #&gt; 8,8 8,9 8,10 8,11 8,12 8,13 8,14 8,15 8,16 8,17 8,18 #&gt; 2.92e-11 1.23e-10 4.82e-10 1.73e-09 5.67e-09 1.68e-08 4.50e-08 1.07e-07 2.23e-07 4.04e-07 6.27e-07 #&gt; 8,19 8,20 9,0 9,1 9,2 9,3 9,4 9,5 9,6 9,7 9,8 #&gt; 8.22e-07 3.15e-06 9.45e-17 8.24e-16 5.47e-15 3.37e-14 1.96e-13 1.08e-12 5.59e-12 2.72e-11 1.23e-10 #&gt; 9,9 9,10 9,11 9,12 9,13 9,14 9,15 9,16 9,17 9,18 9,19 #&gt; 5.21e-10 2.03e-09 7.30e-09 2.39e-08 7.11e-08 1.90e-07 4.51e-07 9.41e-07 1.71e-06 2.65e-06 3.47e-06 #&gt; 9,20 10,0 10,1 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9 #&gt; 1.33e-05 3.69e-16 3.22e-15 2.14e-14 1.31e-13 7.66e-13 4.21e-12 2.18e-11 1.06e-10 4.82e-10 2.03e-09 #&gt; 10,10 10,11 10,12 10,13 10,14 10,15 10,16 10,17 10,18 10,19 10,20 #&gt; 7.94e-09 2.85e-08 9.34e-08 2.78e-07 7.41e-07 1.76e-06 3.67e-06 6.66e-06 1.03e-05 1.35e-05 5.20e-05 #&gt; 11,0 11,1 11,2 11,3 11,4 11,5 11,6 11,7 11,8 11,9 11,10 #&gt; 1.32e-15 1.15e-14 7.66e-14 4.72e-13 2.75e-12 1.51e-11 7.84e-11 3.81e-10 1.73e-09 7.30e-09 2.85e-08 #&gt; 11,11 11,12 11,13 11,14 11,15 11,16 11,17 11,18 11,19 11,20 12,0 #&gt; 1.02e-07 3.35e-07 9.96e-07 2.66e-06 6.32e-06 1.32e-05 2.39e-05 3.71e-05 4.86e-05 1.87e-04 4.34e-15 #&gt; 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11 #&gt; 3.79e-14 2.51e-13 1.55e-12 9.01e-12 4.96e-11 2.57e-10 1.25e-09 5.67e-09 2.39e-08 9.34e-08 3.35e-07 #&gt; 12,12 12,13 12,14 12,15 12,16 12,17 12,18 12,19 12,20 13,0 13,1 #&gt; 1.10e-06 3.27e-06 8.72e-06 2.07e-05 4.32e-05 7.84e-05 1.22e-04 1.59e-04 6.12e-04 1.29e-14 1.12e-13 #&gt; 13,2 13,3 13,4 13,5 13,6 13,7 13,8 13,9 13,10 13,11 13,12 #&gt; 7.47e-13 4.60e-12 2.68e-11 1.47e-10 7.64e-10 3.71e-09 1.68e-08 7.11e-08 2.78e-07 9.96e-07 3.27e-06 #&gt; 13,13 13,14 13,15 13,16 13,17 13,18 13,19 13,20 14,0 14,1 14,2 #&gt; 9.71e-06 2.59e-05 6.15e-05 1.28e-04 2.33e-04 3.61e-04 4.74e-04 1.82e-03 3.44e-14 3.00e-13 1.99e-12 #&gt; 14,3 14,4 14,5 14,6 14,7 14,8 14,9 14,10 14,11 14,12 14,13 #&gt; 1.23e-11 7.15e-11 3.94e-10 2.04e-09 9.91e-09 4.50e-08 1.90e-07 7.41e-07 2.66e-06 8.72e-06 2.59e-05 #&gt; 14,14 14,15 14,16 14,17 14,18 14,19 14,20 15,0 15,1 15,2 15,3 #&gt; 6.92e-05 1.64e-04 3.43e-04 6.22e-04 9.65e-04 1.26e-03 4.85e-03 8.18e-14 7.13e-13 4.73e-12 2.91e-11 #&gt; 15,4 15,5 15,6 15,7 15,8 15,9 15,10 15,11 15,12 15,13 15,14 #&gt; 1.70e-10 9.34e-10 4.84e-09 2.35e-08 1.07e-07 4.51e-07 1.76e-06 6.32e-06 2.07e-05 6.15e-05 1.64e-04 #&gt; 15,15 15,16 15,17 15,18 15,19 15,20 16,0 16,1 16,2 16,3 16,4 #&gt; 3.90e-04 8.15e-04 1.48e-03 2.29e-03 3.00e-03 1.15e-02 1.71e-13 1.49e-12 9.88e-12 6.08e-11 3.54e-10 #&gt; 16,5 16,6 16,7 16,8 16,9 16,10 16,11 16,12 16,13 16,14 16,15 #&gt; 1.95e-09 1.01e-08 4.91e-08 2.23e-07 9.41e-07 3.67e-06 1.32e-05 4.32e-05 1.28e-04 3.43e-04 8.15e-04 #&gt; 16,16 16,17 16,18 16,19 16,20 17,0 17,1 17,2 17,3 17,4 17,5 #&gt; 1.70e-03 3.08e-03 4.78e-03 6.27e-03 2.41e-02 3.09e-13 2.70e-12 1.79e-11 1.10e-10 6.42e-10 3.54e-09 #&gt; 17,6 17,7 17,8 17,9 17,10 17,11 17,12 17,13 17,14 17,15 17,16 #&gt; 1.83e-08 8.90e-08 4.04e-07 1.71e-06 6.66e-06 2.39e-05 7.84e-05 2.33e-04 6.22e-04 1.48e-03 3.08e-03 #&gt; 17,17 17,18 17,19 17,20 18,0 18,1 18,2 18,3 18,4 18,5 18,6 #&gt; 5.59e-03 8.67e-03 1.14e-02 4.36e-02 4.80e-13 4.19e-12 2.78e-11 1.71e-10 9.97e-10 5.49e-09 2.84e-08 #&gt; 18,7 18,8 18,9 18,10 18,11 18,12 18,13 18,14 18,15 18,16 18,17 #&gt; 1.38e-07 6.27e-07 2.65e-06 1.03e-05 3.71e-05 1.22e-04 3.61e-04 9.65e-04 2.29e-03 4.78e-03 8.67e-03 #&gt; 18,18 18,19 18,20 19,0 19,1 19,2 19,3 19,4 19,5 19,6 19,7 #&gt; 1.34e-02 1.76e-02 6.77e-02 6.29e-13 5.49e-12 3.64e-11 2.24e-10 1.31e-09 7.19e-09 3.73e-08 1.81e-07 #&gt; 19,8 19,9 19,10 19,11 19,12 19,13 19,14 19,15 19,16 19,17 19,18 #&gt; 8.22e-07 3.47e-06 1.35e-05 4.86e-05 1.59e-04 4.74e-04 1.26e-03 3.00e-03 6.27e-03 1.14e-02 1.76e-02 #&gt; 19,19 19,20 20,0 20,1 20,2 20,3 20,4 20,5 20,6 20,7 20,8 #&gt; 2.31e-02 8.87e-02 2.41e-12 2.11e-11 1.40e-10 8.60e-10 5.01e-09 2.76e-08 1.43e-07 6.95e-07 3.15e-06 #&gt; 20,9 20,10 20,11 20,12 20,13 20,14 20,15 20,16 20,17 20,18 20,19 #&gt; 1.33e-05 5.20e-05 1.87e-04 6.12e-04 1.82e-03 4.85e-03 1.15e-02 2.41e-02 4.36e-02 6.77e-02 8.87e-02 #&gt; 20,20 #&gt; 3.40e-01 sum(mdp$getActionInfo(&quot;20,20&quot;)$&quot;0&quot;$pr) #&gt; [1] 1 mdp$getActionInfo(&quot;20,0&quot;) #&gt; $`0` #&gt; $`0`$r #&gt; [1] 30 #&gt; #&gt; $`0`$pr #&gt; 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 #&gt; 2.06e-13 6.18e-13 9.27e-13 9.27e-13 6.96e-13 4.17e-13 2.09e-13 8.94e-14 3.35e-14 1.12e-14 3.35e-15 #&gt; 0,11 0,12 0,13 0,14 0,15 0,16 0,17 0,18 0,19 0,20 1,0 #&gt; 9.15e-16 2.29e-16 5.28e-17 1.13e-17 2.26e-18 4.24e-19 7.48e-20 1.25e-20 1.97e-21 3.44e-22 1.80e-12 #&gt; 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 1,11 #&gt; 5.39e-12 8.09e-12 8.09e-12 6.07e-12 3.64e-12 1.82e-12 7.80e-13 2.92e-13 9.75e-14 2.92e-14 7.98e-15 #&gt; 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,19 1,20 2,0 2,1 #&gt; 1.99e-15 4.60e-16 9.86e-17 1.97e-17 3.70e-18 6.53e-19 1.09e-19 1.72e-20 3.00e-21 1.19e-11 3.58e-11 #&gt; 2,2 2,3 2,4 2,5 2,6 2,7 2,8 2,9 2,10 2,11 2,12 #&gt; 5.37e-11 5.37e-11 4.03e-11 2.42e-11 1.21e-11 5.18e-12 1.94e-12 6.47e-13 1.94e-13 5.30e-14 1.32e-14 #&gt; 2,13 2,14 2,15 2,16 2,17 2,18 2,19 2,20 3,0 3,1 3,2 #&gt; 3.06e-15 6.55e-16 1.31e-16 2.46e-17 4.33e-18 7.22e-19 1.14e-19 1.99e-20 7.34e-11 2.20e-10 3.30e-10 #&gt; 3,3 3,4 3,5 3,6 3,7 3,8 3,9 3,10 3,11 3,12 3,13 #&gt; 3.30e-10 2.48e-10 1.49e-10 7.44e-11 3.19e-11 1.20e-11 3.98e-12 1.20e-12 3.26e-13 8.15e-14 1.88e-14 #&gt; 3,14 3,15 3,16 3,17 3,18 3,19 3,20 4,0 4,1 4,2 4,3 #&gt; 4.03e-15 8.06e-16 1.51e-16 2.67e-17 4.44e-18 7.02e-19 1.23e-19 4.28e-10 1.28e-09 1.93e-09 1.93e-09 #&gt; 4,4 4,5 4,6 4,7 4,8 4,9 4,10 4,11 4,12 4,13 4,14 #&gt; 1.44e-09 8.67e-10 4.33e-10 1.86e-10 6.96e-11 2.32e-11 6.96e-12 1.90e-12 4.75e-13 1.10e-13 2.35e-14 #&gt; 4,15 4,16 4,17 4,18 4,19 4,20 5,0 5,1 5,2 5,3 5,4 #&gt; 4.70e-15 8.80e-16 1.55e-16 2.59e-17 4.09e-18 7.15e-19 2.36e-09 7.07e-09 1.06e-08 1.06e-08 7.95e-09 #&gt; 5,5 5,6 5,7 5,8 5,9 5,10 5,11 5,12 5,13 5,14 5,15 #&gt; 4.77e-09 2.38e-09 1.02e-09 3.83e-10 1.28e-10 3.83e-11 1.05e-11 2.61e-12 6.03e-13 1.29e-13 2.58e-14 #&gt; 5,16 5,17 5,18 5,19 5,20 6,0 6,1 6,2 6,3 6,4 6,5 #&gt; 4.85e-15 8.55e-16 1.43e-16 2.25e-17 3.93e-18 1.22e-08 3.66e-08 5.49e-08 5.49e-08 4.12e-08 2.47e-08 #&gt; 6,6 6,7 6,8 6,9 6,10 6,11 6,12 6,13 6,14 6,15 6,16 #&gt; 1.24e-08 5.30e-09 1.99e-09 6.62e-10 1.99e-10 5.42e-11 1.35e-11 3.12e-12 6.70e-13 1.34e-13 2.51e-14 #&gt; 6,17 6,18 6,19 6,20 7,0 7,1 7,2 7,3 7,4 7,5 7,6 #&gt; 4.43e-15 7.39e-16 1.17e-16 2.04e-17 5.93e-08 1.78e-07 2.67e-07 2.67e-07 2.00e-07 1.20e-07 6.01e-08 #&gt; 7,7 7,8 7,9 7,10 7,11 7,12 7,13 7,14 7,15 7,16 7,17 #&gt; 2.57e-08 9.65e-09 3.22e-09 9.65e-10 2.63e-10 6.58e-11 1.52e-11 3.25e-12 6.51e-13 1.22e-13 2.15e-14 #&gt; 7,18 7,19 7,20 8,0 8,1 8,2 8,3 8,4 8,5 8,6 8,7 #&gt; 3.59e-15 5.67e-16 9.91e-17 2.69e-07 8.08e-07 1.21e-06 1.21e-06 9.09e-07 5.45e-07 2.73e-07 1.17e-07 #&gt; 8,8 8,9 8,10 8,11 8,12 8,13 8,14 8,15 8,16 8,17 8,18 #&gt; 4.38e-08 1.46e-08 4.38e-09 1.19e-09 2.99e-10 6.89e-11 1.48e-11 2.95e-12 5.54e-13 9.77e-14 1.63e-14 #&gt; 8,19 8,20 9,0 9,1 9,2 9,3 9,4 9,5 9,6 9,7 9,8 #&gt; 2.57e-15 4.50e-16 1.14e-06 3.41e-06 5.11e-06 5.11e-06 3.83e-06 2.30e-06 1.15e-06 4.93e-07 1.85e-07 #&gt; 9,9 9,10 9,11 9,12 9,13 9,14 9,15 9,16 9,17 9,18 9,19 #&gt; 6.16e-08 1.85e-08 5.04e-09 1.26e-09 2.91e-10 6.23e-11 1.25e-11 2.34e-12 4.13e-13 6.88e-14 1.09e-14 #&gt; 9,20 10,0 10,1 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9 #&gt; 1.90e-15 4.44e-06 1.33e-05 2.00e-05 2.00e-05 1.50e-05 8.98e-06 4.49e-06 1.92e-06 7.22e-07 2.41e-07 #&gt; 10,10 10,11 10,12 10,13 10,14 10,15 10,16 10,17 10,18 10,19 10,20 #&gt; 7.22e-08 1.97e-08 4.92e-09 1.14e-09 2.43e-10 4.87e-11 9.13e-12 1.61e-12 2.68e-13 4.24e-14 7.41e-15 #&gt; 11,0 11,1 11,2 11,3 11,4 11,5 11,6 11,7 11,8 11,9 11,10 #&gt; 1.59e-05 4.78e-05 7.16e-05 7.16e-05 5.37e-05 3.22e-05 1.61e-05 6.91e-06 2.59e-06 8.64e-07 2.59e-07 #&gt; 11,11 11,12 11,13 11,14 11,15 11,16 11,17 11,18 11,19 11,20 12,0 #&gt; 7.07e-08 1.77e-08 4.08e-09 8.73e-10 1.75e-10 3.28e-11 5.78e-12 9.63e-13 1.52e-13 2.66e-14 5.22e-05 #&gt; 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11 #&gt; 1.57e-04 2.35e-04 2.35e-04 1.76e-04 1.06e-04 5.29e-05 2.27e-05 8.49e-06 2.83e-06 8.49e-07 2.32e-07 #&gt; 12,12 12,13 12,14 12,15 12,16 12,17 12,18 12,19 12,20 13,0 13,1 #&gt; 5.79e-08 1.34e-08 2.86e-09 5.73e-10 1.07e-10 1.90e-11 3.16e-12 4.99e-13 8.72e-14 1.55e-04 4.65e-04 #&gt; 13,2 13,3 13,4 13,5 13,6 13,7 13,8 13,9 13,10 13,11 13,12 #&gt; 6.98e-04 6.98e-04 5.24e-04 3.14e-04 1.57e-04 6.73e-05 2.52e-05 8.41e-06 2.52e-06 6.88e-07 1.72e-07 #&gt; 13,13 13,14 13,15 13,16 13,17 13,18 13,19 13,20 14,0 14,1 14,2 #&gt; 3.97e-08 8.51e-09 1.70e-09 3.19e-10 5.63e-11 9.39e-12 1.48e-12 2.59e-13 4.14e-04 1.24e-03 1.86e-03 #&gt; 14,3 14,4 14,5 14,6 14,7 14,8 14,9 14,10 14,11 14,12 14,13 #&gt; 1.86e-03 1.40e-03 8.39e-04 4.19e-04 1.80e-04 6.74e-05 2.25e-05 6.74e-06 1.84e-06 4.59e-07 1.06e-07 #&gt; 14,14 14,15 14,16 14,17 14,18 14,19 14,20 15,0 15,1 15,2 15,3 #&gt; 2.27e-08 4.54e-09 8.52e-10 1.50e-10 2.51e-11 3.96e-12 6.92e-13 9.83e-04 2.95e-03 4.43e-03 4.43e-03 #&gt; 15,4 15,5 15,6 15,7 15,8 15,9 15,10 15,11 15,12 15,13 15,14 #&gt; 3.32e-03 1.99e-03 9.96e-04 4.27e-04 1.60e-04 5.33e-05 1.60e-05 4.36e-06 1.09e-06 2.52e-07 5.40e-08 #&gt; 15,15 15,16 15,17 15,18 15,19 15,20 16,0 16,1 16,2 16,3 16,4 #&gt; 1.08e-08 2.02e-09 3.57e-10 5.95e-11 9.40e-12 1.64e-12 2.05e-03 6.16e-03 9.24e-03 9.24e-03 6.93e-03 #&gt; 16,5 16,6 16,7 16,8 16,9 16,10 16,11 16,12 16,13 16,14 16,15 #&gt; 4.16e-03 2.08e-03 8.91e-04 3.34e-04 1.11e-04 3.34e-05 9.11e-06 2.28e-06 5.26e-07 1.13e-07 2.25e-08 #&gt; 16,16 16,17 16,18 16,19 16,20 17,0 17,1 17,2 17,3 17,4 17,5 #&gt; 4.22e-09 7.45e-10 1.24e-10 1.96e-11 3.43e-12 3.72e-03 1.12e-02 1.67e-02 1.67e-02 1.26e-02 7.53e-03 #&gt; 17,6 17,7 17,8 17,9 17,10 17,11 17,12 17,13 17,14 17,15 17,16 #&gt; 3.77e-03 1.61e-03 6.05e-04 2.02e-04 6.05e-05 1.65e-05 4.13e-06 9.53e-07 2.04e-07 4.08e-08 7.66e-09 #&gt; 17,17 17,18 17,19 17,20 18,0 18,1 18,2 18,3 18,4 18,5 18,6 #&gt; 1.35e-09 2.25e-10 3.56e-11 6.21e-12 5.77e-03 1.73e-02 2.60e-02 2.60e-02 1.95e-02 1.17e-02 5.85e-03 #&gt; 18,7 18,8 18,9 18,10 18,11 18,12 18,13 18,14 18,15 18,16 18,17 #&gt; 2.51e-03 9.40e-04 3.13e-04 9.40e-05 2.56e-05 6.41e-06 1.48e-06 3.17e-07 6.34e-08 1.19e-08 2.10e-09 #&gt; 18,18 18,19 18,20 19,0 19,1 19,2 19,3 19,4 19,5 19,6 19,7 #&gt; 3.49e-10 5.52e-11 9.64e-12 7.57e-03 2.27e-02 3.41e-02 3.41e-02 2.55e-02 1.53e-02 7.66e-03 3.28e-03 #&gt; 19,8 19,9 19,10 19,11 19,12 19,13 19,14 19,15 19,16 19,17 19,18 #&gt; 1.23e-03 4.11e-04 1.23e-04 3.36e-05 8.40e-06 1.94e-06 4.15e-07 8.31e-08 1.56e-08 2.75e-09 4.58e-10 #&gt; 19,19 19,20 20,0 20,1 20,2 20,3 20,4 20,5 20,6 20,7 20,8 #&gt; 7.23e-11 1.26e-11 2.90e-02 8.71e-02 1.31e-01 1.31e-01 9.80e-02 5.88e-02 2.94e-02 1.26e-02 4.73e-03 #&gt; 20,9 20,10 20,11 20,12 20,13 20,14 20,15 20,16 20,17 20,18 20,19 #&gt; 1.58e-03 4.73e-04 1.29e-04 3.22e-05 7.44e-06 1.59e-06 3.19e-07 5.98e-08 1.05e-08 1.76e-09 2.77e-10 #&gt; 20,20 #&gt; 4.85e-11 #&gt; #&gt; #&gt; $`1` #&gt; $`1`$r #&gt; [1] 37.8 #&gt; #&gt; $`1`$pr #&gt; 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 #&gt; 1.32e-12 4.02e-12 6.13e-12 6.23e-12 4.75e-12 2.90e-12 1.47e-12 6.41e-13 2.44e-13 8.26e-14 2.52e-14 #&gt; 0,11 0,12 0,13 0,14 0,15 0,16 0,17 0,18 0,19 0,20 1,0 #&gt; 6.96e-15 1.77e-15 4.14e-16 8.99e-17 1.82e-17 3.46e-18 6.20e-19 1.05e-19 1.67e-20 2.97e-21 1.10e-11 #&gt; 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 1,11 #&gt; 3.37e-11 5.14e-11 5.23e-11 3.99e-11 2.43e-11 1.24e-11 5.38e-12 2.05e-12 6.93e-13 2.11e-13 5.84e-14 #&gt; 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,19 1,20 2,0 2,1 #&gt; 1.48e-14 3.47e-15 7.54e-16 1.53e-16 2.91e-17 5.20e-18 8.78e-19 1.41e-19 2.49e-20 6.98e-11 2.13e-10 #&gt; 2,2 2,3 2,4 2,5 2,6 2,7 2,8 2,9 2,10 2,11 2,12 #&gt; 3.25e-10 3.30e-10 2.52e-10 1.54e-10 7.81e-11 3.40e-11 1.29e-11 4.38e-12 1.33e-12 3.69e-13 9.37e-14 #&gt; 2,13 2,14 2,15 2,16 2,17 2,18 2,19 2,20 3,0 3,1 3,2 #&gt; 2.19e-14 4.76e-15 9.66e-16 1.84e-16 3.29e-17 5.55e-18 8.88e-19 1.58e-19 4.07e-10 1.24e-09 1.89e-09 #&gt; 3,3 3,4 3,5 3,6 3,7 3,8 3,9 3,10 3,11 3,12 3,13 #&gt; 1.93e-09 1.47e-09 8.96e-10 4.55e-10 1.98e-10 7.55e-11 2.55e-11 7.78e-12 2.15e-12 5.46e-13 1.28e-13 #&gt; 3,14 3,15 3,16 3,17 3,18 3,19 3,20 4,0 4,1 4,2 4,3 #&gt; 2.78e-14 5.63e-15 1.07e-15 1.92e-16 3.24e-17 5.18e-18 9.19e-19 2.24e-09 6.83e-09 1.04e-08 1.06e-08 #&gt; 4,4 4,5 4,6 4,7 4,8 4,9 4,10 4,11 4,12 4,13 4,14 #&gt; 8.08e-09 4.93e-09 2.50e-09 1.09e-09 4.15e-10 1.41e-10 4.28e-11 1.18e-11 3.00e-12 7.03e-13 1.53e-13 #&gt; 4,15 4,16 4,17 4,18 4,19 4,20 5,0 5,1 5,2 5,3 5,4 #&gt; 3.10e-14 5.89e-15 1.05e-15 1.78e-16 2.85e-17 5.05e-18 1.16e-08 3.54e-08 5.40e-08 5.49e-08 4.19e-08 #&gt; 5,5 5,6 5,7 5,8 5,9 5,10 5,11 5,12 5,13 5,14 5,15 #&gt; 2.55e-08 1.30e-08 5.65e-09 2.15e-09 7.28e-10 2.22e-10 6.14e-11 1.56e-11 3.64e-12 7.92e-13 1.61e-13 #&gt; 5,16 5,17 5,18 5,19 5,20 6,0 6,1 6,2 6,3 6,4 6,5 #&gt; 3.05e-14 5.46e-15 9.22e-16 1.48e-16 2.62e-17 5.64e-08 1.72e-07 2.62e-07 2.67e-07 2.04e-07 1.24e-07 #&gt; 6,6 6,7 6,8 6,9 6,10 6,11 6,12 6,13 6,14 6,15 6,16 #&gt; 6.30e-08 2.74e-08 1.05e-08 3.54e-09 1.08e-09 2.98e-10 7.56e-11 1.77e-11 3.85e-12 7.80e-13 1.48e-13 #&gt; 6,17 6,18 6,19 6,20 7,0 7,1 7,2 7,3 7,4 7,5 7,6 #&gt; 2.65e-14 4.48e-15 7.17e-16 1.27e-16 2.56e-07 7.81e-07 1.19e-06 1.21e-06 9.24e-07 5.63e-07 2.86e-07 #&gt; 7,7 7,8 7,9 7,10 7,11 7,12 7,13 7,14 7,15 7,16 7,17 #&gt; 1.25e-07 4.74e-08 1.61e-08 4.89e-09 1.35e-09 3.43e-10 8.04e-11 1.75e-11 3.54e-12 6.73e-13 1.20e-13 #&gt; 7,18 7,19 7,20 8,0 8,1 8,2 8,3 8,4 8,5 8,6 8,7 #&gt; 2.03e-14 3.26e-15 5.78e-16 1.08e-06 3.30e-06 5.03e-06 5.11e-06 3.90e-06 2.38e-06 1.21e-06 5.26e-07 #&gt; 8,8 8,9 8,10 8,11 8,12 8,13 8,14 8,15 8,16 8,17 8,18 #&gt; 2.00e-07 6.78e-08 2.06e-08 5.71e-09 1.45e-09 3.39e-10 7.37e-11 1.50e-11 2.84e-12 5.08e-13 8.59e-14 #&gt; 8,19 8,20 9,0 9,1 9,2 9,3 9,4 9,5 9,6 9,7 9,8 #&gt; 1.37e-14 2.44e-15 4.21e-06 1.29e-05 1.96e-05 2.00e-05 1.52e-05 9.28e-06 4.71e-06 2.05e-06 7.82e-07 #&gt; 9,9 9,10 9,11 9,12 9,13 9,14 9,15 9,16 9,17 9,18 9,19 #&gt; 2.65e-07 8.06e-08 2.23e-08 5.66e-09 1.32e-09 2.88e-10 5.84e-11 1.11e-11 1.98e-12 3.35e-13 5.36e-14 #&gt; 9,20 10,0 10,1 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9 #&gt; 9.52e-15 1.51e-05 4.62e-05 7.05e-05 7.16e-05 5.46e-05 3.33e-05 1.69e-05 7.37e-06 2.81e-06 9.50e-07 #&gt; 10,10 10,11 10,12 10,13 10,14 10,15 10,16 10,17 10,18 10,19 10,20 #&gt; 2.89e-07 8.00e-08 2.03e-08 4.75e-09 1.03e-09 2.09e-10 3.98e-11 7.12e-12 1.20e-12 1.93e-13 3.42e-14 #&gt; 11,0 11,1 11,2 11,3 11,4 11,5 11,6 11,7 11,8 11,9 11,10 #&gt; 4.96e-05 1.51e-04 2.31e-04 2.35e-04 1.79e-04 1.09e-04 5.55e-05 2.42e-05 9.20e-06 3.11e-06 9.48e-07 #&gt; 11,11 11,12 11,13 11,14 11,15 11,16 11,17 11,18 11,19 11,20 12,0 #&gt; 2.62e-07 6.66e-08 1.56e-08 3.39e-09 6.87e-10 1.31e-10 2.34e-11 3.94e-12 6.31e-13 1.12e-13 1.47e-04 #&gt; 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11 #&gt; 4.50e-04 6.86e-04 6.98e-04 5.32e-04 3.25e-04 1.65e-04 7.18e-05 2.73e-05 9.25e-06 2.82e-06 7.80e-07 #&gt; 12,12 12,13 12,14 12,15 12,16 12,17 12,18 12,19 12,20 13,0 13,1 #&gt; 1.98e-07 4.63e-08 1.01e-08 2.04e-09 3.88e-10 6.94e-11 1.17e-11 1.88e-12 3.33e-13 3.94e-04 1.20e-03 #&gt; 13,2 13,3 13,4 13,5 13,6 13,7 13,8 13,9 13,10 13,11 13,12 #&gt; 1.83e-03 1.86e-03 1.42e-03 8.66e-04 4.40e-04 1.92e-04 7.30e-05 2.47e-05 7.52e-06 2.08e-06 5.28e-07 #&gt; 13,13 13,14 13,15 13,16 13,17 13,18 13,19 13,20 14,0 14,1 14,2 #&gt; 1.24e-07 2.69e-08 5.45e-09 1.04e-09 1.85e-10 3.13e-11 5.01e-12 8.89e-13 9.34e-04 2.85e-03 4.35e-03 #&gt; 14,3 14,4 14,5 14,6 14,7 14,8 14,9 14,10 14,11 14,12 14,13 #&gt; 4.43e-03 3.37e-03 2.06e-03 1.05e-03 4.55e-04 1.73e-04 5.87e-05 1.79e-05 4.94e-06 1.25e-06 2.94e-07 #&gt; 14,14 14,15 14,16 14,17 14,18 14,19 14,20 15,0 15,1 15,2 15,3 #&gt; 6.38e-08 1.29e-08 2.46e-09 4.40e-10 7.43e-11 1.19e-11 2.11e-12 1.95e-03 5.95e-03 9.09e-03 9.24e-03 #&gt; 15,4 15,5 15,6 15,7 15,8 15,9 15,10 15,11 15,12 15,13 15,14 #&gt; 7.04e-03 4.30e-03 2.18e-03 9.50e-04 3.62e-04 1.22e-04 3.73e-05 1.03e-05 2.62e-06 6.13e-07 1.33e-07 #&gt; 15,15 15,16 15,17 15,18 15,19 15,20 16,0 16,1 16,2 16,3 16,4 #&gt; 2.70e-08 5.14e-09 9.19e-10 1.55e-10 2.48e-11 4.41e-12 3.54e-03 1.08e-02 1.65e-02 1.67e-02 1.28e-02 #&gt; 16,5 16,6 16,7 16,8 16,9 16,10 16,11 16,12 16,13 16,14 16,15 #&gt; 7.78e-03 3.95e-03 1.72e-03 6.56e-04 2.22e-04 6.76e-05 1.87e-05 4.74e-06 1.11e-06 2.41e-07 4.90e-08 #&gt; 16,16 16,17 16,18 16,19 16,20 17,0 17,1 17,2 17,3 17,4 17,5 #&gt; 9.31e-09 1.66e-09 2.81e-10 4.50e-11 7.98e-12 5.49e-03 1.67e-02 2.56e-02 2.60e-02 1.98e-02 1.21e-02 #&gt; 17,6 17,7 17,8 17,9 17,10 17,11 17,12 17,13 17,14 17,15 17,16 #&gt; 6.14e-03 2.67e-03 1.02e-03 3.44e-04 1.05e-04 2.90e-05 7.36e-06 1.72e-06 3.75e-07 7.60e-08 1.44e-08 #&gt; 17,17 17,18 17,19 17,20 18,0 18,1 18,2 18,3 18,4 18,5 18,6 #&gt; 2.58e-09 4.36e-10 6.98e-11 1.24e-11 7.19e-03 2.20e-02 3.35e-02 3.41e-02 2.60e-02 1.58e-02 8.05e-03 #&gt; 18,7 18,8 18,9 18,10 18,11 18,12 18,13 18,14 18,15 18,16 18,17 #&gt; 3.50e-03 1.33e-03 4.52e-04 1.37e-04 3.81e-05 9.65e-06 2.26e-06 4.91e-07 9.96e-08 1.89e-08 3.39e-09 #&gt; 18,18 18,19 18,20 19,0 19,1 19,2 19,3 19,4 19,5 19,6 19,7 #&gt; 5.72e-10 9.15e-11 1.62e-11 7.88e-03 2.41e-02 3.67e-02 3.73e-02 2.85e-02 1.74e-02 8.82e-03 3.84e-03 #&gt; 19,8 19,9 19,10 19,11 19,12 19,13 19,14 19,15 19,16 19,17 19,18 #&gt; 1.46e-03 4.95e-04 1.51e-04 4.17e-05 1.06e-05 2.48e-06 5.38e-07 1.09e-07 2.08e-08 3.71e-09 6.27e-10 #&gt; 19,19 19,20 20,0 20,1 20,2 20,3 20,4 20,5 20,6 20,7 20,8 #&gt; 1.00e-10 1.78e-11 1.97e-02 6.02e-02 9.18e-02 9.34e-02 7.12e-02 4.34e-02 2.20e-02 9.60e-03 3.66e-03 #&gt; 20,9 20,10 20,11 20,12 20,13 20,14 20,15 20,16 20,17 20,18 20,19 #&gt; 1.24e-03 3.77e-04 1.04e-04 2.65e-05 6.19e-06 1.35e-06 2.73e-07 5.19e-08 9.28e-09 1.57e-09 2.51e-10 #&gt; 20,20 #&gt; 4.45e-11 #&gt; #&gt; #&gt; $`2` #&gt; $`2`$r #&gt; [1] 44.9 #&gt; #&gt; $`2`$pr #&gt; 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 #&gt; 7.09e-12 2.26e-11 3.63e-11 3.92e-11 3.19e-11 2.08e-11 1.13e-11 5.31e-12 2.17e-12 7.91e-13 2.59e-13 #&gt; 0,11 0,12 0,13 0,14 0,15 0,16 0,17 0,18 0,19 0,20 1,0 #&gt; 7.69e-14 2.09e-14 5.24e-15 1.22e-15 2.63e-16 5.33e-17 1.01e-17 1.82e-18 3.08e-19 5.83e-20 5.72e-11 #&gt; 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 1,11 #&gt; 1.82e-10 2.93e-10 3.16e-10 2.57e-10 1.68e-10 9.14e-11 4.28e-11 1.75e-11 6.38e-12 2.09e-12 6.20e-13 #&gt; 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,19 1,20 2,0 2,1 #&gt; 1.69e-13 4.22e-14 9.81e-15 2.12e-15 4.29e-16 8.17e-17 1.46e-17 2.48e-18 4.70e-19 3.43e-10 1.09e-09 #&gt; 2,2 2,3 2,4 2,5 2,6 2,7 2,8 2,9 2,10 2,11 2,12 #&gt; 1.76e-09 1.89e-09 1.54e-09 1.01e-09 5.49e-10 2.57e-10 1.05e-10 3.83e-11 1.25e-11 3.72e-12 1.01e-12 #&gt; 2,13 2,14 2,15 2,16 2,17 2,18 2,19 2,20 3,0 3,1 3,2 #&gt; 2.53e-13 5.88e-14 1.27e-14 2.58e-15 4.90e-16 8.78e-17 1.49e-17 2.82e-18 1.89e-09 6.02e-09 9.67e-09 #&gt; 3,3 3,4 3,5 3,6 3,7 3,8 3,9 3,10 3,11 3,12 3,13 #&gt; 1.04e-08 8.48e-09 5.54e-09 3.02e-09 1.41e-09 5.79e-10 2.11e-10 6.89e-11 2.05e-11 5.57e-12 1.39e-12 #&gt; 3,14 3,15 3,16 3,17 3,18 3,19 3,20 4,0 4,1 4,2 4,3 #&gt; 3.24e-13 7.01e-14 1.42e-14 2.70e-15 4.84e-16 8.20e-17 1.55e-17 9.78e-09 3.12e-08 5.01e-08 5.40e-08 #&gt; 4,4 4,5 4,6 4,7 4,8 4,9 4,10 4,11 4,12 4,13 4,14 #&gt; 4.39e-08 2.87e-08 1.56e-08 7.32e-09 3.00e-09 1.09e-09 3.57e-10 1.06e-10 2.88e-11 7.22e-12 1.68e-12 #&gt; 4,15 4,16 4,17 4,18 4,19 4,20 5,0 5,1 5,2 5,3 5,4 #&gt; 3.63e-13 7.35e-14 1.40e-14 2.50e-15 4.24e-16 8.04e-17 4.75e-08 1.51e-07 2.43e-07 2.62e-07 2.13e-07 #&gt; 5,5 5,6 5,7 5,8 5,9 5,10 5,11 5,12 5,13 5,14 5,15 #&gt; 1.39e-07 7.60e-08 3.56e-08 1.46e-08 5.30e-09 1.73e-09 5.15e-10 1.40e-10 3.51e-11 8.15e-12 1.76e-12 #&gt; 5,16 5,17 5,18 5,19 5,20 6,0 6,1 6,2 6,3 6,4 6,5 #&gt; 3.57e-13 6.79e-14 1.22e-14 2.06e-15 3.91e-16 2.16e-07 6.87e-07 1.10e-06 1.19e-06 9.69e-07 6.33e-07 #&gt; 6,6 6,7 6,8 6,9 6,10 6,11 6,12 6,13 6,14 6,15 6,16 #&gt; 3.45e-07 1.61e-07 6.61e-08 2.41e-08 7.87e-09 2.34e-09 6.36e-10 1.59e-10 3.70e-11 8.00e-12 1.62e-12 #&gt; 6,17 6,18 6,19 6,20 7,0 7,1 7,2 7,3 7,4 7,5 7,6 #&gt; 3.08e-13 5.52e-14 9.36e-15 1.77e-15 9.10e-07 2.90e-06 4.66e-06 5.03e-06 4.09e-06 2.67e-06 1.46e-06 #&gt; 7,7 7,8 7,9 7,10 7,11 7,12 7,13 7,14 7,15 7,16 7,17 #&gt; 6.81e-07 2.79e-07 1.02e-07 3.32e-08 9.87e-09 2.68e-09 6.72e-10 1.56e-10 3.38e-11 6.84e-12 1.30e-12 #&gt; 7,18 7,19 7,20 8,0 8,1 8,2 8,3 8,4 8,5 8,6 8,7 #&gt; 2.33e-13 3.95e-14 7.48e-15 3.55e-06 1.13e-05 1.82e-05 1.96e-05 1.60e-05 1.04e-05 5.68e-06 2.66e-06 #&gt; 8,8 8,9 8,10 8,11 8,12 8,13 8,14 8,15 8,16 8,17 8,18 #&gt; 1.09e-06 3.96e-07 1.30e-07 3.85e-08 1.05e-08 2.62e-09 6.10e-10 1.32e-10 2.67e-11 5.08e-12 9.10e-13 #&gt; 8,19 8,20 9,0 9,1 9,2 9,3 9,4 9,5 9,6 9,7 9,8 #&gt; 1.54e-13 2.92e-14 1.28e-05 4.06e-05 6.53e-05 7.05e-05 5.73e-05 3.74e-05 2.04e-05 9.55e-06 3.91e-06 #&gt; 9,9 9,10 9,11 9,12 9,13 9,14 9,15 9,16 9,17 9,18 9,19 #&gt; 1.42e-06 4.65e-07 1.38e-07 3.76e-08 9.42e-09 2.19e-09 4.73e-10 9.58e-11 1.82e-11 3.27e-12 5.54e-13 #&gt; 9,20 10,0 10,1 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9 #&gt; 1.05e-13 4.18e-05 1.33e-04 2.14e-04 2.31e-04 1.88e-04 1.23e-04 6.69e-05 3.13e-05 1.28e-05 4.66e-06 #&gt; 10,10 10,11 10,12 10,13 10,14 10,15 10,16 10,17 10,18 10,19 10,20 #&gt; 1.53e-06 4.53e-07 1.23e-07 3.09e-08 7.17e-09 1.55e-09 3.14e-10 5.97e-11 1.07e-11 1.81e-12 3.44e-13 #&gt; 11,0 11,1 11,2 11,3 11,4 11,5 11,6 11,7 11,8 11,9 11,10 #&gt; 1.24e-04 3.96e-04 6.36e-04 6.86e-04 5.58e-04 3.65e-04 1.99e-04 9.30e-05 3.81e-05 1.39e-05 4.53e-06 #&gt; 11,11 11,12 11,13 11,14 11,15 11,16 11,17 11,18 11,19 11,20 12,0 #&gt; 1.35e-06 3.66e-07 9.18e-08 2.13e-08 4.61e-09 9.34e-10 1.78e-10 3.18e-11 5.39e-12 1.02e-12 3.32e-04 #&gt; 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11 #&gt; 1.06e-03 1.70e-03 1.83e-03 1.49e-03 9.73e-04 5.31e-04 2.48e-04 1.02e-04 3.70e-05 1.21e-05 3.60e-06 #&gt; 12,12 12,13 12,14 12,15 12,16 12,17 12,18 12,19 12,20 13,0 13,1 #&gt; 9.78e-07 2.45e-07 5.69e-08 1.23e-08 2.49e-09 4.74e-10 8.49e-11 1.44e-11 2.73e-12 7.88e-04 2.51e-03 #&gt; 13,2 13,3 13,4 13,5 13,6 13,7 13,8 13,9 13,10 13,11 13,12 #&gt; 4.03e-03 4.35e-03 3.54e-03 2.31e-03 1.26e-03 5.90e-04 2.41e-04 8.79e-05 2.87e-05 8.54e-06 2.32e-06 #&gt; 13,13 13,14 13,15 13,16 13,17 13,18 13,19 13,20 14,0 14,1 14,2 #&gt; 5.82e-07 1.35e-07 2.92e-08 5.92e-09 1.13e-09 2.02e-10 3.42e-11 6.48e-12 1.64e-03 5.24e-03 8.42e-03 #&gt; 14,3 14,4 14,5 14,6 14,7 14,8 14,9 14,10 14,11 14,12 14,13 #&gt; 9.09e-03 7.39e-03 4.82e-03 2.63e-03 1.23e-03 5.04e-04 1.83e-04 6.00e-05 1.78e-05 4.85e-06 1.21e-06 #&gt; 14,14 14,15 14,16 14,17 14,18 14,19 14,20 15,0 15,1 15,2 15,3 #&gt; 2.82e-07 6.10e-08 1.24e-08 2.35e-09 4.21e-10 7.14e-11 1.35e-11 2.98e-03 9.50e-03 1.53e-02 1.65e-02 #&gt; 15,4 15,5 15,6 15,7 15,8 15,9 15,10 15,11 15,12 15,13 15,14 #&gt; 1.34e-02 8.74e-03 4.77e-03 2.23e-03 9.14e-04 3.32e-04 1.09e-04 3.23e-05 8.79e-06 2.20e-06 5.11e-07 #&gt; 15,15 15,16 15,17 15,18 15,19 15,20 16,0 16,1 16,2 16,3 16,4 #&gt; 1.11e-07 2.24e-08 4.26e-09 7.63e-10 1.29e-10 2.45e-11 4.62e-03 1.47e-02 2.37e-02 2.56e-02 2.08e-02 #&gt; 16,5 16,6 16,7 16,8 16,9 16,10 16,11 16,12 16,13 16,14 16,15 #&gt; 1.36e-02 7.40e-03 3.46e-03 1.42e-03 5.16e-04 1.69e-04 5.01e-05 1.36e-05 3.42e-06 7.93e-07 1.72e-07 #&gt; 16,16 16,17 16,18 16,19 16,20 17,0 17,1 17,2 17,3 17,4 17,5 #&gt; 3.47e-08 6.61e-09 1.18e-09 2.01e-10 3.80e-11 6.06e-03 1.93e-02 3.11e-02 3.35e-02 2.72e-02 1.78e-02 #&gt; 17,6 17,7 17,8 17,9 17,10 17,11 17,12 17,13 17,14 17,15 17,16 #&gt; 9.70e-03 4.54e-03 1.86e-03 6.76e-04 2.21e-04 6.57e-05 1.79e-05 4.48e-06 1.04e-06 2.25e-07 4.56e-08 #&gt; 17,17 17,18 17,19 17,20 18,0 18,1 18,2 18,3 18,4 18,5 18,6 #&gt; 8.66e-09 1.55e-09 2.63e-10 4.99e-11 6.64e-03 2.12e-02 3.40e-02 3.67e-02 2.99e-02 1.95e-02 1.06e-02 #&gt; 18,7 18,8 18,9 18,10 18,11 18,12 18,13 18,14 18,15 18,16 18,17 #&gt; 4.97e-03 2.04e-03 7.41e-04 2.43e-04 7.21e-05 1.96e-05 4.91e-06 1.14e-06 2.47e-07 4.99e-08 9.50e-09 #&gt; 18,18 18,19 18,20 19,0 19,1 19,2 19,3 19,4 19,5 19,6 19,7 #&gt; 1.70e-09 2.88e-10 5.46e-11 6.06e-03 1.93e-02 3.11e-02 3.35e-02 2.72e-02 1.78e-02 9.70e-03 4.54e-03 #&gt; 19,8 19,9 19,10 19,11 19,12 19,13 19,14 19,15 19,16 19,17 19,18 #&gt; 1.86e-03 6.76e-04 2.21e-04 6.57e-05 1.79e-05 4.48e-06 1.04e-06 2.25e-07 4.56e-08 8.66e-09 1.55e-09 #&gt; 19,19 19,20 20,0 20,1 20,2 20,3 20,4 20,5 20,6 20,7 20,8 #&gt; 2.63e-10 4.99e-11 1.06e-02 3.36e-02 5.40e-02 5.83e-02 4.74e-02 3.10e-02 1.69e-02 7.90e-03 3.23e-03 #&gt; 20,9 20,10 20,11 20,12 20,13 20,14 20,15 20,16 20,17 20,18 20,19 #&gt; 1.18e-03 3.85e-04 1.14e-04 3.11e-05 7.80e-06 1.81e-06 3.92e-07 7.93e-08 1.51e-08 2.70e-09 4.58e-10 #&gt; 20,20 #&gt; 8.68e-11 #&gt; #&gt; #&gt; $`3` #&gt; $`3`$r #&gt; [1] 50.5 #&gt; #&gt; $`3`$pr #&gt; 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 #&gt; 3.10e-11 1.05e-10 1.83e-10 2.20e-10 2.03e-10 1.51e-10 9.48e-11 5.08e-11 2.38e-11 9.82e-12 3.62e-12 #&gt; 0,11 0,12 0,13 0,14 0,15 0,16 0,17 0,18 0,19 0,20 1,0 #&gt; 1.20e-12 3.63e-13 1.00e-13 2.55e-14 6.02e-15 1.32e-15 2.70e-16 5.20e-17 9.43e-18 1.92e-18 2.39e-10 #&gt; 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 1,11 #&gt; 8.11e-10 1.42e-09 1.70e-09 1.57e-09 1.17e-09 7.33e-10 3.93e-10 1.84e-10 7.59e-11 2.80e-11 9.30e-12 #&gt; 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,19 1,20 2,0 2,1 #&gt; 2.81e-12 7.76e-13 1.97e-13 4.65e-14 1.02e-14 2.09e-15 4.02e-16 7.29e-17 1.49e-17 1.36e-09 4.61e-09 #&gt; 2,2 2,3 2,4 2,5 2,6 2,7 2,8 2,9 2,10 2,11 2,12 #&gt; 8.06e-09 9.67e-09 8.90e-09 6.65e-09 4.16e-09 2.23e-09 1.04e-09 4.31e-10 1.59e-10 5.28e-11 1.59e-11 #&gt; 2,13 2,14 2,15 2,16 2,17 2,18 2,19 2,20 3,0 3,1 3,2 #&gt; 4.41e-12 1.12e-12 2.64e-13 5.80e-14 1.19e-14 2.29e-15 4.14e-16 8.45e-17 7.05e-09 2.39e-08 4.17e-08 #&gt; 3,3 3,4 3,5 3,6 3,7 3,8 3,9 3,10 3,11 3,12 3,13 #&gt; 5.01e-08 4.61e-08 3.45e-08 2.16e-08 1.16e-08 5.41e-09 2.24e-09 8.24e-10 2.74e-10 8.27e-11 2.28e-11 #&gt; 3,14 3,15 3,16 3,17 3,18 3,19 3,20 4,0 4,1 4,2 4,3 #&gt; 5.81e-12 1.37e-12 3.00e-13 6.16e-14 1.18e-14 2.15e-15 4.38e-16 3.42e-08 1.16e-07 2.03e-07 2.43e-07 #&gt; 4,4 4,5 4,6 4,7 4,8 4,9 4,10 4,11 4,12 4,13 4,14 #&gt; 2.24e-07 1.67e-07 1.05e-07 5.62e-08 2.63e-08 1.09e-08 4.00e-09 1.33e-09 4.01e-10 1.11e-10 2.82e-11 #&gt; 4,15 4,16 4,17 4,18 4,19 4,20 5,0 5,1 5,2 5,3 5,4 #&gt; 6.65e-12 1.46e-12 2.99e-13 5.75e-14 1.04e-14 2.13e-15 1.55e-07 5.26e-07 9.20e-07 1.10e-06 1.02e-06 #&gt; 5,5 5,6 5,7 5,8 5,9 5,10 5,11 5,12 5,13 5,14 5,15 #&gt; 7.59e-07 4.75e-07 2.55e-07 1.19e-07 4.93e-08 1.82e-08 6.03e-09 1.82e-09 5.03e-10 1.28e-10 3.02e-11 #&gt; 5,16 5,17 5,18 5,19 5,20 6,0 6,1 6,2 6,3 6,4 6,5 #&gt; 6.62e-12 1.36e-12 2.61e-13 4.73e-14 9.65e-15 6.55e-07 2.22e-06 3.88e-06 4.66e-06 4.29e-06 3.20e-06 #&gt; 6,6 6,7 6,8 6,9 6,10 6,11 6,12 6,13 6,14 6,15 6,16 #&gt; 2.01e-06 1.08e-06 5.03e-07 2.08e-07 7.66e-08 2.55e-08 7.69e-09 2.12e-09 5.40e-10 1.27e-10 2.79e-11 #&gt; 6,17 6,18 6,19 6,20 7,0 7,1 7,2 7,3 7,4 7,5 7,6 #&gt; 5.73e-12 1.10e-12 2.00e-13 4.07e-14 2.56e-06 8.67e-06 1.52e-05 1.82e-05 1.67e-05 1.25e-05 7.83e-06 #&gt; 7,7 7,8 7,9 7,10 7,11 7,12 7,13 7,14 7,15 7,16 7,17 #&gt; 4.20e-06 1.97e-06 8.12e-07 2.99e-07 9.94e-08 3.00e-08 8.29e-09 2.11e-09 4.97e-10 1.09e-10 2.24e-11 #&gt; 7,18 7,19 7,20 8,0 8,1 8,2 8,3 8,4 8,5 8,6 8,7 #&gt; 4.30e-12 7.79e-13 1.59e-13 9.18e-06 3.11e-05 5.44e-05 6.53e-05 6.01e-05 4.49e-05 2.81e-05 1.51e-05 #&gt; 8,8 8,9 8,10 8,11 8,12 8,13 8,14 8,15 8,16 8,17 8,18 #&gt; 7.05e-06 2.91e-06 1.07e-06 3.57e-07 1.08e-07 2.98e-08 7.57e-09 1.78e-09 3.91e-10 8.03e-11 1.54e-11 #&gt; 8,19 8,20 9,0 9,1 9,2 9,3 9,4 9,5 9,6 9,7 9,8 #&gt; 2.80e-12 5.71e-13 3.01e-05 1.02e-04 1.78e-04 2.14e-04 1.97e-04 1.47e-04 9.22e-05 4.95e-05 2.31e-05 #&gt; 9,9 9,10 9,11 9,12 9,13 9,14 9,15 9,16 9,17 9,18 9,19 #&gt; 9.55e-06 3.52e-06 1.17e-06 3.53e-07 9.76e-08 2.48e-08 5.85e-09 1.28e-09 2.63e-10 5.06e-11 9.17e-12 #&gt; 9,20 10,0 10,1 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9 #&gt; 1.87e-12 8.95e-05 3.03e-04 5.30e-04 6.36e-04 5.86e-04 4.37e-04 2.74e-04 1.47e-04 6.87e-05 2.84e-05 #&gt; 10,10 10,11 10,12 10,13 10,14 10,15 10,16 10,17 10,18 10,19 10,20 #&gt; 1.05e-05 3.48e-06 1.05e-06 2.90e-07 7.38e-08 1.74e-08 3.81e-09 7.82e-10 1.50e-10 2.73e-11 5.56e-12 #&gt; 11,0 11,1 11,2 11,3 11,4 11,5 11,6 11,7 11,8 11,9 11,10 #&gt; 2.39e-04 8.09e-04 1.42e-03 1.70e-03 1.56e-03 1.17e-03 7.31e-04 3.92e-04 1.84e-04 7.58e-05 2.79e-05 #&gt; 11,11 11,12 11,13 11,14 11,15 11,16 11,17 11,18 11,19 11,20 12,0 #&gt; 9.28e-06 2.80e-06 7.74e-07 1.97e-07 4.64e-08 1.02e-08 2.09e-09 4.02e-10 7.28e-11 1.48e-11 5.67e-04 #&gt; 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11 #&gt; 1.92e-03 3.36e-03 4.03e-03 3.71e-03 2.77e-03 1.74e-03 9.32e-04 4.36e-04 1.80e-04 6.63e-05 2.20e-05 #&gt; 12,12 12,13 12,14 12,15 12,16 12,17 12,18 12,19 12,20 13,0 13,1 #&gt; 6.65e-06 1.84e-06 4.68e-07 1.10e-07 2.42e-08 4.96e-09 9.54e-10 1.73e-10 3.52e-11 1.18e-03 4.01e-03 #&gt; 13,2 13,3 13,4 13,5 13,6 13,7 13,8 13,9 13,10 13,11 13,12 #&gt; 7.02e-03 8.42e-03 7.75e-03 5.79e-03 3.63e-03 1.95e-03 9.10e-04 3.76e-04 1.38e-04 4.60e-05 1.39e-05 #&gt; 13,13 13,14 13,15 13,16 13,17 13,18 13,19 13,20 14,0 14,1 14,2 #&gt; 3.84e-06 9.77e-07 2.30e-07 5.05e-08 1.03e-08 1.99e-09 3.61e-10 7.36e-11 2.15e-03 7.27e-03 1.27e-02 #&gt; 14,3 14,4 14,5 14,6 14,7 14,8 14,9 14,10 14,11 14,12 14,13 #&gt; 1.53e-02 1.41e-02 1.05e-02 6.57e-03 3.53e-03 1.65e-03 6.81e-04 2.51e-04 8.34e-05 2.52e-05 6.96e-06 #&gt; 14,14 14,15 14,16 14,17 14,18 14,19 14,20 15,0 15,1 15,2 15,3 #&gt; 1.77e-06 4.17e-07 9.15e-08 1.88e-08 3.61e-09 6.54e-10 1.33e-10 3.33e-03 1.13e-02 1.97e-02 2.37e-02 #&gt; 15,4 15,5 15,6 15,7 15,8 15,9 15,10 15,11 15,12 15,13 15,14 #&gt; 2.18e-02 1.63e-02 1.02e-02 5.47e-03 2.56e-03 1.06e-03 3.89e-04 1.29e-04 3.91e-05 1.08e-05 2.75e-06 #&gt; 15,15 15,16 15,17 15,18 15,19 15,20 16,0 16,1 16,2 16,3 16,4 #&gt; 6.47e-07 1.42e-07 2.91e-08 5.60e-09 1.01e-09 2.07e-10 4.37e-03 1.48e-02 2.59e-02 3.11e-02 2.86e-02 #&gt; 16,5 16,6 16,7 16,8 16,9 16,10 16,11 16,12 16,13 16,14 16,15 #&gt; 2.14e-02 1.34e-02 7.17e-03 3.35e-03 1.39e-03 5.11e-04 1.70e-04 5.12e-05 1.42e-05 3.60e-06 8.49e-07 #&gt; 16,16 16,17 16,18 16,19 16,20 17,0 17,1 17,2 17,3 17,4 17,5 #&gt; 1.86e-07 3.82e-08 7.34e-09 1.33e-09 2.71e-10 4.79e-03 1.62e-02 2.84e-02 3.40e-02 3.13e-02 2.34e-02 #&gt; 17,6 17,7 17,8 17,9 17,10 17,11 17,12 17,13 17,14 17,15 17,16 #&gt; 1.47e-02 7.86e-03 3.68e-03 1.52e-03 5.60e-04 1.86e-04 5.61e-05 1.55e-05 3.95e-06 9.30e-07 2.04e-07 #&gt; 17,17 17,18 17,19 17,20 18,0 18,1 18,2 18,3 18,4 18,5 18,6 #&gt; 4.18e-08 8.05e-09 1.46e-09 2.97e-10 4.37e-03 1.48e-02 2.59e-02 3.11e-02 2.86e-02 2.14e-02 1.34e-02 #&gt; 18,7 18,8 18,9 18,10 18,11 18,12 18,13 18,14 18,15 18,16 18,17 #&gt; 7.17e-03 3.35e-03 1.39e-03 5.11e-04 1.70e-04 5.12e-05 1.42e-05 3.60e-06 8.49e-07 1.86e-07 3.82e-08 #&gt; 18,18 18,19 18,20 19,0 19,1 19,2 19,3 19,4 19,5 19,6 19,7 #&gt; 7.34e-09 1.33e-09 2.71e-10 3.33e-03 1.13e-02 1.97e-02 2.37e-02 2.18e-02 1.63e-02 1.02e-02 5.47e-03 #&gt; 19,8 19,9 19,10 19,11 19,12 19,13 19,14 19,15 19,16 19,17 19,18 #&gt; 2.56e-03 1.06e-03 3.89e-04 1.29e-04 3.91e-05 1.08e-05 2.75e-06 6.47e-07 1.42e-07 2.91e-08 5.60e-09 #&gt; 19,19 19,20 20,0 20,1 20,2 20,3 20,4 20,5 20,6 20,7 20,8 #&gt; 1.01e-09 2.07e-10 4.27e-03 1.45e-02 2.53e-02 3.04e-02 2.79e-02 2.09e-02 1.31e-02 7.01e-03 3.28e-03 #&gt; 20,9 20,10 20,11 20,12 20,13 20,14 20,15 20,16 20,17 20,18 20,19 #&gt; 1.35e-03 4.99e-04 1.66e-04 5.01e-05 1.38e-05 3.52e-06 8.30e-07 1.82e-07 3.73e-08 7.18e-09 1.30e-09 #&gt; 20,20 #&gt; 2.65e-10 #&gt; #&gt; #&gt; $`4` #&gt; $`4`$r #&gt; [1] 54.2 #&gt; #&gt; $`4`$pr #&gt; 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 #&gt; 1.08e-10 3.94e-10 7.64e-10 1.05e-09 1.14e-09 1.02e-09 7.58e-10 4.80e-10 2.62e-10 1.25e-10 5.22e-11 #&gt; 0,11 0,12 0,13 0,14 0,15 0,16 0,17 0,18 0,19 0,20 1,0 #&gt; 1.95e-11 6.53e-12 1.99e-12 5.53e-13 1.42e-13 3.35e-14 7.38e-15 1.52e-15 2.93e-16 6.40e-17 8.03e-10 #&gt; 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 1,11 #&gt; 2.92e-09 5.65e-09 7.78e-09 8.44e-09 7.51e-09 5.61e-09 3.56e-09 1.94e-09 9.22e-10 3.86e-10 1.44e-10 #&gt; 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,19 1,20 2,0 2,1 #&gt; 4.83e-11 1.47e-11 4.09e-12 1.05e-12 2.48e-13 5.46e-14 1.12e-14 2.17e-15 4.74e-16 4.31e-09 1.57e-08 #&gt; 2,2 2,3 2,4 2,5 2,6 2,7 2,8 2,9 2,10 2,11 2,12 #&gt; 3.03e-08 4.17e-08 4.53e-08 4.03e-08 3.01e-08 1.91e-08 1.04e-08 4.95e-09 2.07e-09 7.73e-10 2.59e-10 #&gt; 2,13 2,14 2,15 2,16 2,17 2,18 2,19 2,20 3,0 3,1 3,2 #&gt; 7.90e-11 2.20e-11 5.62e-12 1.33e-12 2.93e-13 6.03e-14 1.16e-14 2.54e-15 2.09e-08 7.62e-08 1.47e-07 #&gt; 3,3 3,4 3,5 3,6 3,7 3,8 3,9 3,10 3,11 3,12 3,13 #&gt; 2.03e-07 2.20e-07 1.96e-07 1.46e-07 9.27e-08 5.06e-08 2.40e-08 1.01e-08 3.76e-09 1.26e-09 3.84e-10 #&gt; 3,14 3,15 3,16 3,17 3,18 3,19 3,20 4,0 4,1 4,2 4,3 #&gt; 1.07e-10 2.73e-11 6.47e-12 1.42e-12 2.93e-13 5.65e-14 1.24e-14 9.50e-08 3.45e-07 6.69e-07 9.20e-07 #&gt; 4,4 4,5 4,6 4,7 4,8 4,9 4,10 4,11 4,12 4,13 4,14 #&gt; 9.98e-07 8.89e-07 6.63e-07 4.21e-07 2.29e-07 1.09e-07 4.57e-08 1.70e-08 5.72e-09 1.74e-09 4.84e-10 #&gt; 4,15 4,16 4,17 4,18 4,19 4,20 5,0 5,1 5,2 5,3 5,4 #&gt; 1.24e-10 2.93e-11 6.46e-12 1.33e-12 2.56e-13 5.61e-14 4.01e-07 1.46e-06 2.82e-06 3.88e-06 4.21e-06 #&gt; 5,5 5,6 5,7 5,8 5,9 5,10 5,11 5,12 5,13 5,14 5,15 #&gt; 3.75e-06 2.80e-06 1.77e-06 9.68e-07 4.60e-07 1.93e-07 7.19e-08 2.41e-08 7.35e-09 2.04e-09 5.23e-10 #&gt; 5,16 5,17 5,18 5,19 5,20 6,0 6,1 6,2 6,3 6,4 6,5 #&gt; 1.24e-10 2.73e-11 5.61e-12 1.08e-12 2.37e-13 1.56e-06 5.69e-06 1.10e-05 1.52e-05 1.64e-05 1.46e-05 #&gt; 6,6 6,7 6,8 6,9 6,10 6,11 6,12 6,13 6,14 6,15 6,16 #&gt; 1.09e-05 6.93e-06 3.78e-06 1.80e-06 7.52e-07 2.81e-07 9.42e-08 2.87e-08 7.98e-09 2.04e-09 4.83e-10 #&gt; 6,17 6,18 6,19 6,20 7,0 7,1 7,2 7,3 7,4 7,5 7,6 #&gt; 1.06e-10 2.19e-11 4.22e-12 9.23e-13 5.62e-06 2.04e-05 3.95e-05 5.44e-05 5.90e-05 5.25e-05 3.92e-05 #&gt; 7,7 7,8 7,9 7,10 7,11 7,12 7,13 7,14 7,15 7,16 7,17 #&gt; 2.49e-05 1.36e-05 6.45e-06 2.70e-06 1.01e-06 3.38e-07 1.03e-07 2.86e-08 7.33e-09 1.73e-09 3.82e-10 #&gt; 7,18 7,19 7,20 8,0 8,1 8,2 8,3 8,4 8,5 8,6 8,7 #&gt; 7.86e-11 1.52e-11 3.31e-12 1.84e-05 6.69e-05 1.30e-04 1.78e-04 1.93e-04 1.72e-04 1.29e-04 8.15e-05 #&gt; 8,8 8,9 8,10 8,11 8,12 8,13 8,14 8,15 8,16 8,17 8,18 #&gt; 4.45e-05 2.11e-05 8.85e-06 3.30e-06 1.11e-06 3.37e-07 9.39e-08 2.40e-08 5.69e-09 1.25e-09 2.58e-10 #&gt; 8,19 8,20 9,0 9,1 9,2 9,3 9,4 9,5 9,6 9,7 9,8 #&gt; 4.97e-11 1.09e-11 5.47e-05 1.99e-04 3.85e-04 5.30e-04 5.75e-04 5.12e-04 3.82e-04 2.42e-04 1.32e-04 #&gt; 9,9 9,10 9,11 9,12 9,13 9,14 9,15 9,16 9,17 9,18 9,19 #&gt; 6.28e-05 2.63e-05 9.81e-06 3.29e-06 1.00e-06 2.79e-07 7.14e-08 1.69e-08 3.72e-09 7.65e-10 1.48e-10 #&gt; 9,20 10,0 10,1 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9 #&gt; 3.23e-11 1.46e-04 5.31e-04 1.03e-03 1.42e-03 1.53e-03 1.37e-03 1.02e-03 6.47e-04 3.53e-04 1.68e-04 #&gt; 10,10 10,11 10,12 10,13 10,14 10,15 10,16 10,17 10,18 10,19 10,20 #&gt; 7.02e-05 2.62e-05 8.79e-06 2.68e-06 7.45e-07 1.91e-07 4.51e-08 9.93e-09 2.04e-09 3.94e-10 8.62e-11 #&gt; 11,0 11,1 11,2 11,3 11,4 11,5 11,6 11,7 11,8 11,9 11,10 #&gt; 3.47e-04 1.26e-03 2.44e-03 3.36e-03 3.64e-03 3.25e-03 2.42e-03 1.54e-03 8.38e-04 3.98e-04 1.67e-04 #&gt; 11,11 11,12 11,13 11,14 11,15 11,16 11,17 11,18 11,19 11,20 12,0 #&gt; 6.22e-05 2.09e-05 6.36e-06 1.77e-06 4.53e-07 1.07e-07 2.36e-08 4.85e-09 9.36e-10 2.05e-10 7.24e-04 #&gt; 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11 #&gt; 2.63e-03 5.10e-03 7.02e-03 7.61e-03 6.78e-03 5.06e-03 3.21e-03 1.75e-03 8.31e-04 3.48e-04 1.30e-04 #&gt; 12,12 12,13 12,14 12,15 12,16 12,17 12,18 12,19 12,20 13,0 13,1 #&gt; 4.36e-05 1.33e-05 3.69e-06 9.45e-07 2.24e-07 4.93e-08 1.01e-08 1.95e-09 4.27e-10 1.31e-03 4.77e-03 #&gt; 13,2 13,3 13,4 13,5 13,6 13,7 13,8 13,9 13,10 13,11 13,12 #&gt; 9.24e-03 1.27e-02 1.38e-02 1.23e-02 9.17e-03 5.81e-03 3.17e-03 1.51e-03 6.31e-04 2.35e-04 7.90e-05 #&gt; 13,13 13,14 13,15 13,16 13,17 13,18 13,19 13,20 14,0 14,1 14,2 #&gt; 2.41e-05 6.69e-06 1.71e-06 4.05e-07 8.93e-08 1.84e-08 3.54e-09 7.75e-10 2.04e-03 7.40e-03 1.43e-02 #&gt; 14,3 14,4 14,5 14,6 14,7 14,8 14,9 14,10 14,11 14,12 14,13 #&gt; 1.97e-02 2.14e-02 1.91e-02 1.42e-02 9.02e-03 4.92e-03 2.34e-03 9.79e-04 3.65e-04 1.23e-04 3.73e-05 #&gt; 14,14 14,15 14,16 14,17 14,18 14,19 14,20 15,0 15,1 15,2 15,3 #&gt; 1.04e-05 2.66e-06 6.29e-07 1.39e-07 2.85e-08 5.50e-09 1.20e-09 2.67e-03 9.71e-03 1.88e-02 2.59e-02 #&gt; 15,4 15,5 15,6 15,7 15,8 15,9 15,10 15,11 15,12 15,13 15,14 #&gt; 2.80e-02 2.50e-02 1.86e-02 1.18e-02 6.45e-03 3.06e-03 1.28e-03 4.79e-04 1.61e-04 4.89e-05 1.36e-05 #&gt; 15,15 15,16 15,17 15,18 15,19 15,20 16,0 16,1 16,2 16,3 16,4 #&gt; 3.48e-06 8.25e-07 1.82e-07 3.74e-08 7.21e-09 1.58e-09 2.93e-03 1.06e-02 2.06e-02 2.84e-02 3.07e-02 #&gt; 16,5 16,6 16,7 16,8 16,9 16,10 16,11 16,12 16,13 16,14 16,15 #&gt; 2.74e-02 2.04e-02 1.30e-02 7.07e-03 3.36e-03 1.41e-03 5.25e-04 1.76e-04 5.36e-05 1.49e-05 3.82e-06 #&gt; 16,16 16,17 16,18 16,19 16,20 17,0 17,1 17,2 17,3 17,4 17,5 #&gt; 9.04e-07 1.99e-07 4.09e-08 7.90e-09 1.73e-09 2.67e-03 9.71e-03 1.88e-02 2.59e-02 2.80e-02 2.50e-02 #&gt; 17,6 17,7 17,8 17,9 17,10 17,11 17,12 17,13 17,14 17,15 17,16 #&gt; 1.86e-02 1.18e-02 6.45e-03 3.06e-03 1.28e-03 4.79e-04 1.61e-04 4.89e-05 1.36e-05 3.48e-06 8.25e-07 #&gt; 17,17 17,18 17,19 17,20 18,0 18,1 18,2 18,3 18,4 18,5 18,6 #&gt; 1.82e-07 3.74e-08 7.21e-09 1.58e-09 2.04e-03 7.40e-03 1.43e-02 1.97e-02 2.14e-02 1.91e-02 1.42e-02 #&gt; 18,7 18,8 18,9 18,10 18,11 18,12 18,13 18,14 18,15 18,16 18,17 #&gt; 9.02e-03 4.92e-03 2.34e-03 9.79e-04 3.65e-04 1.23e-04 3.73e-05 1.04e-05 2.66e-06 6.29e-07 1.39e-07 #&gt; 18,18 18,19 18,20 19,0 19,1 19,2 19,3 19,4 19,5 19,6 19,7 #&gt; 2.85e-08 5.50e-09 1.20e-09 1.31e-03 4.77e-03 9.24e-03 1.27e-02 1.38e-02 1.23e-02 9.17e-03 5.81e-03 #&gt; 19,8 19,9 19,10 19,11 19,12 19,13 19,14 19,15 19,16 19,17 19,18 #&gt; 3.17e-03 1.51e-03 6.31e-04 2.35e-04 7.90e-05 2.41e-05 6.69e-06 1.71e-06 4.05e-07 8.93e-08 1.84e-08 #&gt; 19,19 19,20 20,0 20,1 20,2 20,3 20,4 20,5 20,6 20,7 20,8 #&gt; 3.54e-09 7.75e-10 1.30e-03 4.72e-03 9.14e-03 1.26e-02 1.36e-02 1.21e-02 9.06e-03 5.75e-03 3.14e-03 #&gt; 20,9 20,10 20,11 20,12 20,13 20,14 20,15 20,16 20,17 20,18 20,19 #&gt; 1.49e-03 6.24e-04 2.33e-04 7.81e-05 2.38e-05 6.62e-06 1.69e-06 4.01e-07 8.83e-08 1.82e-08 3.50e-09 #&gt; 20,20 #&gt; 7.66e-10 #&gt; #&gt; #&gt; $`5` #&gt; $`5`$r #&gt; [1] 55.9 #&gt; #&gt; $`5`$pr #&gt; 0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 0,10 #&gt; 3.07e-10 1.20e-09 2.59e-09 4.13e-09 5.33e-09 5.74e-09 5.17e-09 3.92e-09 2.51e-09 1.38e-09 6.61e-10 #&gt; 0,11 0,12 0,13 0,14 0,15 0,16 0,17 0,18 0,19 0,20 1,0 #&gt; 2.78e-10 1.04e-10 3.50e-11 1.07e-11 2.97e-12 7.62e-13 1.81e-13 3.98e-14 8.18e-15 1.92e-15 2.17e-09 #&gt; 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 1,11 #&gt; 8.49e-09 1.83e-08 2.92e-08 3.77e-08 4.06e-08 3.66e-08 2.77e-08 1.78e-08 9.78e-09 4.68e-09 1.97e-09 #&gt; 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,19 1,20 2,0 2,1 #&gt; 7.37e-10 2.48e-10 7.56e-11 2.10e-11 5.39e-12 1.28e-12 2.81e-13 5.79e-14 1.36e-14 1.10e-08 4.29e-08 #&gt; 2,2 2,3 2,4 2,5 2,6 2,7 2,8 2,9 2,10 2,11 2,12 #&gt; 9.26e-08 1.47e-07 1.91e-07 2.05e-07 1.85e-07 1.40e-07 8.98e-08 4.94e-08 2.36e-08 9.94e-09 3.72e-09 #&gt; 2,13 2,14 2,15 2,16 2,17 2,18 2,19 2,20 3,0 3,1 3,2 #&gt; 1.25e-09 3.82e-10 1.06e-10 2.72e-11 6.45e-12 1.42e-12 2.92e-13 6.88e-14 4.98e-08 1.95e-07 4.21e-07 #&gt; 3,3 3,4 3,5 3,6 3,7 3,8 3,9 3,10 3,11 3,12 3,13 #&gt; 6.70e-07 8.65e-07 9.32e-07 8.39e-07 6.35e-07 4.08e-07 2.24e-07 1.07e-07 4.51e-08 1.69e-08 5.68e-09 #&gt; 3,14 3,15 3,16 3,17 3,18 3,19 3,20 4,0 4,1 4,2 4,3 #&gt; 1.73e-09 4.83e-10 1.24e-10 2.93e-11 6.45e-12 1.33e-12 3.12e-13 2.10e-07 8.21e-07 1.77e-06 2.82e-06 #&gt; 4,4 4,5 4,6 4,7 4,8 4,9 4,10 4,11 4,12 4,13 4,14 #&gt; 3.65e-06 3.93e-06 3.54e-06 2.68e-06 1.72e-06 9.46e-07 4.52e-07 1.90e-07 7.12e-08 2.40e-08 7.31e-09 #&gt; 4,15 4,16 4,17 4,18 4,19 4,20 5,0 5,1 5,2 5,3 5,4 #&gt; 2.03e-09 5.21e-10 1.23e-10 2.72e-11 5.60e-12 1.32e-12 8.19e-07 3.20e-06 6.92e-06 1.10e-05 1.42e-05 #&gt; 5,5 5,6 5,7 5,8 5,9 5,10 5,11 5,12 5,13 5,14 5,15 #&gt; 1.53e-05 1.38e-05 1.05e-05 6.71e-06 3.69e-06 1.76e-06 7.42e-07 2.78e-07 9.35e-08 2.85e-08 7.94e-09 #&gt; 5,16 5,17 5,18 5,19 5,20 6,0 6,1 6,2 6,3 6,4 6,5 #&gt; 2.03e-09 4.82e-10 1.06e-10 2.18e-11 5.14e-12 2.94e-06 1.15e-05 2.48e-05 3.95e-05 5.11e-05 5.50e-05 #&gt; 6,6 6,7 6,8 6,9 6,10 6,11 6,12 6,13 6,14 6,15 6,16 #&gt; 4.96e-05 3.75e-05 2.41e-05 1.32e-05 6.33e-06 2.66e-06 9.98e-07 3.36e-07 1.02e-07 2.85e-08 7.30e-09 #&gt; 6,17 6,18 6,19 6,20 7,0 7,1 7,2 7,3 7,4 7,5 7,6 #&gt; 1.73e-09 3.81e-10 7.84e-11 1.84e-11 9.64e-06 3.77e-05 8.14e-05 1.30e-04 1.68e-04 1.80e-04 1.62e-04 #&gt; 7,7 7,8 7,9 7,10 7,11 7,12 7,13 7,14 7,15 7,16 7,17 #&gt; 1.23e-04 7.89e-05 4.34e-05 2.08e-05 8.74e-06 3.27e-06 1.10e-06 3.35e-07 9.34e-08 2.39e-08 5.67e-09 #&gt; 7,18 7,19 7,20 8,0 8,1 8,2 8,3 8,4 8,5 8,6 8,7 #&gt; 1.25e-09 2.57e-10 6.05e-11 2.87e-05 1.12e-04 2.42e-04 3.85e-04 4.98e-04 5.36e-04 4.83e-04 3.65e-04 #&gt; 8,8 8,9 8,10 8,11 8,12 8,13 8,14 8,15 8,16 8,17 8,18 #&gt; 2.34e-04 1.29e-04 6.17e-05 2.60e-05 9.72e-06 3.27e-06 9.97e-07 2.78e-07 7.11e-08 1.69e-08 3.71e-09 #&gt; 8,19 8,20 9,0 9,1 9,2 9,3 9,4 9,5 9,6 9,7 9,8 #&gt; 7.64e-10 1.80e-10 7.65e-05 2.99e-04 6.46e-04 1.03e-03 1.33e-03 1.43e-03 1.29e-03 9.76e-04 6.26e-04 #&gt; 9,9 9,10 9,11 9,12 9,13 9,14 9,15 9,16 9,17 9,18 9,19 #&gt; 3.45e-04 1.65e-04 6.93e-05 2.59e-05 8.73e-06 2.66e-06 7.41e-07 1.90e-07 4.50e-08 9.91e-09 2.04e-09 #&gt; 9,20 10,0 10,1 10,2 10,3 10,4 10,5 10,6 10,7 10,8 10,9 #&gt; 4.80e-10 1.82e-04 7.10e-04 1.53e-03 2.44e-03 3.16e-03 3.40e-03 3.06e-03 2.32e-03 1.49e-03 8.18e-04 #&gt; 10,10 10,11 10,12 10,13 10,14 10,15 10,16 10,17 10,18 10,19 10,20 #&gt; 3.91e-04 1.65e-04 6.16e-05 2.07e-05 6.32e-06 1.76e-06 4.51e-07 1.07e-07 2.35e-08 4.84e-09 1.14e-09 #&gt; 11,0 11,1 11,2 11,3 11,4 11,5 11,6 11,7 11,8 11,9 11,10 #&gt; 3.79e-04 1.48e-03 3.20e-03 5.10e-03 6.59e-03 7.09e-03 6.39e-03 4.84e-03 3.10e-03 1.71e-03 8.17e-04 #&gt; 11,11 11,12 11,13 11,14 11,15 11,16 11,17 11,18 11,19 11,20 12,0 #&gt; 3.44e-04 1.29e-04 4.33e-05 1.32e-05 3.68e-06 9.41e-07 2.23e-07 4.91e-08 1.01e-08 2.38e-09 6.87e-04 #&gt; 12,1 12,2 12,3 12,4 12,5 12,6 12,7 12,8 12,9 12,10 12,11 #&gt; 2.69e-03 5.80e-03 9.24e-03 1.19e-02 1.29e-02 1.16e-02 8.77e-03 5.62e-03 3.10e-03 1.48e-03 6.23e-04 #&gt; 12,12 12,13 12,14 12,15 12,16 12,17 12,18 12,19 12,20 13,0 13,1 #&gt; 2.33e-04 7.84e-05 2.39e-05 6.66e-06 1.71e-06 4.04e-07 8.91e-08 1.83e-08 4.31e-09 1.07e-03 4.17e-03 #&gt; 13,2 13,3 13,4 13,5 13,6 13,7 13,8 13,9 13,10 13,11 13,12 #&gt; 9.00e-03 1.43e-02 1.85e-02 2.00e-02 1.80e-02 1.36e-02 8.73e-03 4.80e-03 2.30e-03 9.66e-04 3.62e-04 #&gt; 13,13 13,14 13,15 13,16 13,17 13,18 13,19 13,20 14,0 14,1 14,2 #&gt; 1.22e-04 3.71e-05 1.03e-05 2.65e-06 6.27e-07 1.38e-07 2.84e-08 6.69e-09 1.40e-03 5.47e-03 1.18e-02 #&gt; 14,3 14,4 14,5 14,6 14,7 14,8 14,9 14,10 14,11 14,12 14,13 #&gt; 1.88e-02 2.43e-02 2.62e-02 2.36e-02 1.78e-02 1.14e-02 6.30e-03 3.01e-03 1.27e-03 4.74e-04 1.60e-04 #&gt; 14,14 14,15 14,16 14,17 14,18 14,19 14,20 15,0 15,1 15,2 15,3 #&gt; 4.87e-05 1.36e-05 3.47e-06 8.22e-07 1.81e-07 3.73e-08 8.77e-09 1.53e-03 5.99e-03 1.29e-02 2.06e-02 #&gt; 15,4 15,5 15,6 15,7 15,8 15,9 15,10 15,11 15,12 15,13 15,14 #&gt; 2.66e-02 2.87e-02 2.58e-02 1.96e-02 1.25e-02 6.90e-03 3.30e-03 1.39e-03 5.20e-04 1.75e-04 5.33e-05 #&gt; 15,15 15,16 15,17 15,18 15,19 15,20 16,0 16,1 16,2 16,3 16,4 #&gt; 1.49e-05 3.80e-06 9.01e-07 1.99e-07 4.09e-08 9.61e-09 1.40e-03 5.47e-03 1.18e-02 1.88e-02 2.43e-02 #&gt; 16,5 16,6 16,7 16,8 16,9 16,10 16,11 16,12 16,13 16,14 16,15 #&gt; 2.62e-02 2.36e-02 1.78e-02 1.14e-02 6.30e-03 3.01e-03 1.27e-03 4.74e-04 1.60e-04 4.87e-05 1.36e-05 #&gt; 16,16 16,17 16,18 16,19 16,20 17,0 17,1 17,2 17,3 17,4 17,5 #&gt; 3.47e-06 8.22e-07 1.81e-07 3.73e-08 8.77e-09 1.07e-03 4.17e-03 9.00e-03 1.43e-02 1.85e-02 2.00e-02 #&gt; 17,6 17,7 17,8 17,9 17,10 17,11 17,12 17,13 17,14 17,15 17,16 #&gt; 1.80e-02 1.36e-02 8.73e-03 4.80e-03 2.30e-03 9.66e-04 3.62e-04 1.22e-04 3.71e-05 1.03e-05 2.65e-06 #&gt; 17,17 17,18 17,19 17,20 18,0 18,1 18,2 18,3 18,4 18,5 18,6 #&gt; 6.27e-07 1.38e-07 2.84e-08 6.69e-09 6.87e-04 2.69e-03 5.80e-03 9.24e-03 1.19e-02 1.29e-02 1.16e-02 #&gt; 18,7 18,8 18,9 18,10 18,11 18,12 18,13 18,14 18,15 18,16 18,17 #&gt; 8.77e-03 5.62e-03 3.10e-03 1.48e-03 6.23e-04 2.33e-04 7.84e-05 2.39e-05 6.66e-06 1.71e-06 4.04e-07 #&gt; 18,18 18,19 18,20 19,0 19,1 19,2 19,3 19,4 19,5 19,6 19,7 #&gt; 8.91e-08 1.83e-08 4.31e-09 3.79e-04 1.48e-03 3.20e-03 5.10e-03 6.59e-03 7.09e-03 6.39e-03 4.84e-03 #&gt; 19,8 19,9 19,10 19,11 19,12 19,13 19,14 19,15 19,16 19,17 19,18 #&gt; 3.10e-03 1.71e-03 8.17e-04 3.44e-04 1.29e-04 4.33e-05 1.32e-05 3.68e-06 9.41e-07 2.23e-07 4.91e-08 #&gt; 19,19 19,20 20,0 20,1 20,2 20,3 20,4 20,5 20,6 20,7 20,8 #&gt; 1.01e-08 2.38e-09 3.01e-04 1.17e-03 2.54e-03 4.04e-03 5.22e-03 5.62e-03 5.06e-03 3.83e-03 2.46e-03 #&gt; 20,9 20,10 20,11 20,12 20,13 20,14 20,15 20,16 20,17 20,18 20,19 #&gt; 1.35e-03 6.47e-04 2.72e-04 1.02e-04 3.43e-05 1.05e-05 2.91e-06 7.46e-07 1.77e-07 3.89e-08 8.01e-09 #&gt; 20,20 #&gt; 1.88e-09 sum(mdp$getActionInfo(&quot;20,20&quot;)$&quot;0&quot;$pr) #&gt; [1] 1 Close Solution × Hint mdp &lt;- MDPClass$new() # initialize mdp object states &lt;- expand_grid(x = 0:20, y = 0:20) %&gt;% mutate (state = str_c(x,&quot;,&quot;,y)) %&gt;% pull(state) mdp$addStateSpace(states) # add states (states are keys in a hash and are always converted to strings) for (s in mdp$getStateKeys()) { # add actions for each state (only the key of the action) x &lt;- str_split(s, &quot;,&quot;, simplify = T) y &lt;- as.numeric(x[2]) x &lt;- as.numeric(x[1]) ___ mdp$addActionSpace(s, a) } # check some of the keys mdp$getActionKeys(&quot;6,7&quot;) mdp$getActionKeys(&quot;0,3&quot;) mdp$getActionKeys(&quot;0,0&quot;) mdp$getActionKeys(&quot;20,20&quot;) mdp$getStateKeys() # Add trans pr and expected reward to the actions. This may take some time!! states &lt;- expand_grid(x = 0:20, y = 0:20) %&gt;% mutate (state = str_c(x,&quot;,&quot;,y), pr = 0) for (s in mdp$getStateKeys()) { for (aS in mdp$getActionKeys(s)) { x &lt;- str_split(s, &quot;,&quot;, simplify = T) y &lt;- as.numeric(x[2]) x &lt;- as.numeric(x[1]) a &lt;- as.numeric(aS) xBar &lt;- x-a yBar &lt;- y+a ___ mdp$addAction(s, aS, r = reward(x, y, a), pr = transPr) } } # check some of the keys mdp$getActionInfo(&quot;20,20&quot;) sum(mdp$getActionInfo(&quot;20,20&quot;)$&quot;0&quot;$pr) mdp$getActionInfo(&quot;20,0&quot;) sum(mdp$getActionInfo(&quot;20,20&quot;)$&quot;0&quot;$pr) Close Hint Build the model in R. × Solution mdp$policyIte(gamma = 0.5, theta = 0.9) df &lt;- left_join(mdp$getStateValues(), mdp$getPolicy(), by = &quot;state&quot;) %&gt;% select(-pr) %&gt;% separate(state, into = c(&quot;x&quot;, &quot;y&quot;), sep = &quot;,&quot;, remove = F, convert = T) %&gt;% mutate(a = as.numeric(action)) df %&gt;% filter(state %in% c(&quot;1,15&quot;, &quot;10,3&quot;)) #&gt; # A tibble: 2 × 6 #&gt; state x y v action a #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1,15 1 15 127. -4 -4 #&gt; 2 10,3 10 3 126. 3 3 ggplot(df, aes(x = y, y = x, label = a, col = factor(a))) + geom_label() + scale_fill_brewer(palette = &quot;Set2&quot;) + labs(title = str_c(&quot;Optimal policy for gamma = 0.9&quot;)) + theme(legend.position = &quot;none&quot;) The threshold value affect the precision of the state-value. Here values with a difference below 0.9 is considered as the same. Close Solution Solve the problem using policy iteration with a discount rate \\(\\gamma = 0.5\\) and threshold parameter \\(\\theta = 0.9\\). What is the optimal action in state \\((1,15)\\)? What is the expected total discounted reward of being in state \\((10,3)\\)? How do theta affect the state-values? Make a plot of the optimal policy with \\(x\\) on the y-axis and \\(y\\) on the x-axis, plotting the action. × Solution mdp$valueIte(gamma = 0.5, theta = 0.9) df1 &lt;- left_join(mdp$getStateValues(), mdp$getPolicy(), by = &quot;state&quot;) %&gt;% select(-pr) %&gt;% separate(state, into = c(&quot;x&quot;, &quot;y&quot;), sep = &quot;,&quot;, remove = F, convert = T) %&gt;% mutate(a = as.numeric(action)) all(abs(df$v - df1$v) &lt;= 0.9) # check if state values af close to each other (should return TRUE) #&gt; [1] TRUE any(df$action != df1$action) # there may be different policies giving the same approx. state-value #&gt; [1] TRUE Close Solution Solve the problem using value iteration. Check if the policy and state-values are the same as in Question 1. If not why could this be okay? × Solution mdp$policyIte(gamma = 0.9, theta = 0.9) df &lt;- left_join(mdp$getStateValues(), mdp$getPolicy(), by = &quot;state&quot;) %&gt;% select(-pr) %&gt;% separate(state, into = c(&quot;x&quot;, &quot;y&quot;), sep = &quot;,&quot;, remove = F, convert = T) %&gt;% mutate(a = as.numeric(action)) df #&gt; # A tibble: 441 × 6 #&gt; state x y v action a #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0,0 0 0 531. 0 0 #&gt; 2 0,1 0 1 541. 0 0 #&gt; 3 0,10 0 10 622. -3 -3 #&gt; 4 0,11 0 11 629. -3 -3 #&gt; 5 0,12 0 12 634. -3 -3 #&gt; 6 0,13 0 13 639. -4 -4 #&gt; 7 0,14 0 14 643. -4 -4 #&gt; 8 0,15 0 15 647. -4 -4 #&gt; 9 0,16 0 16 650. -5 -5 #&gt; 10 0,17 0 17 654. -5 -5 #&gt; # … with 431 more rows #&gt; # ℹ Use `print(n = ...)` to see more rows ggplot(df, aes(x = y, y = x, label = a, col = factor(a))) + geom_label() + scale_fill_brewer(palette = &quot;Set2&quot;) + labs(title = str_c(&quot;Optimal policy for gamma = 0.9&quot;)) + theme(legend.position = &quot;none&quot;) A higher discount rate result in higher discounted rewards since look further into the future. Close Solution Solve the problem using policy iteration with a discount rate \\(\\gamma = 0.9\\) and threshold parameter \\(\\theta = 0.9\\). Why are the state-values higher now? References "],["mod-mc.html", "Module 6 Monte Carlo methods for prediction and control 6.1 Learning outcomes 6.2 Textbook readings 6.3 MC prediction (evaluation) 6.4 MC control (improvement) 6.5 Off-policy MC prediction 6.6 Off-policy control (improvement) 6.7 Summary 6.8 Exercises", " Module 6 Monte Carlo methods for prediction and control The term “Monte Carlo” (MC) is often used for an estimation method which involves a random component. MC methods of RL learn state and action values by sampling and averaging returns. MC do not use dynamics where we estimate the value in the current state using the value in the next state (like in dynamic programming). Instead the MC methods estimate the values by considering different sample-paths (state, action and reward realizations). Compared to a Markov decision process, MC methods are model-free since they not require full knowledge of the transition probabilities and rewards (a model of the environment) instead MC methods learn the value function directly from experience. Often though, the sample-path is generated using simulation, i.e. some knowledge about the environment is given, but it is only used to generate sample transitions. For instance, consider an MDP model for the game Blackjack. Here calculating all the transition probabilities may be tedious and error-prone in terms of coding and numerical precision. Instead we can simulate a game (a sample-path) and use the simulations to evaluate/predict the value function of a policy and then use control to find a good policy. That is, we still use a generalised policy iteration framework, but instead of computing the value function using the MDP model a priori, we learn it from experience. MC methods can be used for processes with episodes, i.e. where there is a terminal state. This reduces the length of the sample-path and the value of the states visited on the path can be updated based on the reward received. 6.1 Learning outcomes By the end of this module, you are expected to: Identify the difference between model-based and model-free RL. Identify problems that can be solved using Monte-Carlo methods. Describe how MC methods can be used to estimate value functions from sample data. Do MC prediction to estimate the value function for a given policy. Explain why it is important to maintain exploration in MC algorithms. Do policy improvement (control) using MC in a generalized policy improvement algorithm. Compare different ways of exploring the state-action space. Argue why off-policy learning can help deal with the exploration problem. Use importance sampling to estimate the expected value of a target distribution using samples from a different distribution. Use importance sampling in off-policy learning to predict the value-function of a target policy. Explain how to modify the MC prediction and improvement algorithm for off-policy learning. The learning outcomes relate to the overall learning goals number 3, 4, 9 and 12 of the course. 6.2 Textbook readings For this week, you will need to read Chapter 5-5.7 in Sutton and Barto (2018). Read it before continuing this module. A summary of the book notation can be seen here. Slides for this module can be seen here. You do not have to look at them before the lecture! 6.3 MC prediction (evaluation) Given a policy \\(\\pi\\), we want to estimate the state-value function. Recall that the state value function is \\[ v_\\pi(s) = \\mathbb{E}_\\pi[G_t | S_t = s]. \\] where the return is \\[ G_t = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\cdots = \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} = R_{t+1} + \\gamma G_{t+1} \\] Now given policy \\(\\pi\\) and a sample-path (episode) \\(S_0, A_0, R_1, S_1, A_1, \\ldots, S_{T-1}, A_{T-1}, R_T\\) ending in the terminal state at time \\(T\\), we can calculate the realized return for each state in the sample-path. Each time we have a new sample-path a new realized return for the states is given and the average for the returns in a state is an estimate of the state-value. With enough observations, the sample average converges to the true state-value under the policy \\(\\pi\\). Given a policy \\(\\pi\\) and a set of sample-paths, there are two ways to estimate the state values \\(v_\\pi(s)\\): First visit MC: average returns from first visit to state \\(s\\). Every visit MC: average returns following every visit to state \\(s\\). First visit MC generates iid estimates of \\(v_\\pi(s)\\) with finite variance, so the sequence of estimates converges to the expected value by the law of large numbers as the number of observations grow. Every visit MC does not generate independent estimates, but still converges. An algorithm for first visit MC is given in Figure 6.1. The state-value estimate is stored in a vector \\(V\\) and the returns for each state in a list. Given a sample-path we add the return to the states on the path by scanning the path backwards and updating \\(G\\). Note since the algorithm considers first visit MC, a check of occurrence of the state earlier in the path done. If this check is dropped, we have a every visit MC algorithm instead. Moreover, the computation needed to update the state-value does not depend on the size of the process/MDP but only of the length of the sample-path. Figure 6.1: MC policy prediction (Sutton and Barto 2018). The algorithm maintains a list of all returns for each state which may require a lot of memory. Instead as incremental update of \\(V\\) can be done. Adapting Eq. (2.1), we have that the sample average can be updated using: \\[ V(s) \\leftarrow V(s) + \\frac{1}{n} \\left[G - V(s)\\right]. \\] where \\(n\\) denote the number of realized returns found for state \\(s\\) and \\(G\\) the current realized return. The state-value vector must be initialized to zero and a vector counting the number of returns found for each state must be stored. 6.3.1 MC prediction of action-values With a model of the environment we only need to estimate the state-value function, since it is easy to determine the policy from the state-values using the Bellman optimality equations (4.3). However, if we do not know the expected reward and transition probabilities state values are not enough. In that case, it is useful to estimate action-values since the optimal policy can be found using \\(q_*\\) (see Eq. (4.3)). To find \\(q_*\\), we first need to predict action-values for a policy \\(\\pi\\). This is essentially the same as for state-values, only we now talk about state-action pairs being visited, i.e. taking action \\(a\\) in state \\(s\\) instead. If \\(\\pi\\) is deterministic, then we will only estimate the values of actions that \\(\\pi\\) dictates. Therefore some exploration are needed in order to have estimates for all action-values. Two possibilities are: Make \\(\\pi\\) stochastic, e.g. \\(\\varepsilon\\)-soft that that have non-zero probability of selecting each state-action pair. Use exploring starts, which specifies that ever state-action pair has non-zero probability of being selected as the starting state of an sample-path. 6.4 MC control (improvement) We are now ready to formulate a generalized policy iteration (GPI) algorithm using MC to predict the action-values \\(q(s,a)\\). Policy improvement is done by selecting the next policy greedy with respect to the action-value function: \\[ \\pi(s) = \\arg\\max_a q(s, a). \\] That is, we generate a sequence of policies and action-value functions \\[\\pi_0 \\xrightarrow[]{E} q_{\\pi_0} \\xrightarrow[]{I} \\pi_1 \\xrightarrow[]{E} q_{\\pi_1} \\xrightarrow[]{I} \\pi_2 \\xrightarrow[]{E} q_{\\pi_2} \\xrightarrow[]{I} \\ldots \\xrightarrow[]{I} \\pi_* \\xrightarrow[]{E} q_{*}.\\] Hence the policy improvement theorem applies for all \\(s \\in \\mathcal{S}\\): \\[\\begin{align} q_{\\pi_k}(s, a=\\pi_{k+1}(s)) &amp;= q_{\\pi_k}(s, \\arg\\max_a q_{\\pi_k}(s, a)) \\\\ &amp;= \\max_a q_{\\pi_k}(s, a) \\\\ &amp;\\geq q_{\\pi_k}(s, \\pi_k(s))\\\\ &amp;= v_{\\pi_k}(s) \\end{align}\\] That is, \\(\\pi_{k+1}\\) is better than \\(\\pi_k\\) or optimal. It is important to understand the major difference between model-based GPI (remember that a model means the transition probability matrix and reward distribution are known) and model-free GPI. We cannot simply use a 100% greedy strategy all the time, since all our action-values are estimates. As such, we now need to introduce an element of exploration into our algorithm to estimate the action-values. For convergence to the optimal policy a model-free GPI algorithm must satisfy: Infinite exploration: all state-action \\((s,a)\\) pairs should be explored infinitely many times as the number of iterations go to infinity (in the limit), i.e. as the number of iterations \\(k\\) goes to infinity the number of visits \\(n_k\\) does too \\[\\lim_{k\\rightarrow\\infty} n_k(s, a) = \\infty.\\] Greedy in the limit: while we maintain infinite exploration, we do eventually need to converge to the optimal policy: \\[\\lim_{k\\rightarrow\\infty} \\pi_k(a|s) = 1 \\text{ for } a = \\arg\\max_a q(s, a).\\] 6.4.1 GPI with exploring starts An algorithm using exploring starts and first visit MC is given in Figure 6.2. It satisfies the convergence properties and and incremental implementation can be used to update \\(Q\\). Note that to predict the action-values for a policy, we in general need a large number of sample-paths. However, much like we did with value iteration, we do not need to fully evaluate the value function for a given policy. Instead we can merely move the value toward the correct value and then switch to policy improvement thereafter. To stop the algorithm from having infinitely many sample-paths we may stop the algorithm once the \\(q_{\\pi_k}\\) stop moving within a certain error. Figure 6.2: GPI using MC policy prediction with exploring starts (Sutton and Barto 2018). 6.4.2 GPI using \\(\\epsilon\\)-soft policies Note by using exploring starts in Algorithm 6.2, the ‘infinite exploration’ convergence assumption is satisfied. However exploring starts may be hard to use in practice. Another approach to ensure infinite exploration is to use a soft policy, i.e. assign a non-zero probability to each possible action in a state. An on-policy algorithm using \\(\\epsilon\\)-greedy policies is given in Figure 6.3. Here we put probability \\(1 - \\varepsilon + \\frac{\\varepsilon}{|\\mathcal{A}(s)|}\\) on the maximal action and \\(\\frac{\\varepsilon}{|\\mathcal{A}(s)|}\\) on each of the others. Note using \\(\\epsilon\\)-greedy policy selection will improve the current policy; otherwise we have found best policy amongst the \\(\\epsilon\\)-soft policies. If we want to find the optimal policy we have to ensure the ‘greedy in the limit’ convergence assumption. This can be done by decreasing \\(\\epsilon\\) as the number of iterations increase (e.g. \\(\\epsilon = 1/k\\)). Figure 6.3: On-policy GPI using MC policy prediction (Sutton and Barto 2018). An incremental approach for updating \\(Q\\) can be used by storing the number of times \\(n_a\\), action \\(a\\) has been visited in state \\(s\\) and then update \\(Q(s,a)\\) using \\[Q_{n+1} = Q_n + \\frac{1}{n_a}(G-Q_n),\\] where \\(Q_n\\) denote the previous value. Finally, the algorithm in Figure 6.3 do not mention how to find the start state of an episode. In general all states that we want to approximate must be used as start state. 6.4.3 GPI using upper-confience bound action selection GPI using exploring starts or \\(\\epsilon\\)-soft policies may be slow. Often speed-ups can be done by using e.g. upper-confidence bounds (UCB) for action selection. Recall from Module 2 that UCB select actions according to their potential for actually being optimal, taking into account both how close their estimates are to being maximal and the uncertainty in those estimates. That is, the next action \\(a&#39;\\) given a state \\(s\\) is selected using: \\[ a&#39; = \\arg\\max_a \\left(Q(s,a) + c\\sqrt{\\frac{\\ln n_s}{n_a}}\\right), \\] where \\(n_s\\) denote the number of times state \\(s\\) has been visited and \\(n_a\\) denote the number of times action \\(a\\) has been visited (both numbers must be stored). The parameter \\(c&gt;0\\) controls the degree of exploration. Higher \\(c\\) results in more weight on the uncertainty. However, one problem with UCB is that it is hard to decide on which value of \\(c\\) to use in advance. 6.4.4 Example - Seasonal inventory and sales planning In the following example we try to implement an algorithm that uses generalized policy iteration with every-visit estimation using epsilon-greedy action selection. We consider seasonal product such as garden furnitures. Assume that the maximum inventory level is \\(Q\\) items, i.e. we can buy at most \\(Q\\) items at the start of the season for a price of $14. The product can be sold for at most \\(T\\) weeks and at the end of the period (week \\(T\\)), the remaining inventory is sold to an outlet store for $5 per item. The demand depends on the sales price which based on historic observations is assumed in the interval \\([10,25].\\) In general a higher sales price result in a lower demand. Moreover, in the first half part of the season the demand is on average 10% higher given a fixed sales price compared to the last half part of the season. Historic observed demands can be seen in Figure 6.4. Figure 6.4: Observed demands given price (scaled based on number of observations). Let \\(s = (q,t)\\) denote the state of the system in the start of a week, where \\(q\\) is the inventory and \\(t\\) the week number. Then the state space is \\[\\mathcal{S} = \\{ s = (q,t) | 1 \\leq q \\leq Q, 1 \\leq t \\leq T \\} \\cup \\{ 0 \\},\\] where state \\(s = 0\\) denote the terminal state (inventory empty). Let us limit us to actions \\[\\mathcal{A}(q,t) = \\{ 10,15,20,25 \\}, \\mathcal{A}(0) = \\{ d \\}, \\] where action \\(a\\) denote the price and \\(d\\) denote the dummy action with deterministic transition to state \\(0\\). The inventory dynamics for transitions not to the terminal state are \\[t&#39; = t + 1,\\] \\[q&#39; = q - min(q, D),\\] where \\(D\\) denote the demand. Moreover, if \\(t = T\\) or \\(q&#39; = 0\\), then a transition to the terminal state happens. For \\(t=1\\) the reward of an state \\((q,t)\\) is sales price times the number of sold items minus the purchase cost. For \\(1&lt;t&lt;T\\) the reward is sales price times the number of sold (we assume an inventory cost of zero), while for \\(t=T\\) the reward is the scrap price times the inventory. Let us define a R6 class representing the environment for this problem library(R6) library(hash) library(tidyverse) #&#39; R6 Class representing the RL environment for the problem RLEnvSeasonal &lt;- R6Class(&quot;RLEnvSeasonal&quot;, public = list( #&#39; @field maxInv Max inventory level. maxInv = NA, #&#39; @field maxT Max number of weeks to sell product. maxT = NA, #&#39; @field scrapPrice Scrap price per item in week maxT. scrapPrice = NA, #&#39; @field purchasePrice Purchase price per item. purchasePrice = NA, #&#39; @field prices Possible sales prices per item. prices = NA, #&#39; @description Create an object (when call new). #&#39; @param maxInv Max inventory level. #&#39; @param maxT Max number of weeks to sell product. #&#39; @param scrapPrice Scrap price per item in week maxT. #&#39; @param purchasePrice Purchase price per item. #&#39; @return The new object. initialize = function(maxInv, maxT, scrapPrice, purchasePrice, prices) { self$maxInv &lt;- maxInv self$maxT &lt;- maxT self$scrapPrice &lt;- scrapPrice self$purchasePrice &lt;- purchasePrice self$prices &lt;- prices }, #&#39; @description Return all states (keys). getStates = function() { states &lt;- expand_grid(l = 1:env$maxInv, t = 1:env$maxT) %&gt;% mutate(s = str_c(l, &quot;,&quot;, t)) %&gt;% pull(s) states &lt;- c(states, &quot;0&quot;) return(states) }, #&#39; @description Return all actions (keys) for a state. #&#39; @param s State considered. getActions = function(s) { if (s == &quot;0&quot;) return(&quot;dummy&quot;) q &lt;- str_split(s, &quot;,&quot;, simplify = T) t &lt;- as.numeric(q[2]) q &lt;- as.numeric(q[1]) if (t == self$maxT) return(str_c(self$scrapPrice)) return(str_c(self$prices)) }, #&#39; @description Stochastic demand sample. #&#39; @param price Sales price. #&#39; @param t Week. getDemand = function(price, t) { l1 = matrix(c(10,20, 12,12), ncol = 2, byrow = T) # points (price, demand) for first line l2 = matrix(c(12,12, 15,10), ncol = 2, byrow = T) l3 = matrix(c(15,10), ncol = 2, byrow = T) if (price &lt;= max(l1[1,1],l1[2,1])) { a &lt;- (l1[1,2]-l1[2,2])/(l1[1,1]-l1[2,1]) b &lt;- l1[1,2] - a * l1[1,1] d &lt;- a * price + b dS &lt;- d * runif(1, 0.75, 1.25) } else if (price &gt;= min(l2[1,1],l2[2,1]) &amp; price &lt;= max(l2[1,1],l2[2,1])) { a &lt;- (l2[1,2]-l2[2,2])/(l2[1,1]-l2[2,1]) b &lt;- l2[1,2] - a * l2[1,1] d &lt;- a * price + b dS &lt;- d * runif(1, 0.75, 1.25) } else if (price &gt;= l3[1,1]) { d &lt;- -4*log(price - l3[1,1] + 1) + l3[1,2] dS &lt;- d * runif(1, 1, 2) } if (t &lt;= self$maxT/2) { dS &lt;- runif(1, 1, 1.2) * dS } # if (stochastic) return(round(dS)) else return(round(d)) return(round(dS)) }, #&#39; @description Returns the simulated transition probabilities and reward. getTransPrR = function(s, a, runs = 10000) { q &lt;- str_split(s, &quot;,&quot;, simplify = T) t &lt;- as.numeric(q[2]) q &lt;- as.numeric(q[1]) if (q == 0) { return(list(pr = c(&quot;0&quot; = 1), r = 0)) } if (t == env$maxT) { return(list(pr = c(&quot;0&quot; = 1), r = env$scrapPrice * q)) } a &lt;- as.numeric(a) df &lt;- tibble(sim = 1:runs) %&gt;% rowwise() %&gt;% mutate(demand = self$getDemand(a, t)) %&gt;% ungroup() %&gt;% mutate(qN = q - pmin(q, demand), reward = a * pmin(q, demand)) reward &lt;- mean(df$reward) if (t == 1) reward &lt;- reward - q * self$purchasePrice df &lt;- df %&gt;% count(qN) %&gt;% mutate(pr = n/sum(n), qN = if_else(qN == 0, &quot;0&quot;, str_c(qN, &quot;,&quot;, t+1))) pr &lt;- df %&gt;% pull(pr, name = qN) return(list(pr = pr, r = reward)) }, #&#39; @description Returns an episode as a tibble with cols s, a, r (last col the terminal reward). #&#39; @param agent The agent that holds the model with current policy stored in pi. getEpisodePi = function(agent, startState) { if (startState == &quot;0&quot;) { return(tibble::tibble(!!!c(&quot;s&quot;, &quot;a&quot;, &quot;r&quot;), .rows = 0)) # empty tibble } q &lt;- str_split(startState, &quot;,&quot;, simplify = T) t &lt;- as.numeric(q[2]) q &lt;- as.numeric(q[1]) df &lt;- tibble(s = rep(NA_character_, 100 * self$maxInv), a = NA_character_, r = NA_real_) # a tibble with more rows than used for (i in 1:nrow(df)) { if (q == 0) { df &lt;- df[1:(i-1),] # remove unused rows break # have reached terminal state } s &lt;- str_c(q, &quot;,&quot;, t) a &lt;- agent$getActionPi(s) if (t == self$maxT) { # sell remaining r &lt;- self$scrapPrice * q q &lt;- 0 # new q value } else { price &lt;- as.numeric(a) d &lt;- self$getDemand(price, t) if (t == 1) { r &lt;- price * min(q, d) - q * self$purchasePrice } else { r &lt;- price * min(q, d) } q &lt;- q - min(q, d) # new q value t &lt;- t + 1 # new t value } df$s[i] &lt;- s df$a[i] &lt;- a df$r[i] &lt;- r } return(df) }, #&#39; @description Returns an episode as a tibble with cols s, a, r (last col the terminal reward). #&#39; @param agent The agent that holds the model with current policy. getEpisode = function(agent, startState, coeff = 1, eps = 0.1) { if (startState == &quot;0&quot;) { return(tibble::tibble(!!!c(&quot;s&quot;, &quot;a&quot;, &quot;r&quot;), .rows = 0)) # empty tibble } q &lt;- str_split(startState, &quot;,&quot;, simplify = T) t &lt;- as.numeric(q[2]) q &lt;- as.numeric(q[1]) df &lt;- tibble(s = rep(NA_character_, 100 * self$maxInv), a = NA_character_, r = NA_real_) # a tibble with more rows than used # q &lt;- sample(1:self$maxInv, 1) # pick start inventory random # q &lt;- 1 # t &lt;- 1 for (i in 1:nrow(df)) { if (q == 0) { df &lt;- df[1:(i-1),] # remove unused rows break # have reached terminal state } s &lt;- str_c(q, &quot;,&quot;, t) if (t == self$maxT) { # sell remaining a &lt;- agent$getActionUCB(s, coeff) r &lt;- self$scrapPrice * q q &lt;- 0 # new q value } else { # actions &lt;- names(agent$model[[s]]$pi) # a &lt;- actions[sample(1:length(actions), 1, prob = agent$model[[s]]$pi)] # a &lt;- agent$getActionUCB(s, coeff) # epsN &lt;- eps * (1/(agent$model[[s]]$n+1))^0.28 epsN &lt;- eps a &lt;- agent$getActionEG(s, epsN) # cat(a, &quot; &quot;) price &lt;- as.numeric(a) d &lt;- self$getDemand(price, t) if (t == 1) { r &lt;- price * min(q, d) - q * self$purchasePrice } else { r &lt;- price * min(q, d) } q &lt;- q - min(q, d) # new q value t &lt;- t + 1 # new t value } df$s[i] &lt;- s df$a[i] &lt;- a df$r[i] &lt;- r } return(df) } ) ) Note that we define methods for getting the state and actions, an episode and the demand. Moreover, for this problem we many also use simulation to get the transition probabilities and the expected reward of a state-action pair (see method getTransPrR). That is, we may solve the problem using an MDP first and compare. Let us define the environment: set.seed(876) prices &lt;- c(10, 15, 20, 25) env &lt;- RLEnvSeasonal$new(maxInv = 100, maxT = 15, scrapPrice = 5, purchasePrice = 14, prices) First let us try to find the optimal policy using an MDP: ## Build the MDP mdp &lt;- MDPClass$new() # initialize mdp object mdp$addStateSpace(env$getStates()) # add states for (s in mdp$getStateKeys()) { # add actions mdp$addActionSpace(s, env$getActions(s)) } for (s in mdp$getStateKeys()) { # add trans pr and reward (this will take some time!) for (a in mdp$getActionKeys(s)) { lst &lt;- env$getTransPrR(s, a, runs = 1000) mdp$addAction(s, a, r = lst$r, pr = lst$pr) } } ## Solve the MDP mdp$policyIte(gamma = 1) # mdp$valueIte(gamma = 1) dfMDP &lt;- left_join(mdp$getStateValues(), mdp$getPolicy(), by = &quot;state&quot;) %&gt;% select(-pr) %&gt;% separate(state, into = c(&quot;inv&quot;, &quot;t&quot;), remove = F, convert = T) Let us plot the optimal policy (see Figure 6.5): dfMDP %&gt;% filter(!is.na(t)) %&gt;% ggplot(aes(x = t, y = inv, col = action)) + geom_point() Figure 6.5: Optimal policy for the MDP. Note in general we change the price based on a diagonal line running from upper-left to lower-right. Some time two prices oscillate given a time due to state-values close to each other. The best inventory level to order can be found by searching among the state-values at time one. res &lt;- dfMDP %&gt;% filter(t == 1) %&gt;% arrange(desc(v)) %&gt;% print() #&gt; # A tibble: 100 × 5 #&gt; state inv t v action #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 64,1 64 1 358. 20 #&gt; 2 62,1 62 1 358. 20 #&gt; 3 63,1 63 1 358. 20 #&gt; 4 61,1 61 1 357. 20 #&gt; 5 65,1 65 1 357. 20 #&gt; 6 66,1 66 1 355. 20 #&gt; 7 60,1 60 1 355. 20 #&gt; 8 67,1 67 1 353. 20 #&gt; 9 59,1 59 1 352. 20 #&gt; 10 68,1 68 1 351. 20 #&gt; # … with 90 more rows #&gt; # ℹ Use `print(n = ...)` to see more rows This is approx around 64 items. If ordering 100 items we would loose: res$v[1] - dfMDP %&gt;% filter(state == &quot;100,1&quot;) %&gt;% pull(v) #&gt; 64,1.20 #&gt; 91.3 Let us now try to use RL and MC to approximate the best policy. First, we define a generic RL agent: library(R6) library(hash) library(tidyverse) ## Generic RL agent for tabular data (R6 class) RLAgent &lt;- R6Class(&quot;RLAgent&quot;, public = list( #&#39; @field model The model is used to represent the information we have. The #&#39; model is represented using a hash list for the states. Each states contains #&#39; - A list with `actions` (a hash #&#39; list with actions). #&#39; - `pi` (a named vector with policy pr (only positive values). #&#39; - `piG` the greedy action (a string). #&#39; - `n` a visit counter #&#39; The `actions` hash list contains #&#39; - The action-values `q`. #&#39; - `n` a visit counter. model = NULL, #&#39; @description Create an object (when call new). initialize = function() { self$model &lt;- hash() return(invisible(NULL)) }, #&#39; @description Add state and action to the hash (only if not already added) #&#39; @param s State key/string. #&#39; @param a Action key/string. addStateAction = function(s, a) { if (!has.key(s, self$model)) addStates(s) if (!has.key(a, self$model[[s]]$actions)) self$model[[s]]$actions[[a]] &lt;- list(q = 0, n = 0) return(invisible(NULL)) }, #&#39; @description Add the states (keys) and define void policy and empty action hash. #&#39; @param states A vector of states (converted to strings). addStates = function(states) { keys &lt;- make.keys(states) self$model[keys] &lt;- list(pi = NA) # don&#39;t use pi = NULL since then won&#39;t be defined for (s in keys) { self$model[[s]]$v &lt;- NA self$model[[s]]$actions &lt;- hash() self$model[[s]]$n &lt;- 0 # counter visited } return(invisible(NULL)) }, #&#39; @description Add the actions to a state #&#39; @param s State (key). #&#39; @param actions A vector of actions (converted to strings). addActions = function(s, actions) { keys &lt;- make.keys(actions) for (a in keys) { self$addStateAction(s, a) } return(invisible(NULL)) }, #&#39; @description Add states and actions to the hash with initial values. If already exists nothing happens. #&#39; @param df A tibble with string columns `s` (states) and `a` (actions). addStatesAndActions = function(df) { for (i in 1:nrow(df)) { self$addStateAction(df$s[i], df$a[i]) } return(invisible(NULL)) }, #&#39; @description Set the action-values for all actions. #&#39; @param value The value. setActionValue = function(value = 0) { for (s in keys(self$model)) { for (a in keys(self$model[[s]]$actions)) { self$model[[s]]$actions[[a]]$q = value } } return(invisible(NULL)) }, #&#39; @description Set the state-value of states #&#39; @param states A vector of states. #&#39; @param value The value. setStateValue = function(states = keys(self$model), value = 0) { for (s in states) { self$model[[s]]$v &lt;- value } return(invisible(NULL)) }, #&#39; @description Set the action visit counter values for all actions. #&#39; @param ctrValue Counter value. setActionCtrValue = function(ctrValue = 0) { for (s in keys(self$model)) { for (a in keys(self$model[[s]]$actions)) { self$model[[s]]$actions[[a]]$n = ctrValue } } return(invisible(NULL)) }, #&#39; @description Set the action-values for a single action (including the counter values). #&#39; @param value The value. #&#39; @param ctrValue Counter value. setActionValueSingle = function(value = 0, ctrValue = 0, s, a) { self$model[[s]]$actions[[a]]$q = value self$model[[s]]$actions[[a]]$n = ctrValue return(invisible(NULL)) }, #&#39; @description Set the policy to a random epsilon-greedy policy. #&#39; @param eps Epsilon used in epsilon-greedy policy. setRandomEpsGreedyPolicy = function(eps) { states &lt;- keys(self$model) for (s in states) { actions &lt;- self$getActionKeys(s) self$model[[s]]$pi &lt;- rep(eps/length(actions), length(actions)) names(self$model[[s]]$pi) &lt;- actions piG &lt;- sample(self$getActionKeys(s), 1) self$model[[s]]$pi[piG] &lt;- self$model[[s]]$pi[piG] + 1 - eps } return(invisible(NULL)) }, #&#39; @description Set the policy to the optimal epsilon-greedy policy #&#39; @param eps Epsilon used in epsilon-greedy policy. #&#39; @param states States under consideration. setEpsGreedyPolicy = function(eps, states) { for (s in states) { actions &lt;- self$getActionKeys(s) self$model[[s]]$pi &lt;- rep(eps/length(actions), length(actions)) names(self$model[[s]]$pi) &lt;- actions idx &lt;- nnet::which.is.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose among max values at random # idx &lt;- which.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose first max # self$model[[s]]$piG &lt;- actions[idx] self$model[[s]]$pi[idx] &lt;- self$model[[s]]$pi[idx] + 1 - eps } return(invisible(NULL)) }, #&#39; @description Set the greedy policy (stored in piG) based on action-values. #&#39; @param states States under consideration. setGreedyPolicy = function(states = self$getStateKeys()) { for (s in states) { actions &lt;- self$getActionKeys(s) idx &lt;- nnet::which.is.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose among max values at random # idx &lt;- which.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose first max self$model[[s]]$piG &lt;- actions[idx] } return(invisible(NULL)) }, #&#39; @description Set the policy to the named vector pi for a set of states #&#39; @param states States under consideration. #&#39; @param pi A named vector with policy pr (only psitive values). setPolicy = function(states, pi) { for (s in states) { self$model[[s]]$pi &lt;- pi } return(invisible(NULL)) }, #&#39; @description Set the state visit counter values for all states. #&#39; @param ctrValue Counter value. setStateCtrValue = function(ctrValue = 0) { for (s in keys(self$model)) { self$model[[s]]$n = ctrValue } return(invisible(NULL)) }, #&#39; @description Return the state keys getStateKeys = function() { keys(self$model) }, #&#39; @description Return the state-value for a state and policy using the q/action-values #&#39; @param s A state. getStateValueQ = function(s) { pi &lt;- self$model[[s]]$pi # print(pi) val &lt;- 0 for (a in names(pi)) { val &lt;- val + pi[a] * self$model[[s]]$actions[[a]]$q # print(self$model[[s]]$actions[[a]]$q) } # print(val) return(val) }, #&#39; @description Return the state-values as a tibble #&#39; @param s A vector of state keys. getStateValues = function(s = keys(self$model)) { tibble(state = s) %&gt;% rowwise() %&gt;% mutate(v = self$model[[state]]$v) }, #&#39; @description Return the action keys #&#39; @param s The state considered. getActionKeys = function(s) { keys(self$model[[s]]$actions) }, #&#39; @description Return information about actions stored in a state #&#39; @param s The state considered. getActionInfo = function(s) { as.list(self$model[[s]]$actions) }, #&#39; @description Return the current policy as a tibble getPolicy = function(states = self$getStateKeys()) { map_dfr(states, .f = function(s) { list(state = s, action = names(self$model[[s]]$pi), pr = self$model[[s]]$pi) }) }, #&#39; @description Returns all action-values in a matrix (cols: actions, rows: states) getStateActionQMat = function() { states &lt;- keys(self$model) actions &lt;- unique(unlist(sapply(states, function(s) self$getActionKeys(s)))) m &lt;- matrix(NA, nrow = length(states), ncol = length(actions)) colnames(m) &lt;- actions rownames(m) &lt;- states for (s in states) { for (a in self$getActionKeys(s)) { m[s, a] &lt;- self$model[[s]]$actions[[a]]$q } } return(m) }, #&#39; @description Return the action-values as a tibble #&#39; @param states A vector of state keys. getActionValues = function(states = keys(self$model)) { map_dfr(states, .f = function(s) { list(state = s, action = keys(self$model[[s]]$actions), q = unlist(values(self$model[[s]]$actions)[&quot;q&quot;,]), n = unlist(values(self$model[[s]]$actions)[&quot;n&quot;,])) }) }, #&#39; @description Select next action using upper-confidence bound. Also update the visit counters for both state and selected action. #&#39; @return Action. getActionUCB = function(s, coeff = 1) { actions &lt;- self$getActionKeys(s) self$model[[s]]$n &lt;- self$model[[s]]$n + 1 # visit s qV &lt;- unlist(values(self$model[[s]]$actions)[&quot;q&quot;,]) nA &lt;- unlist(values(self$model[[s]]$actions)[&quot;n&quot;,]) nS &lt;- self$model[[s]]$n val &lt;- qV + coeff * sqrt(log(nS + 0.0001)/nA) idx &lt;- which.max(val) a &lt;- actions[idx] self$model[[s]]$actions[[a]]$n &lt;- self$model[[s]]$actions[[a]]$n + 1 # note there is a risk here if use every-visit for an episode then will update more than once implying slower convergence. return(a) }, #&#39; @description Select next action using epsilon-greedy policy based on action-values. Also update the visit counters for both state and selected action. #&#39; @return Action. getActionEG = function(s, eps) { self$model[[s]]$n &lt;- self$model[[s]]$n + 1 # visit s q &lt;- unlist(values(self$model[[s]]$actions)[&quot;q&quot;,]) actions &lt;- self$getActionKeys(s) pi &lt;- rep(eps/length(q), length(q)) idx &lt;- nnet::which.is.max(q) # choose among max values at random # idx &lt;- which.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose first max pi[idx] &lt;- pi[idx] + 1 - eps a &lt;- actions[sample(1:length(actions), 1, prob = pi)] self$model[[s]]$actions[[a]]$n &lt;- self$model[[s]]$actions[[a]]$n + 1 # note there is a risk here if use every-visit for an episode then will update more than once implying slower convergence. return(a) }, #&#39; @description Return and action sampled from the current policy pi. Also update the visit counters for both state and selected action. #&#39; @param s The state considered. getActionPi = function(s) { self$model[[s]]$n &lt;- self$model[[s]]$n + 1 # visit s pi &lt;- self$model[[s]]$pi actions &lt;- names(pi) a &lt;- sample(actions, 1, prob = pi) self$model[[s]]$actions[[a]]$n &lt;- self$model[[s]]$actions[[a]]$n + 1 # note there is a risk here if use every-visit for an episode then will update more than once implying slower convergence. return(a) }, # # getActionPi = function(s) { # pi &lt;- self$model[[s]]$pi # return(sample(names(pi), 1, prob = pi)) # }, #&#39; @description Policy evaluation using TD(0) #&#39; @param env The environment which must have a method `getTimeStepData(s,a)` that return a list with elements `r` (reward) and `sN` (next state). #&#39; @param gamma Discount rate. #&#39; @param alpha Step-size (use a fixed step-size). #&#39; @param maxE Maximum number of episodes generated. #&#39; @param maxEL Maximum episode length. #&#39; @param reset If true initialize all state-values to 0. #&#39; @param states Possible start states of each episode (one picked at random). #&#39; @param ... Further arguments passed to `getEpisode` e.g the coefficient used for upper-confidence bound action selection. policyEvalTD0 = function(env, gamma = 1, alpha = 0.1, maxE = 1000, maxEL = 10000, reset = TRUE, states = self$getStateKeys()) { if (reset) self$setStateValue(self$getStateKeys()) # set to 0 for (ite in 1:maxE) { s &lt;- sample(states, 1) # pick start state among states for (i in 1:maxEL) { # for episode with ss as start (max length 100000) a &lt;- self$getActionPi(s) dat &lt;- env$getTimeStepData(s,a) # get next state and reward r &lt;- dat$r sN &lt;- dat$sN if (is.na(sN) | is.na(a)) break # start generating new episode oldV &lt;- self$model[[s]]$v self$model[[s]]$v &lt;- oldV + alpha * (r + gamma * self$model[[sN]]$v - oldV) s &lt;- sN } } }, #&#39; @description Policy evaluation using every-visit Monte Carlo sampling. #&#39; @param env The environment which must have a method `getEpisode(agent, s, coeff)` that return an episode as a tibble with #&#39; cols s, a, r (last col the terminal reward). This method also must update the visit counters if needed! This is also #&#39; the method that decides which action selection method is used. #&#39; @param gamma Discount rate. #&#39; @param theta Threshold parameter. #&#39; @param minIte Minimum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param maxIte Maximum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param reset If true initialize all state-values to 0. #&#39; @param states Start states in the episodes, which all are visited using a for loop. #&#39; @param verbose If true then print info for each episode. policyEvalMC = function(env, gamma = 1, theta = 0.1, minIte = 100, maxIte = 1000, reset = TRUE, states = self$getStateKeys(), verbose = FALSE) { if (reset) { self$setStateValue() # set to 0 self$setActionCtrValue() # reset counter self$setStateCtrValue() # reset counter } for (ite in 1:maxIte) { delta &lt;- 0 for (ss in states) { # for episode with s as start df &lt;- env$getEpisodePi(self, ss) # an episode stored in a tibble with cols s, a, r (last col the terminal reward) if (nrow(df) == 0) next df &lt;- df %&gt;% mutate(nS = NA, g = NA, oldV = NA, v = NA) gain &lt;- 0 for (i in nrow(df):1) { s &lt;- df$s[i] a &lt;- df$a[i] gain &lt;- df$r[i] + gamma * gain ctr &lt;- self$model[[s]]$n oldV &lt;- self$model[[s]]$v stepSize &lt;- (1/ctr) self$model[[s]]$v &lt;- oldV + stepSize * (gain - oldV) newV &lt;- self$model[[s]]$v delta &lt;- max(delta, abs(oldV - newV)) if (verbose) df$g[i] &lt;- gain; df$nS[i] &lt;- ctr; df$oldV[i] &lt;- oldV; df$v[i] &lt;- newV } if (verbose) print(df) } if (delta &lt; theta &amp; ite &gt;= minIte) break } if (ite == maxIte) warning(&quot;Polcy eval algorithm stopped at max iterations allowed: &quot;, maxIte) message(str_c(&quot;Policy eval algorihm finished in &quot;, ite, &quot; iterations.&quot;)) return(invisible(NULL)) }, #&#39; @description Generalized policy iteration using on policy every-visit Monte Carlo sampling. #&#39; @param env The environment which must have a method `getEpisode(agent, s, coeff)` that return an episode as a tibble with #&#39; cols s, a, r (last col the terminal reward). This method also must update the visit counters if needed! This is also #&#39; the method that decides which action selection method is used. #&#39; @param gamma Discount rate. #&#39; @param theta Threshold parameter. #&#39; @param minIte Minimum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param maxIte Maximum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param reset If true initialize all action-values to 0. #&#39; @param states Start states in the episodes, which all are visited using a for loop. #&#39; @param eps Epsilon used for the epsilon-greedy policy. #&#39; @param verbose If true then print info for each episode. gpiOnPolicyMC = function(env, gamma = 1, theta = 0.1, minIte = 100, maxIte = 1000, reset = TRUE, states = self$getStateKeys(), eps = 0.1, verbose = FALSE) { if (reset) { self$setActionValue() # set to 0 self$setActionCtrValue() # reset counter self$setStateCtrValue() # reset counter } # self$setRandomEpsGreedyPolicy(epsilon) self$setEpsGreedyPolicy(eps, self$getStateKeys()) # self$setGreedyPolicy() for (ite in 1:maxIte) { delta &lt;- 0 # stable &lt;- TRUE for (ss in states) { # for episode with s as start df &lt;- env$getEpisode(self, ss, eps) # an episode stored in a tibble with cols s, a, r (last col the terminal reward) if (nrow(df) == 0) next df &lt;- df %&gt;% mutate(nA = NA, nS = NA, oldQ = NA, q = NA, g = NA, oldV = NA, v = NA) gain &lt;- 0 for (i in nrow(df):1) { s &lt;- df$s[i] a &lt;- df$a[i] gain &lt;- df$r[i] + gamma * gain ctr &lt;- self$model[[s]]$actions[[a]]$n oldQ &lt;- self$model[[s]]$actions[[a]]$q oldV &lt;- self$getStateValueQ(s) stepSize &lt;- (1/ctr)^0.5 self$model[[s]]$actions[[a]]$q &lt;- oldQ + stepSize * (gain - oldQ) # self$model[[s]]$actions[[a]]$q &lt;- oldQ + 0.1 * (gain - oldQ) self$setEpsGreedyPolicy(eps, s) newV &lt;- self$getStateValueQ(s) delta &lt;- max(delta, abs(oldV - newV)) if (verbose) df$oldQ[i] &lt;- oldQ; df$q[i] &lt;- self$model[[s]]$actions[[a]]$q; df$g[i] &lt;- gain; df$nA[i] &lt;- ctr; df$nS[i] &lt;- self$model[[s]]$n; df$oldV[i] &lt;- oldV; df$v[i] &lt;- newV } if (verbose) print(df) } if (delta &lt; theta &amp; ite &gt;= minIte) break } if (ite == maxIte) warning(&quot;GPI algorithm stopped at max iterations allowed: &quot;, maxIte) message(str_c(&quot;GPI algorihm finished in &quot;, ite, &quot; iterations.&quot;)) return(invisible(NULL)) } ) ) Pay attention to the gpiOnPolicyMC method which uses generalized policy iteration with every-visit estimation using on-policy sampling and an epsilon greedy policy for action selection. Note that gpiOnPolicyMC also takes a set of states as input which are the starting states of the episodes generated (all used in each iteration). Moreover, we do not use a step size equal \\(1/n_a\\) but \\((1/n_a)^{0.5}\\) which decrease slower. Finally, the stopping criteria is added by comparing the the differences in the state-values for each state in an episode. Note the value of \\(\\theta\\) gives no guarantee that the action-values will be close to the optimal ones, since we not sample episodes. For instance if two similar episodes are generated early in run then they may be so alike that that the state-values are almost equal and hence the algorithm stops. We define the RL agent: agent &lt;- RLAgent$new() agent$addStates(env$getStates()) # add states for (s in agent$getStateKeys()) { # add actions agent$addActions(s, env$getActions(s)) } agent$getActionKeys(&quot;2,5&quot;) #&gt; [1] &quot;10&quot; &quot;15&quot; &quot;20&quot; &quot;25&quot; Given the current policy an episode can be extracted using: Each row contains the state, action and reward for a time-step. Let us try to approximate the optimal state-value and action in state \\((50,1)\\). set.seed(232) time &lt;- 1 i &lt;- 50 state = str_c(i, &quot;,&quot;, time) agent$gpiOnPolicyMC(env, minIte = 2000, maxIte = 50000, states = state, reset = T, eps = 0.2, theta = 0.2) dfRL &lt;- agent$getActionValues() %&gt;% separate(state, sep = &quot;,&quot;, into = c(&quot;inv&quot;, &quot;t&quot;), remove = F, convert = T) Let us consider the action-values at state \\((50,1)\\) dfRL %&gt;% filter(inv == i, t == time) %&gt;% left_join(dfMDP) #&gt; # A tibble: 4 × 7 #&gt; state inv t action q n v #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 50,1 50 1 10 51.1 356 NA #&gt; 2 50,1 50 1 15 192. 346 NA #&gt; 3 50,1 50 1 20 244. 13156 311. #&gt; 4 50,1 50 1 25 222. 378 NA Note that actions in state \\((50,1)\\) are sampled differently (based on the epsilon-greedy policy). The best action found (the one with the highest action-value) also seems to be the optimal action w.r.t. the MDP. Let us make a plot of the greedy action for the visited states: visits &lt;- dfRL %&gt;% group_by(state) %&gt;% summarise(nS = sum(n)) df1 &lt;- dfRL %&gt;% group_by(state) %&gt;% slice_max(q, with_ties = F) %&gt;% left_join(visits) %&gt;% filter(n != 0) df1 %&gt;% ggplot(aes(x = t, y = inv, size = nS, col = action)) + geom_point() Observe that the states are now sampled differently. Some states are visited many times (many episodes visit that state) while others are not visited often. For the states visited often we have a better approximation of best action compared to states which are visited rarely. Here the action is more or less random, e.g. the action in state \\((5,3)\\) should not set the price to 10 (setting the price to 25 would be better since we only have 5 items left). 6.5 Off-policy MC prediction Until now we have only considered what is denoted on-policy algorithms for finding the optimal policy. Here we both evaluate or improve the policy that is used to make decisions. To ensure infinite exploration we use for instance exploring starts or \\(\\epsilon\\)-soft policies. Off-policy methods use a different approach by considering two policies: a policy \\(b\\) used to generate the sample-path (behaviour policy) and a policy \\(\\pi\\) that is learned for control (target policy). We update the target policy using the sample-paths from the behaviour policy. The behaviour policy explores the environment for us during training and must ensure infinite exploration. Moreover, the coverage assumption must be satisfied: \\[\\pi(a|s) &gt; 0 \\rightarrow b(a|s) &gt; 0\\] That is, every action in \\(\\pi\\) must also be taken, at least occasionally, by \\(b\\). Put differently, to learn \\(\\pi\\) we must sample paths that occur when using \\(\\pi\\). Note target policy \\(\\pi\\) may be deterministic by using greedy selection with respect to action-value estimates (greedy in the limit satisfied). Off-policy learning methods are powerful and more general than on-policy methods (on-policy methods being a special case of off-policy where target and behaviour policies are the same). They can be used to learn from data generated by a conventional non-learning controller or from a human expert. But how do we estimate the expected return using the target policy when we only have sample-paths from the behaviour policy? For this we need to introduce importance sampling, a general technique for estimating expected values under one distribution given samples from another. Let us first explain it using two distributions \\(a\\) and \\(b\\) where we want to estimated the mean of \\(a\\) given data/samples from \\(b\\), then \\[ \\begin{align} \\mathbb{E}_{a}[X] &amp;= \\sum_{x\\in X} a(x)x \\\\ &amp;= \\sum_{x\\in X} a(x)\\frac{b(x)}{b(x)}x \\\\ &amp;= \\sum_{x\\in X} b(x)\\frac{a(x)}{b(x)}x \\\\ &amp;= \\sum_{x\\in X} b(x)\\rho(x)x \\\\ &amp;= \\mathbb{E}_{b}\\left[\\rho(X)X\\right]. \\end{align} \\] Hence to the mean of \\(a\\) can be found by finding the mean of \\(\\rho(X)X\\) where \\(X\\) is has a \\(b\\) distribution and \\(\\rho(x) = a(x)/b(x)\\) denote the importance sampling ratio. Note given samples \\((x_1,\\ldots,x_n)\\) from \\(b\\) we then can calculate the sample average using \\[ \\begin{align} \\mathbb{E}_{a}[X] &amp;= \\mathbb{E}_{b}\\left[\\rho(X)X\\right] \\\\ &amp;\\approx \\frac{1}{n}\\sum_{i = 1}^n \\rho(x_i)x_i \\\\ \\end{align} \\tag{6.1} \\] Now let us use importance sampling on the target policy \\(\\pi\\) and behaviour policy \\(b\\). Given state \\(S_t\\) and sample path, we want to find \\[v_\\pi(s) = \\mathbb{E}_{\\pi}[G_t|S_t = s] = \\mathbb{E}_{b}[\\rho(G_t)G_t|S_t = s],\\] or since we base our estimates on sample-paths, we are in fact interested in estimating the action-values \\[q_\\pi(s,a) = \\mathbb{E}_{\\pi}[G_t|S_t = s, A_t = a] = \\mathbb{E}_{b}[\\rho(G_t)G_t|S_t = s, A_t = a].\\] For this we need the importance sampling ratio given a certain sample-path \\(S_t, A_t, R_{t+1}, \\ldots, R_T, S_T\\) with return \\(G_t\\): \\[ \\begin{align} \\rho(G_t) &amp;= \\frac{\\Pr{}(S_t, A_t, \\dots S_T| S_t = s, A_t = a, \\pi)}{\\Pr{}(S_t, A_t, \\dots, S_T)| S_t = s, A_t = a, b)} \\\\ &amp;= \\frac{\\prod_{k=t}^{T-1}\\pi(A_k|S_k)\\Pr{}(S_{k+1}|S_k, A_k)}{\\prod_{k=t}^{T-1}b(A_k|S_k)\\Pr{}(S_{k+1}|S_k, A_k)}\\\\ &amp;=\\prod_{k=t}^{T-1}\\frac{\\pi(A_k|S_k)}{b(A_k|S_k)}. \\end{align} \\tag{6.2} \\] Note the transition probabilities cancel out, i.e. the ratio does not depend on the MDP dynamics by only the policies. Moreover, importance sampling ratios are only non-zero for sample-paths where the target-policy has non-zero probability of acting exactly like the behaviour policy \\(b\\). So, if the behaviour policy takes 10 steps in an sample-path, each of these 10 steps have to have been possible by the target policy, else \\(\\pi(a|s) = 0\\) and \\(\\rho_{t:T-1} = 0\\). We can now approx. \\(q_\\pi(s,a)\\) by rewriting Eq. (6.1) for \\(\\pi\\) given returns from \\(b\\) to \\[ q_\\pi(s,a) = \\mathbb{E}_{\\pi}[G_t|S_t = s, A_t = a] \\approx \\frac{1}{n} \\sum_{i = 1}^n \\rho_iG_i, \\tag{6.3} \\] where we assume that given the sample-paths (episodes), have \\(n\\) observations of the return \\((G_1, \\ldots, G_n)\\) in state \\(s\\) taking action \\(a\\) with the importance sampling ratio \\(\\rho_i\\) calculated using Eq. (6.2). As a result if we consider the prediction algorithm in Figure 6.1 it must be modified by: Generate an sample-path using policy \\(b\\) instead of \\(\\pi\\). Add a variable W representing the importance sampling ratio which must be set to 1 on line containing \\(G \\leftarrow 0\\). Modify line \\(G \\leftarrow \\gamma G + R_{t+1}\\) to \\(G \\leftarrow \\gamma WG + R_{t+1}\\) since we now need to multiply with the importance sampling ratio. Add a line after the last with \\(W \\leftarrow W \\pi(A_t|S_t)/b(A_t|S_t)\\), i.e. we update the importance sampling ratio. Note if \\(\\pi(A_t|S_t) = 0\\) then we may stop the inner loop earlier (\\(W=0\\) for the remaining \\(t\\)). Finally, an incremental update of \\(V\\) can be done having a vector counting the number of of returns found for each state. Then the incremental update is \\[ V(s) \\leftarrow V(s) + \\frac{1}{n} \\left[WG - V(s)\\right]. \\tag{6.4} \\] where \\(n\\) denote the number of realized returns found for state \\(s\\) and \\(G\\) the current realized return. 6.5.1 Weighted importance sampling When using a sample average the importance sampling method is called ordinary importance sampling. Ordinary importance sampling may result in a high variance which is not good. As a result we may use other weights and instead of Eq. (6.3) use the estimate (weighted importance sampling): \\[ q_\\pi(s,a) = \\mathbb{E}_{\\pi}[G_t|S_t = s, A_t = a] \\approx \\frac{1}{\\sum_{i = 1}^n \\rho_i} \\sum_{i = 1}^n \\rho_iG_i. \\] An incremental update then becomes: \\[ \\begin{align} q_\\pi(s,a) &amp;\\approx V_{n+1} \\\\ &amp;= \\frac{1}{\\sum_{i = 1}^n \\rho_i} \\sum_{i = 1}^n \\rho_iG_i \\\\ &amp;= \\frac{1}{C_n} \\sum_{i = 1}^n W_iG_i \\\\ &amp;= \\frac{1}{C_n} (W_nG_n + C_{n-1}\\frac{1}{C_{n-1}} \\sum_{i = 1}^{n-1} W_iG_i) \\\\ &amp;= \\frac{1}{C_n} (W_nG_n + C_{n-1}V_n) \\\\ &amp;= \\frac{1}{C_n} (W_nG_n + (C_{n} - W_{n}) V_n) \\\\ &amp;= \\frac{1}{C_n} (W_nG_n + C_{n}V_n - W_{n} V_n) \\\\ &amp;= V_n + \\frac{W_n}{C_n} (G_n - V_n), \\end{align} \\tag{6.5} \\] where \\(C_n = \\sum_{i = 1}^n \\rho_i\\) is the sum of the ratios and and \\(W_n\\) the ratio for the n’th return. Using weighted importance sampling gives a smaller variance and hence faster convergence. An off-policy prediction algorithm using weighted importance sampling and incremental updates is given in Figure 6.6. Figure 6.6: Off-policy MC prediction (Sutton and Barto 2018). Note both Eq. (6.4) and Eq. (6.5) follows the general incremental formula: \\[\\begin{equation} New Estimate \\leftarrow Old Estimate + Step Size \\left[Observation - Old Estimate \\right]. \\end{equation}\\] For ordinary importance sampling the step-size is \\(1/n\\) and for weighted importance sampling the step-size is \\(W_n/C_n\\). 6.6 Off-policy control (improvement) Having discussed a framework for off-policy MC prediction, we can now give a GPI algorithm for off-policy MC control that estimate \\(\\pi_*\\) and \\(q_*\\) by using rewards obtained through behaviour policy \\(b\\). We will focus on using weighted importance sampling with incremental updates. The algorithm is given in Figure 6.7. The target policy \\(\\pi\\) is the greedy policy with respect to \\(Q\\), which is an estimate of \\(q_\\pi\\). This algorithm converges to \\(q_\\pi\\) as long as an infinite number of returns are observed for each state-action pair. This can be achieved by making \\(b\\) \\(\\varepsilon\\)-soft. The policy \\(\\pi\\) converges to \\(\\pi_*\\) at all encountered states even if \\(b\\) changes (to another \\(\\varepsilon\\)-soft policy) between or within sample-paths. Note we exit the inner loop if \\(A_t \\neq \\pi(S_t)\\) which implies \\(W=0\\). Figure 6.7: Off-policy GPI (Sutton and Barto 2018). Notice that this policy only learns from sample-paths in which \\(b\\) selects only greedy actions after some timestep. This can greatly slow learning. 6.7 Summary Read Chapter 5.10 in Sutton and Barto (2018). 6.8 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 6.8.1 Exercise - Seasonal inventory and sales planning Consider the seasonal product in Example 6.4.4. set.seed(876) prices &lt;- c(10, 15, 20, 25) env &lt;- RLEnvSeasonal$new(maxInv = 100, maxT = 15, scrapPrice = 5, purchasePrice = 14, prices) × Solution With a low inventory level, there is a high probability of selling everything even for the highest price. This effect is more dominant if the number of time-steps left is high and decrease as we approach week 15. Contrary with a high inventory level there is a low probability of selling everything (if the price is set to high) and therefore we have to use a lower price. This effect is more dominant if the number of time-steps left is low. Close Solution Consider the optimal policy for the MDP modelling the problem in Figure 6.5. Here the optimal price is high at the lower-left and decrease as we approach the upper-right. Explain why this from an intuitive point of view seems correct. × Solution The optimal policy is found using a threshold value, i.e the MDP finds an optimal policy with state-values within the threshold. Hence small differences in state-value may produce different optimal prices. Another reason could be that we have multiple optimal policies. Close Solution Consider the optimal policy for the MDP modelling the problem in Figure 6.5. For a fixed time \\(t\\) the optimal price does not always decrease as the inventory level increase. Some time two prices oscillate (e.g. first green, then red and then green again). Give possible reasons for this happening. × Solution In state \\((1,1)\\) the optimal price is 25 (we only have one item left to sell over 15 weeks) and in state \\((100,15)\\) the optimal price is 10 (we can not sell all items in one week so set price low). Close Solution Let us consider two extreme states \\((1,1)\\) and \\((100,15)\\). From an intuitively point of view, what is the optimal action/price to do in these states? × Solution Since the epsilon-greedy policy selects \\(a=20\\) (at random) first, \\(a=20\\) becomes the greedy action that is selected with highest probability. In this run, when selecting the next action, 20 is always selected and hence only \\(q\\) for \\(a=20\\) is updated 10 times (minimum number of iterations). Afterwards differences in state-values of states in the current episode are compared (oldV and v column). Since they are the same the algorithm stop. That is, we never get a chance to have a view on action \\(a=25\\) or put differently, the stopping criteria may not work well for episodes with small length. Close Solution Consider state \\((1,1)\\) and let us try approximating best epsilon-greedy policy using MC with the verbose option so it prints out info about each episode: set.seed(79) time &lt;- 1 i &lt;- 1 state = str_c(i, &quot;,&quot;, time) agent$gpiOnPolicyMC(env, minIte = 10, maxIte = 100000, states = state, reset = T, eps = 0.2, verbose = T) #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 1 1 0 6 6 0 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 2 2 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 3 3 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 4 4 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 5 5 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 6 6 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 7 7 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 8 8 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 9 9 6 6 6 5.1 5.1 #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 10 10 6 6 6 5.1 5.1 dfRL &lt;- agent$getActionValues() %&gt;% separate(state, sep = &quot;,&quot;, into = c(&quot;inv&quot;, &quot;t&quot;), remove = F, convert = T) dfRL %&gt;% filter(inv == i, t == time) %&gt;% left_join(dfMDP) #&gt; # A tibble: 4 × 7 #&gt; state inv t action q n v #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 1 1 10 0 0 NA #&gt; 2 1,1 1 1 15 0 0 NA #&gt; 3 1,1 1 1 20 6 10 NA #&gt; 4 1,1 1 1 25 0 0 11.0 Why do we not estimate the optimal action here and why do the algorithm stop. Hint: You may have a look at method gpiOnPolicyMC in the RLAgent class. × Solution Since the initial action-value is high, all actions will be explored with high probability first. This may help the algorithm to get a good start. Close Solution Let us try to set the action-value high initially: set.seed(105) agent$setActionValue(1000) agent$setActionCtrValue() # reset counter agent$setStateCtrValue() # reset counter agent$getActionValues(&quot;1,1&quot;) #&gt; # A tibble: 4 × 4 #&gt; state action q n #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 10 1000 0 #&gt; 2 1,1 15 1000 0 #&gt; 3 1,1 20 1000 0 #&gt; 4 1,1 25 1000 0 agent$gpiOnPolicyMC(env, minIte = 5, maxIte = 100000, states = state, reset = F, eps = 0.2, verbose = T) #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 15 1 1 1 1000 1 1 1000 950. #&gt; # A tibble: 2 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 25 -14 1 2 1000 11 11 950. 901. #&gt; 2 1,2 25 25 1 1 1000 25 25 1000 951. #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 10 -4 1 3 1000 -4 -4 901. 850. #&gt; # A tibble: 1 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 20 6 1 4 1000 6 6 850. 9.5 #&gt; # A tibble: 2 × 10 #&gt; s a r nA nS oldQ q g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 25 -14 2 5 11 11 11 9.5 9.5 #&gt; 2 1,2 25 25 2 2 25 25 25 951. 951. dfRL &lt;- agent$getActionValues() %&gt;% separate(state, sep = &quot;,&quot;, into = c(&quot;inv&quot;, &quot;t&quot;), remove = F, convert = T) dfRL %&gt;% filter(inv == i, t == time) %&gt;% left_join(dfMDP) #&gt; # A tibble: 4 × 7 #&gt; state inv t action q n v #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1,1 1 1 10 -4 1 NA #&gt; 2 1,1 1 1 15 1 1 NA #&gt; 3 1,1 1 1 20 6 1 NA #&gt; 4 1,1 1 1 25 11 2 11.0 What happens with the sequence of episodes? × Solution Since we do simulations (we here do 3) each simulation may produce different results depending on how the algorithm starts. That is, we need more iterations for converging to the correct state-value. Close Solution Consider state \\((1,1)\\) and let us try approximating best epsilon-greedy policy using MC using more episodes: set.seed(749) agent$gpiOnPolicyMC(env, minIte = 100, maxIte = 100000, states = state, reset = T, eps = 0.2) agent$getStateValueQ(state) # get the state-value v(s) of the epsilon-greedy policy #&gt; 10 #&gt; 9.34 agent$gpiOnPolicyMC(env, minIte = 1000, maxIte = 100000, states = state, reset = T, eps = 0.2) agent$getStateValueQ(state) # get the state-value v(s) of the epsilon-greedy policy #&gt; 10 #&gt; 9.03 agent$gpiOnPolicyMC(env, minIte = 2000, maxIte = 100000, states = state, reset = T, eps = 0.2) agent$getStateValueQ(state) # get the state-value v(s) of the epsilon-greedy policy #&gt; 10 #&gt; 9.49 Why is the state-value not increasing monotone as number of iterations increase? × Solution No, the q-values are the averages over all the generated episodes (also those generated using bad policies). With enough simulations these numbers will converge against the action-values for the best epsilon-greedy policy (\\(\\epsilon = 0.5\\) here), not the optimal greedy policy. Close Solution Consider state \\((25,8)\\) and let us approximate the best epsilon-greedy policy: set.seed(281) time &lt;- 8 i &lt;- 25 state = str_c(i, &quot;,&quot;, time) agent$setActionValue(1000) agent$setActionCtrValue() # reset counter agent$setStateCtrValue() # reset counter agent$gpiOnPolicyMC(env, minIte = 5000, maxIte = 100000, states = state, reset = F, eps = 0.5) dfRL &lt;- agent$getActionValues() %&gt;% separate(state, sep = &quot;,&quot;, into = c(&quot;inv&quot;, &quot;t&quot;), remove = F, convert = T) dfRL %&gt;% filter(inv == i, t == time) %&gt;% left_join(dfMDP) #&gt; # A tibble: 4 × 7 #&gt; state inv t action q n v #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 25,8 25 8 10 295. 148 NA #&gt; 2 25,8 25 8 15 436. 1491 NA #&gt; 3 25,8 25 8 20 480. 3566 502. #&gt; 4 25,8 25 8 25 438. 135 NA As can be seen the the optimal state value for the MDP is not equal the action-value for that action. Should that have been the case if run enough simulations? Consider the very optimistic policy which set the price to 25 (where possible): ## Set the policy to price 25 states &lt;- agent$getStateKeys() %&gt;% setdiff(&quot;0&quot;) states &lt;- states[!str_detect(states, &quot;,15&quot;)] pi = c(&quot;25&quot; = 1) agent$setPolicy(states, pi) # set last time-step states &lt;- agent$getStateKeys() %&gt;% setdiff(&quot;0&quot;) states &lt;- states[str_detect(states, &quot;,15&quot;)] pi = c(&quot;5&quot; = 1) agent$setPolicy(states, pi) # set dummy pi = c(&quot;dummy&quot; = 1) agent$setPolicy(&quot;0&quot;, pi) ## Check agent$getPolicy() #&gt; # A tibble: 1,501 × 3 #&gt; state action pr #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 0 dummy 1 #&gt; 2 1,1 25 1 #&gt; 3 1,10 25 1 #&gt; 4 1,11 25 1 #&gt; 5 1,12 25 1 #&gt; 6 1,13 25 1 #&gt; 7 1,14 25 1 #&gt; 8 1,15 5 1 #&gt; 9 1,2 25 1 #&gt; 10 1,3 25 1 #&gt; # … with 1,491 more rows #&gt; # ℹ Use `print(n = ...)` to see more rows We may generate an episode using: env$getEpisodePi(agent, &quot;5,1&quot;) #&gt; # A tibble: 7 × 3 #&gt; s a r #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 5,1 25 -45 #&gt; 2 4,2 25 25 #&gt; 3 3,3 25 0 #&gt; 4 3,4 25 0 #&gt; 5 3,5 25 25 #&gt; 6 2,6 25 25 #&gt; 7 1,7 25 25 Let us try to evaluate this policy in states \\((5,1)\\) and \\((100,10)\\): set.seed(6778) agent$policyEvalMC(env, states = &quot;5,1&quot;) agent$getStateValues(&quot;5,1&quot;) #&gt; # A tibble: 1 × 2 #&gt; # Rowwise: #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 5,1 55 dfMDP %&gt;% filter(state == &quot;5,1&quot;) #&gt; # A tibble: 1 × 5 #&gt; state inv t v action #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 5,1 5 1 55.0 25 agent$policyEvalMC(env, states = &quot;100,10&quot;) agent$getStateValues(&quot;100,10&quot;) #&gt; # A tibble: 1 × 2 #&gt; # Rowwise: #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 100,10 578. dfMDP %&gt;% filter(state == &quot;100,10&quot;) #&gt; # A tibble: 1 × 5 #&gt; state inv t v action #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 100,10 100 10 1001. 15 × Solution For state \\((5,1)\\) it is optimal to set the price high for all states in the sample-path and we estimate the optimal policy. For state \\((100,10)\\) it is not optimal to set the price high, i.e. the state-value we estimate here is not the optimal one. Close Solution Why do we have state-values close and not close to the optimal values for the MDP? References "],["mod-td-pred.html", "Module 7 Temporal difference methods for prediction 7.1 Learning outcomes 7.2 Textbook readings 7.3 What is TD learning? 7.4 TD prediction 7.5 Benefits of TD methods 7.6 Exercises", " Module 7 Temporal difference methods for prediction One of the most fundamental concepts in reinforcement learning is temporal difference (TD) learning. TD learning is a combination of Monte Carlo (MC) and dynamic programming (DP) ideas: Like MC, TD can predict using a model-free environment and learn from experience. Like DP, TD update estimates based on other learned estimates, without waiting for a final outcome (bootstrap). That is, TD can learn on-line and do not need to wait until the whole sample-path is found. TD is in general learn more efficiently than MC due to bootstrapping. In this module prediction using TD is considered. 7.1 Learning outcomes By the end of this module, you are expected to: Describe what Temporal Difference (TD) learning is. Formulate the incremental update formula for TD learning. Define the temporal-difference error. Interpret the role of a fixed step-size. Identify key advantages of TD methods over DP and MC methods. Explain the TD(0) prediction algorithm. Understand the benefits of learning online with TD compared to MC methods. The learning outcomes relate to the overall learning goals number 3, 4, 6, 9, and 12 of the course. 7.2 Textbook readings For this week, you will need to read Chapter 6-6.3 in Sutton and Barto (2018). Read it before continuing this module. A summary of the book notation can be seen here. Slides for this module can be seen here. You do not have to look at them before the lecture! 7.3 What is TD learning? Given a policy \\(\\pi\\), we want to estimate the state-value function. Recall that the state value function is \\[ v_\\pi(s) = \\mathbb{E}_\\pi[G_t | S_t = s]. \\] where the return is \\[ G_t = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\cdots = \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} = R_{t+1} + \\gamma G_{t+1} \\] Let \\(V\\) denote the state-value estimate. Under MC prediction we used an incremental update formula: \\[ V(S_t) \\leftarrow V(S_t) + \\alpha_n\\left[G_t - V(S_t)\\right], \\] where \\(n\\) denote the number of observations and \\(\\alpha_n\\) the step-size. Different values of \\(\\alpha_n\\) was discussed in Module 6. Here we assumed a stationary environment (state set, transition probabilities etc. is the same for each stage \\(t\\)) e.g. for the sample average \\(\\alpha_n = 1/n\\). If the environment is non-stationary (e.g. transition probabilities change over time) then a fixed step-size may be appropriate. Let us for the remaining of this module consider a non-stationary process with fixed step-size: \\[ V(S_t) \\leftarrow V(S_t) + \\alpha\\left[G_t - V(S_t)\\right], \\] Note as pointed out in Section 2.5, a fixed step-size corresponds to a weighted average of the past observed returns and the initial estimate of \\(S_t\\): \\[ \\begin{align} V_{n+1} &amp;= V_n +\\alpha \\left[G_n - V_n\\right] \\nonumber \\\\ &amp;= \\alpha G_n + (1 - \\alpha)V_n \\nonumber \\\\ &amp;= \\alpha G_n + (1 - \\alpha)[\\alpha G_{n-1} + (1 - \\alpha)V_{n-1}] \\nonumber \\\\ &amp;= \\alpha G_n + (1 - \\alpha)\\alpha G_{n-1} + (1 - \\alpha)^2 V_{n-1} \\nonumber \\\\ &amp; \\vdots \\nonumber \\\\ &amp;= (1-\\alpha)^n V_1 + \\sum_{i=1}^{n} \\alpha (1 - \\alpha)^{n-i} G_i \\\\ \\end{align} \\] That is, a larger weight is used for recent observations compared to old observations. For MC prediction we needed the sample path to get the realized return \\(G_t\\). However, since \\[ \\begin{align} v_\\pi(s) &amp;= \\mathbb{E}_\\pi[G_t | S_t = s] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1} + \\gamma G_{t+1} | S_t = s] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1}| S_t = s] + \\gamma \\mathbb{E}_\\pi[G_{t+1} | S_t = s] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1}| S_t = s] + \\gamma v_\\pi(S_{t+1}), \\end{align} \\] then, given a realized reward \\(R_{t+1}\\), an estimate for the return \\(G_t\\) is \\(R_{t+1} + \\gamma V(S_{t+1})\\) and the incremental update becomes: \\[ V(S_t) \\leftarrow V(S_t) + \\alpha\\left[R_{t+1} + \\gamma V(S_{t+1}) - V(S_t)\\right]. \\tag{7.1} \\] As a result, we do not have to generate a whole sample-path (as for MC) for updating the state-value estimate of \\(s = S_t\\) to \\(V(S_t)\\). Instead we only have to wait until the next state is observed and update the estimate of \\(S_t\\) given the estimate of the next state \\(S_{t+1}\\). As the estimate of \\(S_{t+1}\\) improve the estimate of \\(S_t\\) also improve. The incremental update in Eq. (7.1) is called TD(0) or one-step TD because it use a one-step lookahead to update the estimate. Note updating the estimates using TD resembles the way we did for DP: \\[ V(s = S_t) \\leftarrow \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) V(s&#39;)\\right) \\] Here we updated the value by considering the expectation of all the next states. This was possible since we had a model. Now, by using TD, we do not need a model to estimate the state-value. The term \\[ \\delta_t = R_{t+1} + \\gamma V(S_{t+1}) - V(S_t), \\] is denoted the temporal difference error (TD error) since it is the difference between the current estimate \\(V(S_t)\\) and the better estimate \\(R_{t+1} + \\gamma V(S_{t+1})\\). 7.4 TD prediction We can now formulate a TD(0) algorithm for predicting state-values of a policy (see Figure 7.1). No stopping criterion is given but could stop when small differences in state-values are observed. Figure 7.1: TD(0) policy prediction (Sutton and Barto 2018). The algorithm is given for a process with episodes; however, also works for continuing processes. In this case the inner loop runs over an infinite number of time-steps. 7.4.1 TD prediction for action-values Later we will use TD to for improving the policy (control). Since we do not have a model we need to estimate action-values instead and the optimal policy can be found using \\(q_*\\) (see Eq. (4.3)). To find \\(q_*\\), we first need to predict action-values for a policy \\(\\pi\\) and the incremental update Eq. (7.1) must be modified to use \\(Q\\) values: \\[ Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha\\left[R_{t+1} + \\gamma Q(S_{t+1}, A_t) - Q(S_t, A_t)\\right]. \\] Note given a policy \\(\\pi\\) you need to know \\(S_t, A_t, R_{t+1}, S_{t+1}, A_{t+1}\\) or short SARSA before you can make an update. This acronym is used to name the SARSA algorithm for control in Module 8. Note to ensure exploration of all action-values we need e.g. an \\(\\epsilon\\)-soft behavioural policy. 7.5 Benefits of TD methods Let us try to summarize the benefits of TD prediction TD methods do not require a model of the environment (compared to DP). TD methods can be implemented online, which can speed convergence (compared to MC methods which must wait until the end of the sample-path). TD methods learn from all actions, whereas MC methods require the sample-path to have a tail equal to the target policy. TD methods do converge on the value function with a sufficiently small step-size parameter, or with a decreasing step-size. TD methods generally converge faster than MC methods, although this has not been formally proven. TD methods are extremely useful for continuing tasks that cannot be broken down into episodes as required by MC methods. TD can be seen as a method for prediction learning where you try to predict what happens next given you current action, get new information and make a new prediction. That is, you do not need a training set (as in supervised learning) instead the reward signal is observed as time goes by. TD methods are good for sequential decision problems (multi-step prediction). TD methods are scalable in the sense that computations do not grow exponentially with the problem size. An example illustrating that TD methods converge faster than MC methods is given in Exercise 7.6.1 7.6 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 7.6.1 Exercise - A randow walk Consider a MDP with states 2-6 and two terminal states 1 and 7. Possible transitions are given in Figure 7.2. All episodes start in the centre state, 4, then proceed either left or right by one state on each step. We assume the stochastic policy \\(\\pi\\) is used where each direction has equal probability. Episodes terminate either on the left (1) or the right (7). When an episode terminates on the right, reward of 1 occurs; all other rewards are zero. If the discount factor equals 1, the state-value of each state is the probability of terminating on the right if starting from that state. Figure 7.2: Possible transitions between states and rewards. × Solution The state space is \\(\\mathcal{S} = \\{ 1, 2, \\ldots, 6, 7 \\}\\) with \\(\\mathcal{A}(s) = \\{ \\text{left}, \\text{right}\\}\\) (transition to the neighbour states) except for terminating states (1 and 7) which only have an action with transition to itself (see Figure 7.2). Rewards are deterministic \\(\\mathcal{R} = \\{0, 1\\}\\) (see Figure 7.2) which also holds for the transition probabilities. The state-value can be found using the Bellman equations (5.1) \\[v_\\pi(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\right),\\] which becomes \\[\\begin{align}v_\\pi(2) &amp;= 0.5v_\\pi(1) + 0.5v_\\pi(3) = 0.5v_\\pi(3) \\\\ v_\\pi(3) &amp;= 0.5v_\\pi(2) + 0.5v_\\pi( 4 ) \\\\ v_\\pi( 4 ) &amp;= 0.5v_\\pi(3) + 0.5v_\\pi(5) \\\\ v_\\pi(5) &amp;= 0.5v_\\pi( 4 ) + 0.5v_\\pi(6) \\\\ v_\\pi(6) &amp;= 0.5v_\\pi(5) + 0.5(1 + v_\\pi(7)) = 0.5v_\\pi(5) + 0.5\\\\ \\end{align}\\] Solving the equations with a state-value equal to 0 for the terminating states gives state-values \\(\\frac{1}{6}, \\frac{2}{6}, \\frac{3}{6}, \\frac{4}{6}\\) and \\(\\frac{5}{6}\\) for 2-6, respectively. Close Solution Formulate the MDP model and calculate the state-value \\(v_\\pi\\) for each state using the Bellman equations (5.1). Hint: there is no need to code this. Just solve the Bellman equations for state 2-6. Consider the code below which build, set the policy and evaluate it. Try to understand what happens and check if the results are the same as found in Question 1. ## Build the MDP mdp &lt;- MDPClass$new() mdp$addStateSpace(1:7) # add state keys states &lt;- str_c(2:6) for (s in states) { mdp$addActionSpace(s, c(&quot;left&quot;, &quot;right&quot;)) } mdp$addActionSpace(&quot;1&quot;, c(&quot;dummy&quot;)) mdp$addActionSpace(&quot;7&quot;, c(&quot;dummy&quot;)) # Add trans pr and rewards pr &lt;- 1 for (s in 2:5) { names(pr) = s+1 mdp$addAction(as.character(s), &quot;right&quot;, r = 0, pr) } mdp$addAction(&quot;6&quot;, &quot;right&quot;, r = 1, pr = c(&quot;7&quot; = 1)) for (s in 2:6) { names(pr) = s-1 mdp$addAction(as.character(s), &quot;left&quot;, r = 0, pr) } mdp$addAction(&quot;1&quot;, &quot;dummy&quot;, r = 0, pr = c(&quot;1&quot; = 1)) mdp$addAction(&quot;7&quot;, &quot;dummy&quot;, r = 0, pr = c(&quot;7&quot; = 1)) mdp$getActionInfo(&quot;1&quot;) #&gt; $dummy #&gt; $dummy$r #&gt; [1] 0 #&gt; #&gt; $dummy$pr #&gt; 1 #&gt; 1 mdp$getActionInfo(&quot;2&quot;) #&gt; $right #&gt; $right$r #&gt; [1] 0 #&gt; #&gt; $right$pr #&gt; 3 #&gt; 1 #&gt; #&gt; #&gt; $left #&gt; $left$r #&gt; [1] 0 #&gt; #&gt; $left$pr #&gt; 1 #&gt; 1 mdp$getActionInfo(&quot;6&quot;) #&gt; $right #&gt; $right$r #&gt; [1] 1 #&gt; #&gt; $right$pr #&gt; 7 #&gt; 1 #&gt; #&gt; #&gt; $left #&gt; $left$r #&gt; [1] 0 #&gt; #&gt; $left$pr #&gt; 5 #&gt; 1 mdp$getActionInfo(&quot;7&quot;) #&gt; $dummy #&gt; $dummy$r #&gt; [1] 0 #&gt; #&gt; $dummy$pr #&gt; 7 #&gt; 1 ## Set the policy pi = c(&quot;left&quot; = 0.5, &quot;right&quot; = 0.5) mdp$setPolicy(states, pi) pi = c(&quot;dummy&quot; = 1) mdp$setPolicy(c(&quot;1&quot;, &quot;7&quot;), pi) mdp$getPolicy() #&gt; # A tibble: 12 × 3 #&gt; state action pr #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 dummy 1 #&gt; 2 2 left 0.5 #&gt; 3 2 right 0.5 #&gt; 4 3 left 0.5 #&gt; 5 3 right 0.5 #&gt; 6 4 left 0.5 #&gt; 7 4 right 0.5 #&gt; 8 5 left 0.5 #&gt; 9 5 right 0.5 #&gt; 10 6 left 0.5 #&gt; 11 6 right 0.5 #&gt; 12 7 dummy 1 ## Evaluate the policy mdp$policyEval(gamma = 1) mdp$getStateValues() #&gt; # A tibble: 7 × 2 #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 0 #&gt; 2 2 0.167 #&gt; 3 3 0.333 #&gt; 4 4 0.500 #&gt; 5 5 0.667 #&gt; 6 6 0.833 #&gt; 7 7 0 × Solution We use TD(0), i.e. update using \\(V(S_t) \\leftarrow V(S_t) + \\alpha\\left[R_{t+1} + \\gamma V(S_{t+1}) - V(S_t)\\right]\\): \\[V(4) = 0.5 + 0.1(0 + 0.5 - 0.5) = 0.5,\\] \\[V(3) = 0.5 + 0.1(0 + 0.5 - 0.5) = 0.5,\\] \\[V(2) = 0.5 + 0.1(0 + 0 - 0.5) = 0.45.\\] That is, since all states apart from the terminal states (initialized to 0) were initialised to the same value and the reward for non-terminal transitions is 0, then updates do nothing except for states that lead directly to termination. Here a reduction of 0.05. Close Solution Consider an episode with sequence \\(4, 0, 3, 0, 2, 0, 1\\). Let the initial state-value estimates of state 2-6 be 0.5 and update the state-values using TD(0) with \\(\\alpha = 0.1\\). It appears that only \\(V(2)\\) change why was only the estimate for this one state changed? By exactly how much was it changed? Generate 100 episodes and run the TD(0) prediction algorithm with \\(\\alpha = 0.1\\) (see Figure 7.1). Make a plot of the state-value estimate (y-axis) given state 2-6 (x-axis) for TD(0) running for 1, 10 and 100 episodes. You may use the code below as a starting point. First we need an environment representing the problem library(R6) library(hash) library(tidyverse) #&#39; R6 Class representing the RL environment for the problem RLEnvRandom &lt;- R6Class(&quot;RLEnvRandom&quot;, public = list( #&#39; @description Return all states (keys). getStates = function() { return(str_c(1:7)) }, #&#39; @description Return all actions (keys) for a state. #&#39; @param s State considered. getActions = function(s) { if (s == &quot;1&quot; | s == &quot;7&quot;) return(&quot;dummy&quot;) return(c(&quot;left&quot;, &quot;right&quot;)) }, #&#39; @description Returns an episode as a tibble with cols s, a, r (last col the terminal reward). #&#39; @param agent The agent that holds the model with current policy stored in pi. getEpisodePi = function(agent, startState) { if (startState == &quot;1&quot; | startState == &quot;7&quot;) { return(tibble::tibble(!!!c(&quot;s&quot;, &quot;a&quot;, &quot;r&quot;), .rows = 0)) # empty tibble } s &lt;- as.numeric(startState) df &lt;- tibble(s = rep(NA_character_, 1000), a = NA_character_, r = NA_real_) # a tibble with more rows than used for (i in 1:nrow(df)) { if (s == 1 | s == 7) { df &lt;- df[1:(i-1),] # remove unused rows break # have reached terminal state } r &lt;- 0 a &lt;- agent$getActionPi(str_c(s)) if (s == 6 &amp; a == &quot;right&quot;) r = 1 df$s[i] &lt;- s df$a[i] &lt;- a df$r[i] &lt;- r if (a == &quot;right&quot;) s &lt;- s + 1 if (a == &quot;left&quot;) s &lt;- s - 1 } return(df) }, #&#39; @description Returns next state and reward given current state and action in a list (with names `r` and `sN`). #&#39; @param s Current state. #&#39; @param a Current action. getTimeStepData = function(s, a) { s &lt;- as.numeric(s) if (a == &quot;left&quot; &amp; s &gt; 1 &amp; s &lt; 7) return(list(r = 0, sN = as.character(s-1))) if (a == &quot;right&quot; &amp; s &gt; 1 &amp; s &lt; 7) { if (s == 6) return(list(r = 1, sN = as.character(s+1))) return(list(r = 0, sN = as.character(s+1))) } if ((s == 1 | s == 7) &amp; a == &quot;dummy&quot;) return(list(r = 0, sN = NA_character_)) stop(&quot;Error finding next state and reward!&quot;) } ) ) env &lt;- RLEnvRandom$new() env$getTimeStepData(&quot;3&quot;, &quot;right&quot;) #&gt; $r #&gt; [1] 0 #&gt; #&gt; $sN #&gt; [1] &quot;4&quot; env$getTimeStepData(&quot;1&quot;, &quot;dummy&quot;) #&gt; $r #&gt; [1] 0 #&gt; #&gt; $sN #&gt; [1] NA env$getTimeStepData(&quot;6&quot;, &quot;right&quot;) #&gt; $r #&gt; [1] 1 #&gt; #&gt; $sN #&gt; [1] &quot;7&quot; Note we define a method getTimeStepData that takes a state and action and return the reward and next state. This method is used by the RL agent class in method policyEvalTD0: library(R6) library(hash) library(tidyverse) ## Generic RL agent for tabular data (R6 class) RLAgent &lt;- R6Class(&quot;RLAgent&quot;, public = list( #&#39; @field model The model is used to represent the information we have. The #&#39; model is represented using a hash list for the states. Each states contains #&#39; - A list with `actions` (a hash #&#39; list with actions). #&#39; - `pi` (a named vector with policy pr (only positive values). #&#39; - `piG` the greedy action (a string). #&#39; - `n` a visit counter #&#39; The `actions` hash list contains #&#39; - The action-values `q`. #&#39; - `n` a visit counter. model = NULL, #&#39; @description Create an object (when call new). initialize = function() { self$model &lt;- hash() return(invisible(NULL)) }, #&#39; @description Add state and action to the hash (only if not already added) #&#39; @param s State key/string. #&#39; @param a Action key/string. addStateAction = function(s, a) { if (!has.key(s, self$model)) addStates(s) if (!has.key(a, self$model[[s]]$actions)) self$model[[s]]$actions[[a]] &lt;- list(q = 0, n = 0) return(invisible(NULL)) }, #&#39; @description Add the states (keys) and define void policy and empty action hash. #&#39; @param states A vector of states (converted to strings). addStates = function(states) { keys &lt;- make.keys(states) self$model[keys] &lt;- list(pi = NA) # don&#39;t use pi = NULL since then won&#39;t be defined for (s in keys) { self$model[[s]]$v &lt;- NA self$model[[s]]$actions &lt;- hash() self$model[[s]]$n &lt;- 0 # counter visited } return(invisible(NULL)) }, #&#39; @description Add the actions to a state #&#39; @param s State (key). #&#39; @param actions A vector of actions (converted to strings). addActions = function(s, actions) { keys &lt;- make.keys(actions) for (a in keys) { self$addStateAction(s, a) } return(invisible(NULL)) }, #&#39; @description Add states and actions to the hash with initial values. If already exists nothing happens. #&#39; @param df A tibble with string columns `s` (states) and `a` (actions). addStatesAndActions = function(df) { for (i in 1:nrow(df)) { self$addStateAction(df$s[i], df$a[i]) } return(invisible(NULL)) }, #&#39; @description Set the action-values for all actions. #&#39; @param value The value. setActionValue = function(value = 0) { for (s in keys(self$model)) { for (a in keys(self$model[[s]]$actions)) { self$model[[s]]$actions[[a]]$q = value } } return(invisible(NULL)) }, #&#39; @description Set the state-value of states #&#39; @param states A vector of states. #&#39; @param value The value. setStateValue = function(states = keys(self$model), value = 0) { for (s in states) { self$model[[s]]$v &lt;- value } return(invisible(NULL)) }, #&#39; @description Set the action visit counter values for all actions. #&#39; @param ctrValue Counter value. setActionCtrValue = function(ctrValue = 0) { for (s in keys(self$model)) { for (a in keys(self$model[[s]]$actions)) { self$model[[s]]$actions[[a]]$n = ctrValue } } return(invisible(NULL)) }, #&#39; @description Set the action-values for a single action (including the counter values). #&#39; @param value The value. #&#39; @param ctrValue Counter value. setActionValueSingle = function(value = 0, ctrValue = 0, s, a) { self$model[[s]]$actions[[a]]$q = value self$model[[s]]$actions[[a]]$n = ctrValue return(invisible(NULL)) }, #&#39; @description Set the policy to a random epsilon-greedy policy. #&#39; @param eps Epsilon used in epsilon-greedy policy. setRandomEpsGreedyPolicy = function(eps) { states &lt;- keys(self$model) for (s in states) { actions &lt;- self$getActionKeys(s) self$model[[s]]$pi &lt;- rep(eps/length(actions), length(actions)) names(self$model[[s]]$pi) &lt;- actions piG &lt;- sample(self$getActionKeys(s), 1) self$model[[s]]$pi[piG] &lt;- self$model[[s]]$pi[piG] + 1 - eps } return(invisible(NULL)) }, #&#39; @description Set the policy to the optimal epsilon-greedy policy #&#39; @param eps Epsilon used in epsilon-greedy policy. #&#39; @param states States under consideration. setEpsGreedyPolicy = function(eps, states) { for (s in states) { actions &lt;- self$getActionKeys(s) self$model[[s]]$pi &lt;- rep(eps/length(actions), length(actions)) names(self$model[[s]]$pi) &lt;- actions idx &lt;- nnet::which.is.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose among max values at random # idx &lt;- which.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose first max # self$model[[s]]$piG &lt;- actions[idx] self$model[[s]]$pi[idx] &lt;- self$model[[s]]$pi[idx] + 1 - eps } return(invisible(NULL)) }, #&#39; @description Set the greedy policy (stored in piG) based on action-values. #&#39; @param states States under consideration. setGreedyPolicy = function(states = self$getStateKeys()) { for (s in states) { actions &lt;- self$getActionKeys(s) idx &lt;- nnet::which.is.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose among max values at random # idx &lt;- which.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose first max self$model[[s]]$piG &lt;- actions[idx] } return(invisible(NULL)) }, #&#39; @description Set the policy to the named vector pi for a set of states #&#39; @param states States under consideration. #&#39; @param pi A named vector with policy pr (only psitive values). setPolicy = function(states, pi) { for (s in states) { self$model[[s]]$pi &lt;- pi } return(invisible(NULL)) }, #&#39; @description Set the state visit counter values for all states. #&#39; @param ctrValue Counter value. setStateCtrValue = function(ctrValue = 0) { for (s in keys(self$model)) { self$model[[s]]$n = ctrValue } return(invisible(NULL)) }, #&#39; @description Return the state keys getStateKeys = function() { keys(self$model) }, #&#39; @description Return the state-value for a state and policy using the q/action-values #&#39; @param s A state. getStateValueQ = function(s) { pi &lt;- self$model[[s]]$pi # print(pi) val &lt;- 0 for (a in names(pi)) { val &lt;- val + pi[a] * self$model[[s]]$actions[[a]]$q # print(self$model[[s]]$actions[[a]]$q) } # print(val) return(val) }, #&#39; @description Return the state-values as a tibble #&#39; @param s A vector of state keys. getStateValues = function(s = keys(self$model)) { tibble(state = s) %&gt;% rowwise() %&gt;% mutate(v = self$model[[state]]$v) }, #&#39; @description Return the action keys #&#39; @param s The state considered. getActionKeys = function(s) { keys(self$model[[s]]$actions) }, #&#39; @description Return information about actions stored in a state #&#39; @param s The state considered. getActionInfo = function(s) { as.list(self$model[[s]]$actions) }, #&#39; @description Return the current policy as a tibble getPolicy = function(states = self$getStateKeys()) { map_dfr(states, .f = function(s) { list(state = s, action = names(self$model[[s]]$pi), pr = self$model[[s]]$pi) }) }, #&#39; @description Returns all action-values in a matrix (cols: actions, rows: states) getStateActionQMat = function() { states &lt;- keys(self$model) actions &lt;- unique(unlist(sapply(states, function(s) self$getActionKeys(s)))) m &lt;- matrix(NA, nrow = length(states), ncol = length(actions)) colnames(m) &lt;- actions rownames(m) &lt;- states for (s in states) { for (a in self$getActionKeys(s)) { m[s, a] &lt;- self$model[[s]]$actions[[a]]$q } } return(m) }, #&#39; @description Return the action-values as a tibble #&#39; @param states A vector of state keys. getActionValues = function(states = keys(self$model)) { map_dfr(states, .f = function(s) { list(state = s, action = keys(self$model[[s]]$actions), q = unlist(values(self$model[[s]]$actions)[&quot;q&quot;,]), n = unlist(values(self$model[[s]]$actions)[&quot;n&quot;,])) }) }, #&#39; @description Select next action using upper-confidence bound. Also update the visit counters for both state and selected action. #&#39; @return Action. getActionUCB = function(s, coeff = 1) { actions &lt;- self$getActionKeys(s) self$model[[s]]$n &lt;- self$model[[s]]$n + 1 # visit s qV &lt;- unlist(values(self$model[[s]]$actions)[&quot;q&quot;,]) nA &lt;- unlist(values(self$model[[s]]$actions)[&quot;n&quot;,]) nS &lt;- self$model[[s]]$n val &lt;- qV + coeff * sqrt(log(nS + 0.0001)/nA) idx &lt;- which.max(val) a &lt;- actions[idx] self$model[[s]]$actions[[a]]$n &lt;- self$model[[s]]$actions[[a]]$n + 1 # note there is a risk here if use every-visit for an episode then will update more than once implying slower convergence. return(a) }, #&#39; @description Select next action using epsilon-greedy policy based on action-values. Also update the visit counters for both state and selected action. #&#39; @return Action. getActionEG = function(s, eps) { self$model[[s]]$n &lt;- self$model[[s]]$n + 1 # visit s q &lt;- unlist(values(self$model[[s]]$actions)[&quot;q&quot;,]) actions &lt;- self$getActionKeys(s) pi &lt;- rep(eps/length(q), length(q)) idx &lt;- nnet::which.is.max(q) # choose among max values at random # idx &lt;- which.max(unlist(values(self$model[[s]]$actions)[&quot;q&quot;,])) # choose first max pi[idx] &lt;- pi[idx] + 1 - eps a &lt;- actions[sample(1:length(actions), 1, prob = pi)] self$model[[s]]$actions[[a]]$n &lt;- self$model[[s]]$actions[[a]]$n + 1 # note there is a risk here if use every-visit for an episode then will update more than once implying slower convergence. return(a) }, #&#39; @description Return and action sampled from the current policy pi. Also update the visit counters for both state and selected action. #&#39; @param s The state considered. getActionPi = function(s) { self$model[[s]]$n &lt;- self$model[[s]]$n + 1 # visit s pi &lt;- self$model[[s]]$pi actions &lt;- names(pi) a &lt;- sample(actions, 1, prob = pi) self$model[[s]]$actions[[a]]$n &lt;- self$model[[s]]$actions[[a]]$n + 1 # note there is a risk here if use every-visit for an episode then will update more than once implying slower convergence. return(a) }, # # getActionPi = function(s) { # pi &lt;- self$model[[s]]$pi # return(sample(names(pi), 1, prob = pi)) # }, #&#39; @description Policy evaluation using TD(0) #&#39; @param env The environment which must have a method `getTimeStepData(s,a)` that return a list with elements `r` (reward) and `sN` (next state). #&#39; @param gamma Discount rate. #&#39; @param alpha Step-size (use a fixed step-size). #&#39; @param maxE Maximum number of episodes generated. #&#39; @param maxEL Maximum episode length. #&#39; @param reset If true initialize all state-values to 0. #&#39; @param states Possible start states of each episode (one picked at random). #&#39; @param ... Further arguments passed to `getEpisode` e.g the coefficient used for upper-confidence bound action selection. policyEvalTD0 = function(env, gamma = 1, alpha = 0.1, maxE = 1000, maxEL = 10000, reset = TRUE, states = self$getStateKeys()) { if (reset) self$setStateValue(self$getStateKeys()) # set to 0 for (ite in 1:maxE) { s &lt;- sample(states, 1) # pick start state among states for (i in 1:maxEL) { # for episode with ss as start (max length 100000) a &lt;- self$getActionPi(s) dat &lt;- env$getTimeStepData(s,a) # get next state and reward r &lt;- dat$r sN &lt;- dat$sN if (is.na(sN) | is.na(a)) break # start generating new episode oldV &lt;- self$model[[s]]$v self$model[[s]]$v &lt;- oldV + alpha * (r + gamma * self$model[[sN]]$v - oldV) s &lt;- sN } } }, #&#39; @description Policy evaluation using every-visit Monte Carlo sampling. #&#39; @param env The environment which must have a method `getEpisode(agent, s, coeff)` that return an episode as a tibble with #&#39; cols s, a, r (last col the terminal reward). This method also must update the visit counters if needed! This is also #&#39; the method that decides which action selection method is used. #&#39; @param gamma Discount rate. #&#39; @param theta Threshold parameter. #&#39; @param minIte Minimum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param maxIte Maximum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param reset If true initialize all state-values to 0. #&#39; @param states Start states in the episodes, which all are visited using a for loop. #&#39; @param verbose If true then print info for each episode. policyEvalMC = function(env, gamma = 1, theta = 0.1, minIte = 100, maxIte = 1000, reset = TRUE, states = self$getStateKeys(), verbose = FALSE) { if (reset) { self$setStateValue() # set to 0 self$setActionCtrValue() # reset counter self$setStateCtrValue() # reset counter } for (ite in 1:maxIte) { delta &lt;- 0 for (ss in states) { # for episode with s as start df &lt;- env$getEpisodePi(self, ss) # an episode stored in a tibble with cols s, a, r (last col the terminal reward) if (nrow(df) == 0) next df &lt;- df %&gt;% mutate(nS = NA, g = NA, oldV = NA, v = NA) gain &lt;- 0 for (i in nrow(df):1) { s &lt;- df$s[i] a &lt;- df$a[i] gain &lt;- df$r[i] + gamma * gain ctr &lt;- self$model[[s]]$n oldV &lt;- self$model[[s]]$v stepSize &lt;- (1/ctr) self$model[[s]]$v &lt;- oldV + stepSize * (gain - oldV) newV &lt;- self$model[[s]]$v delta &lt;- max(delta, abs(oldV - newV)) if (verbose) df$g[i] &lt;- gain; df$nS[i] &lt;- ctr; df$oldV[i] &lt;- oldV; df$v[i] &lt;- newV } if (verbose) print(df) } if (delta &lt; theta &amp; ite &gt;= minIte) break } if (ite == maxIte) warning(&quot;Polcy eval algorithm stopped at max iterations allowed: &quot;, maxIte) message(str_c(&quot;Policy eval algorihm finished in &quot;, ite, &quot; iterations.&quot;)) return(invisible(NULL)) }, #&#39; @description Generalized policy iteration using on policy every-visit Monte Carlo sampling. #&#39; @param env The environment which must have a method `getEpisode(agent, s, coeff)` that return an episode as a tibble with #&#39; cols s, a, r (last col the terminal reward). This method also must update the visit counters if needed! This is also #&#39; the method that decides which action selection method is used. #&#39; @param gamma Discount rate. #&#39; @param theta Threshold parameter. #&#39; @param minIte Minimum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param maxIte Maximum number of iterations for each start state (all `states` are used a start state in one iteration). #&#39; @param reset If true initialize all action-values to 0. #&#39; @param states Start states in the episodes, which all are visited using a for loop. #&#39; @param eps Epsilon used for the epsilon-greedy policy. #&#39; @param verbose If true then print info for each episode. gpiOnPolicyMC = function(env, gamma = 1, theta = 0.1, minIte = 100, maxIte = 1000, reset = TRUE, states = self$getStateKeys(), eps = 0.1, verbose = FALSE) { if (reset) { self$setActionValue() # set to 0 self$setActionCtrValue() # reset counter self$setStateCtrValue() # reset counter } # self$setRandomEpsGreedyPolicy(epsilon) self$setEpsGreedyPolicy(eps, self$getStateKeys()) # self$setGreedyPolicy() for (ite in 1:maxIte) { delta &lt;- 0 # stable &lt;- TRUE for (ss in states) { # for episode with s as start df &lt;- env$getEpisode(self, ss, eps) # an episode stored in a tibble with cols s, a, r (last col the terminal reward) if (nrow(df) == 0) next df &lt;- df %&gt;% mutate(nA = NA, nS = NA, oldQ = NA, q = NA, g = NA, oldV = NA, v = NA) gain &lt;- 0 for (i in nrow(df):1) { s &lt;- df$s[i] a &lt;- df$a[i] gain &lt;- df$r[i] + gamma * gain ctr &lt;- self$model[[s]]$actions[[a]]$n oldQ &lt;- self$model[[s]]$actions[[a]]$q oldV &lt;- self$getStateValueQ(s) stepSize &lt;- (1/ctr)^0.5 self$model[[s]]$actions[[a]]$q &lt;- oldQ + stepSize * (gain - oldQ) # self$model[[s]]$actions[[a]]$q &lt;- oldQ + 0.1 * (gain - oldQ) self$setEpsGreedyPolicy(eps, s) newV &lt;- self$getStateValueQ(s) delta &lt;- max(delta, abs(oldV - newV)) if (verbose) df$oldQ[i] &lt;- oldQ; df$q[i] &lt;- self$model[[s]]$actions[[a]]$q; df$g[i] &lt;- gain; df$nA[i] &lt;- ctr; df$nS[i] &lt;- self$model[[s]]$n; df$oldV[i] &lt;- oldV; df$v[i] &lt;- newV } if (verbose) print(df) } if (delta &lt; theta &amp; ite &gt;= minIte) break } if (ite == maxIte) warning(&quot;GPI algorithm stopped at max iterations allowed: &quot;, maxIte) message(str_c(&quot;GPI algorihm finished in &quot;, ite, &quot; iterations.&quot;)) return(invisible(NULL)) } ) ) We can now define the RL agent and set the policy which must be done before calling TD(0): agent &lt;- RLAgent$new() agent$addStates(env$getStates()) # add states for (s in agent$getStateKeys()) { # add actions agent$addActions(s, env$getActions(s)) } ## Set the policy states &lt;- str_c(2:6) pi = c(&quot;left&quot; = 0.5, &quot;right&quot; = 0.5) agent$setPolicy(states, pi) pi = c(&quot;dummy&quot; = 1) agent$setPolicy(c(&quot;1&quot;, &quot;7&quot;), pi) agent$getPolicy() #&gt; # A tibble: 12 × 3 #&gt; state action pr #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 dummy 1 #&gt; 2 2 left 0.5 #&gt; 3 2 right 0.5 #&gt; 4 3 left 0.5 #&gt; 5 3 right 0.5 #&gt; 6 4 left 0.5 #&gt; 7 4 right 0.5 #&gt; 8 5 left 0.5 #&gt; 9 5 right 0.5 #&gt; 10 6 left 0.5 #&gt; 11 6 right 0.5 #&gt; 12 7 dummy 1 Note a policy must be defined for each possible state that may be generated in an episode. We can now run TD(0): set.seed(875) ## One episode agent$setStateValue(states, 0.5) agent$setStateValue(c(&quot;1&quot;, &quot;7&quot;), 0) agent$getStateValues() #&gt; # A tibble: 7 × 2 #&gt; # Rowwise: #&gt; state v #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 0 #&gt; 2 2 0.5 #&gt; 3 3 0.5 #&gt; 4 4 0.5 #&gt; 5 5 0.5 #&gt; 6 6 0.5 #&gt; 7 7 0 agent$policyEvalTD0(env, gamma = 1, states = &quot;4&quot;, maxE = 1, reset = F) resTD0 &lt;- agent$getStateValues() %&gt;% mutate(episodes = 1) %&gt;% print() #&gt; # A tibble: 7 × 3 #&gt; # Rowwise: #&gt; state v episodes #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 0 1 #&gt; 2 2 0.5 1 #&gt; 3 3 0.5 1 #&gt; 4 4 0.5 1 #&gt; 5 5 0.5 1 #&gt; 6 6 0.55 1 #&gt; 7 7 0 1 × Solution ## 10 episodes agent$setStateValue(states, 0.5) agent$setStateValue(c(&quot;1&quot;, &quot;7&quot;), 0) agent$policyEvalTD0(env, gamma = 1, states = &quot;4&quot;, maxE = 10, reset = F) resTD0 &lt;- bind_rows(resTD0, agent$getStateValues() %&gt;% mutate(episodes = 10)) ## 100 episodes agent$setStateValue(states, 0.5) agent$setStateValue(c(&quot;1&quot;, &quot;7&quot;), 0) agent$policyEvalTD0(env, gamma = 1, states = &quot;4&quot;, maxE = 100, reset = F) resTD0 &lt;- bind_rows(resTD0, agent$getStateValues() %&gt;% mutate(episodes = 100)) %&gt;% mutate(state = as.numeric(state), episodes = as.character(episodes)) resTD0 &lt;- bind_rows(resTD0,mdp$getStateValues() %&gt;% mutate(state = as.numeric(state), episodes = &quot;mdp&quot;)) %&gt;% filter(state &gt; 1, state &lt; 7) resTD0 %&gt;% ggplot(aes(x = state, y = v, col = episodes)) + geom_line() + geom_point() resTD0 &lt;- resTD0 %&gt;% mutate(alpha = 0.1, alg = &quot;TD0&quot;) Close Solution Note we first have to set the state-values to the default specified. Next, we run TD(0) prediction with one episode maxE = 1 and starting state 4. You now have to run similar code for 10 and 100 episodes, store the result and plot a line for each result. × Solution set.seed(4346) env$getEpisodePi(agent, &quot;4&quot;) # test: this is the function used to generate an episode in policyEvalMC #&gt; # A tibble: 3 × 3 #&gt; s a r #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 4 left 0 #&gt; 2 3 left 0 #&gt; 3 2 left 0 ## 1 episode agent$setStateValue(states, 0.5) agent$setStateValue(c(&quot;1&quot;, &quot;7&quot;), 0) agent$setStateCtrValue(1) agent$policyEvalMC(env, gamma = 1, states = &quot;4&quot;, minIte = 1, maxIte = 1, reset = F, verbose = T) #&gt; # A tibble: 3 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 left 0 2 0 0.5 0.25 #&gt; 2 3 left 0 2 0 0.5 0.25 #&gt; 3 2 left 0 2 0 0.5 0.25 resMC &lt;- agent$getStateValues() %&gt;% mutate(episodes = 1) %&gt;% print() #&gt; # A tibble: 7 × 3 #&gt; # Rowwise: #&gt; state v episodes #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 0 1 #&gt; 2 2 0.25 1 #&gt; 3 3 0.25 1 #&gt; 4 4 0.25 1 #&gt; 5 5 0.5 1 #&gt; 6 6 0.5 1 #&gt; 7 7 0 1 ## 10 episodes agent$setStateValue(states, 0.5) agent$setStateValue(c(&quot;1&quot;, &quot;7&quot;), 0) agent$setStateCtrValue(1) agent$policyEvalMC(env, gamma = 1, states = &quot;4&quot;, minIte = 10, maxIte = 10, reset = F, verbose = T) #&gt; # A tibble: 3 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 right 0 2 1 0.5 0.75 #&gt; 2 5 right 0 2 1 0.5 0.75 #&gt; 3 6 right 1 2 1 0.5 0.75 #&gt; # A tibble: 3 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 right 0 3 1 0.75 0.833 #&gt; 2 5 right 0 3 1 0.75 0.833 #&gt; 3 6 right 1 3 1 0.75 0.833 #&gt; # A tibble: 7 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 right 0 5 1 0.867 0.893 #&gt; 2 5 right 0 6 1 0.884 0.904 #&gt; 3 6 left 0 5 1 0.867 0.893 #&gt; 4 5 left 0 6 1 0.861 0.884 #&gt; 5 4 right 0 5 1 0.833 0.867 #&gt; 6 5 right 0 6 1 0.833 0.861 #&gt; 7 6 right 1 5 1 0.833 0.867 #&gt; # A tibble: 7 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 right 0 7 0 0.766 0.656 #&gt; 2 5 left 0 7 0 0.904 0.774 #&gt; 3 4 left 0 7 0 0.893 0.766 #&gt; 4 3 left 0 3 0 0.333 0.222 #&gt; 5 2 right 0 3 0 0.333 0.222 #&gt; 6 3 left 0 3 0 0.5 0.333 #&gt; 7 2 left 0 3 0 0.5 0.333 #&gt; # A tibble: 7 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 left 0 9 0 0.583 0.519 #&gt; 2 3 right 0 6 0 0.154 0.129 #&gt; 3 4 left 0 9 0 0.656 0.583 #&gt; 4 3 left 0 6 0 0.185 0.154 #&gt; 5 2 right 0 5 0 0.178 0.142 #&gt; 6 3 left 0 6 0 0.222 0.185 #&gt; 7 2 left 0 5 0 0.222 0.178 #&gt; # A tibble: 3 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 right 0 10 1 0.519 0.567 #&gt; 2 5 right 0 8 1 0.774 0.803 #&gt; 3 6 right 1 6 1 0.893 0.911 #&gt; # A tibble: 3 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 left 0 11 0 0.567 0.515 #&gt; 2 3 left 0 7 0 0.129 0.110 #&gt; 3 2 left 0 6 0 0.142 0.119 #&gt; # A tibble: 11 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 left 0 14 1 0.582 0.612 #&gt; 2 3 right 0 11 1 0.332 0.392 #&gt; 3 4 left 0 14 1 0.550 0.582 #&gt; 4 3 left 0 11 1 0.265 0.332 #&gt; 5 2 right 0 8 1 0.229 0.325 #&gt; 6 3 left 0 11 1 0.191 0.265 #&gt; 7 2 right 0 8 1 0.119 0.229 #&gt; 8 3 right 0 11 1 0.110 0.191 #&gt; 9 4 right 0 14 1 0.515 0.550 #&gt; 10 5 right 0 9 1 0.803 0.825 #&gt; 11 6 right 1 7 1 0.911 0.924 #&gt; # A tibble: 17 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 right 0 21 0 0.457 0.435 #&gt; 2 5 left 0 12 0 0.693 0.635 #&gt; 3 4 left 0 21 0 0.479 0.457 #&gt; 4 3 right 0 16 0 0.303 0.284 #&gt; 5 4 right 0 21 0 0.503 0.479 #&gt; 6 5 left 0 12 0 0.756 0.693 #&gt; 7 4 left 0 21 0 0.529 0.503 #&gt; 8 3 right 0 16 0 0.323 0.303 #&gt; 9 4 left 0 21 0 0.555 0.529 #&gt; 10 3 right 0 16 0 0.345 0.323 #&gt; 11 4 right 0 21 0 0.583 0.555 #&gt; 12 5 left 0 12 0 0.825 0.756 #&gt; 13 4 left 0 21 0 0.612 0.583 #&gt; 14 3 left 0 16 0 0.368 0.345 #&gt; 15 2 right 0 10 0 0.293 0.263 #&gt; 16 3 left 0 16 0 0.392 0.368 #&gt; 17 2 left 0 10 0 0.325 0.293 #&gt; # A tibble: 13 × 7 #&gt; s a r nS g oldV v #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 4 right 0 25 1 0.500 0.520 #&gt; 2 5 left 0 16 1 0.699 0.718 #&gt; 3 4 left 0 25 1 0.479 0.500 #&gt; 4 3 left 0 18 1 0.324 0.361 #&gt; 5 2 right 0 11 1 0.263 0.330 #&gt; 6 3 right 0 18 1 0.284 0.324 #&gt; 7 4 right 0 25 1 0.457 0.479 #&gt; 8 5 left 0 16 1 0.679 0.699 #&gt; 9 4 right 0 25 1 0.435 0.457 #&gt; 10 5 right 0 16 1 0.658 0.679 #&gt; 11 6 left 0 9 1 0.932 0.940 #&gt; 12 5 right 0 16 1 0.635 0.658 #&gt; 13 6 right 1 9 1 0.924 0.932 resMC &lt;- bind_rows(resMC, agent$getStateValues() %&gt;% mutate(episodes = 10)) ## 100 episodes agent$setStateValue(states, 0.5) agent$setStateValue(c(&quot;1&quot;, &quot;7&quot;), 0) agent$setStateCtrValue(1) agent$policyEvalMC(env, gamma = 1, states = &quot;4&quot;, minIte = 100, maxIte = 100, reset = F) resMC &lt;- bind_rows(resMC, agent$getStateValues() %&gt;% mutate(episodes = 100)) %&gt;% mutate(state = as.numeric(state), episodes = as.character(episodes)) resMC &lt;- bind_rows(resMC,mdp$getStateValues() %&gt;% mutate(state = as.numeric(state), episodes = &quot;mdp&quot;)) %&gt;% filter(state &gt; 1, state &lt; 7) resMC %&gt;% ggplot(aes(x = state, y = v, col = episodes)) + geom_line() + geom_point() resMC &lt;- resMC %&gt;% mutate(alpha = 0.1, alg = &quot;MC&quot;) Close Solution Run an MC prediction algorithm with \\(\\alpha = 0.1\\) (see Figure 6.1 running for 1, 10 and 100 episodes. Hint you have to call policyEvalMC instead of policyEvalTD0. Let us join the results for TD(0) and MC and calculate the root mean square (RMS) error \\[\\sqrt{\\frac{1}{5}\\sum_{s=2}^6(V(s)-v_\\pi(s))^2}\\]. resMDP &lt;- mdp$getStateValues() %&gt;% mutate(state = as.numeric(state)) %&gt;% rename(vMDP = v) %&gt;% print() #&gt; # A tibble: 7 × 2 #&gt; state vMDP #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 0 #&gt; 2 2 0.167 #&gt; 3 3 0.333 #&gt; 4 4 0.500 #&gt; 5 5 0.667 #&gt; 6 6 0.833 #&gt; 7 7 0 res &lt;- bind_rows(resTD0, resMC) %&gt;% filter(episodes != &quot;mdp&quot;) %&gt;% left_join(resMDP) %&gt;% group_by(episodes, alg, alpha) %&gt;% summarise(rms = sqrt(0.2 * sum(v-vMDP)^2)) %&gt;% print() #&gt; # A tibble: 6 × 4 #&gt; # Groups: episodes, alg [6] #&gt; episodes alg alpha rms #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 MC 0.1 0.335 #&gt; 2 1 TD0 0.1 0.0224 #&gt; 3 10 MC 0.1 0.165 #&gt; 4 10 TD0 0.1 0.0879 #&gt; 5 100 MC 0.1 0.215 #&gt; 6 100 TD0 0.1 0.0605 Which algorithm is best in estimating the state-values? Explain. The results are dependent on the value of the step-size parameter. Let us estimate the state-values using TD(0) for \\(\\alpha = 0.1, 0.2\\) and 0.5 and plot the root mean square (RMS) error given the number of episodes: set.seed(98) res &lt;- NULL for (run in 1:20) { for (alpha in c(0.1, 0.2, 0.5)) { agent$setStateValue(states, 0.5) agent$setStateValue(c(&quot;1&quot;, &quot;7&quot;), 0) eOld &lt;- 0 for (e in c(1,seq(5, 100, by = 5))) { agent$policyEvalTD0(env, gamma = 1, states = &quot;4&quot;, maxE = e - eOld, alpha = alpha, reset = F) eOld &lt;- e res &lt;- bind_rows(res, agent$getStateValues() %&gt;% mutate(episodes = e, alpha = alpha, run = run)) } } } resMDP &lt;- mdp$getStateValues() %&gt;% rename(vMDP = v) left_join(res, resMDP) %&gt;% group_by(episodes, alpha, run) %&gt;% summarise(rms = sqrt(0.2 * sum((v-vMDP)^2))) %&gt;% group_by(episodes, alpha) %&gt;% summarize(rms = mean(rms)) %&gt;% ggplot(aes(x = episodes, y = rms, col = factor(alpha))) + geom_line() Explain the plot. References "],["mod-td-control.html", "Module 8 Temporal difference methods for control 8.1 Learning outcomes 8.2 Textbook readings 8.3 SARSA - On-policy GPI using TD 8.4 Q-learning - Off-policy GPI using TD 8.5 Expected SARSA - GPI using TD 8.6 Summary 8.7 Exercises", " Module 8 Temporal difference methods for control In Module 7 temporal difference (TD) was used to estimate state-values. In this module we focus on improving the policy (control) by applying generalized policy iteration (GPI) using TD methods. GPI repeatedly apply policy evaluation and policy improvement. Since we do not have a model (the transition probability matrix and reward distribution are not known) all our action-values are estimates. Hence an element of exploration are needed to estimate the action-values. For convergence to the optimal policy a model-free GPI algorithm must satisfy: Infinite exploration: all state-action \\((s,a)\\) pairs should be explored infinitely many times as the number of iterations go to infinity (in the limit), i.e. as the number of iterations \\(k\\) goes to infinity the number of visits \\(n_k\\) does too \\[\\lim_{k\\rightarrow\\infty} n_k(s, a) = \\infty.\\] Greedy in the limit: while we maintain infinite exploration, we do eventually need to converge to the optimal policy: \\[\\lim_{k\\rightarrow\\infty} \\pi_k(a|s) = 1 \\text{ for } a = \\arg\\max_a q(s, a).\\] 8.1 Learning outcomes By the end of this module, you are expected to: Describe how generalized policy iteration (GPI) can be used with TD to find improved policies. Identify the properties that must the satisfied for GPI to converge to the optimal policy. Derive and explain SARSA an on-policy GPI algorithm using TD. Describe the relationship between SARSA and the Bellman equations. Derive and explain Q-learning an off-policy GPI algorithm using TD. Argue how Q-learning can be off-policy without using importance sampling. Describe the relationship between Q-learning and the Bellman optimality equations. Derive and explain expected SARSA an on/off-policy GPI algorithm using TD. Describe the relationship between expected SARSA and the Bellman equations. Explain how expected SARSA generalizes Q-learning. List the differences between Q-learning, SARSA and expected SARSA. Apply the algorithms to an MDP to find the optimal policy. The learning outcomes relate to the overall learning goals number 3, 4, 6, 9, and 12 of the course. 8.2 Textbook readings For this week, you will need to read Chapter 6.4-6.6 in Sutton and Barto (2018). Read it before continuing this module. A summary of the book notation can be seen here. Slides for this module can be seen here. You do not have to look at them before the lecture! 8.3 SARSA - On-policy GPI using TD The first GPI algorithm we will consider is SARSA. Since we do not have a model we need to estimate action-values so the optimal policy can be found using \\(q_*\\) (see Eq. (4.3)). Hence to predict action-values for a policy \\(\\pi\\), the incremental update Eq. (7.1) must be modified to use \\(Q\\) values: \\[ Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha \\left[R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t) \\right] \\] Note given a policy \\(\\pi\\) you need to know \\(S_t, A_t, R_{t+1}, S_{t+1}, A_{t+1}\\) or short SARSA before you can make an update. This acronym is used to name the algorithm. The algorithm is given in Figure 8.1. To ensure infinite exploration of all action-values, we need e.g. an \\(\\epsilon\\)-greedy policy. The algorithm can also be applied for processes with continuing tasks. To ensure greedy in the limit a decreasing epsilon can be used (e.g. \\(\\epsilon = 1/t\\)). No stopping criterion is given but could stop when small differences in action-values are observed. Figure 8.1: SARSA - On-policy GPI using TD (Sutton and Barto 2018). SARSA is a sample based algorithm that do updates based on the Bellman equation for action-values (\\(q\\)): \\[ \\begin{align} q_\\pi(s, a) &amp;= \\mathbb{E}_\\pi[G_t | S_t = s, A_t = a] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1} + \\gamma G_{t+1} | S_t = s, A_t = a] \\\\ &amp;= \\sum_{s&#39;,r} p(s&#39;, r | s, a) \\left(r + \\gamma v_\\pi(s&#39;)\\right) \\\\ &amp;= \\sum_{s&#39;,r} p(s&#39;, r | s, a) \\left(r + \\gamma \\sum_{a&#39;} \\pi(a&#39;|s) q_\\pi(s&#39;, a&#39;)\\right). \\end{align} \\] That is, we update the estimate based on samples \\(r\\) and the estimate \\(q_\\pi\\) in \\(s&#39;\\). This is the same approach as policy iteration in DP: we first calculate new estimates of \\(q_\\pi\\) given the current policy \\(\\pi\\) and then improve. Hence SARSA is a sample based version of policy iteration in DP. 8.4 Q-learning - Off-policy GPI using TD Q-learning resembles SARSA; however there are some differences. The algorithm is given in Figure 8.2. Note the incremental update equation is now: \\[\\begin{equation} Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha \\left[R_{t+1} + \\gamma \\max_{a} Q(S_{t+1}, a) - Q(S_t, A_t) \\right] \\end{equation}\\] That is, the next action used to update \\(Q\\) is selected greedy. That is, we are no longer following an \\(\\epsilon\\)-greedy policy for our updates. Figure 8.2: Q-learning - Off-policy GPI using TD (Sutton and Barto 2018). SARSA is an on-policy algorithm, meaning that the behavioural and target policy is the same, e.g. an \\(\\epsilon\\)-greedy policy to ensure exploration. That is, for fixed \\(\\epsilon\\) the greedy in the limit assumption is not fulfilled. Q-learning, on the other hand, is an off-policy algorithm where the behavioural policy is an \\(\\epsilon\\)-greedy and the target policy is the (deterministic) greedy policy. That is, Q-learning fulfil both the ‘infinite exploration’ and ‘greedy in the limit’ assumptions. Note under MC prediction an off-policy algorithm needed to use importance sampling to estimate the action-value of the target policy (see Section 6.5). This is not necessary for one-step TD, since \\[ \\begin{align} q_\\pi(s,a) &amp;= \\mathbb{E}_{\\pi}[R_t + \\gamma G_{t+1}|S_t = s, A_t = a] \\\\ &amp;= \\sum_{s&#39;,r} p(s&#39;, r | s, a) \\left(r + \\gamma \\sum_{a&#39;} \\pi(a&#39;|s) q_\\pi(s&#39;, a&#39;)\\right) \\\\ &amp;= \\sum_{s&#39;,r} p(s&#39;, r | s, a) \\left(r + \\gamma \\max_{a&#39;} q_\\pi(s&#39;, a&#39;)\\right) \\\\ \\end{align} \\tag{8.1} \\] That is, because the target policy is greedy and deterministic expectation the \\(G_{t+1}\\) becomes a maximum. Hence we can update the action-value estimates \\(Q\\) for the target policy \\(\\pi\\) even though we sample from an \\(\\epsilon\\)-greedy behavioural policy. Q-learning is a sample based algorithm that do updates based on the Bellman optimality equation for action-values (\\(q_*\\)): \\[ \\begin{align} q_*(s, a) &amp;= \\max_\\pi q_\\pi(s, a) \\\\ &amp;= \\max_\\pi \\sum_{s&#39;,r} p(s&#39;, r | s, a) \\left(r + \\gamma v_\\pi(s&#39;)\\right) \\\\ &amp;= \\sum_{s&#39;,r} p(s&#39;, r | s, a) \\left(r + \\gamma \\max_\\pi v_\\pi(s&#39;)\\right) \\\\ &amp;= \\sum_{s&#39;,r} p(s&#39;, r | s, a) \\left(r + \\gamma \\max_{a&#39;} q_*(s&#39;, a&#39;)\\right) \\end{align} \\] That is, we update the estimate based on samples \\(r\\) and the estimate \\(q_*\\) in \\(s&#39;\\). This is the same approach as value iteration in DP: we update the estimates of \\(q_\\pi\\) and improve the policy in one operation. Hence Q-learning is a sample based version of value iteration in DP. 8.5 Expected SARSA - GPI using TD The expected SARSA, as SARSA, focus on the Bellman equation (8.1). SARSA generate action \\(A_{t+1}\\) from the policy \\(\\pi\\) and use the estimated action-value of \\((S_{t+1},A_{t+1})\\). However, since we know the current policy \\(\\pi\\), we might update based on the expected value instead: \\[ Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha \\left[R_{t+1} + \\gamma \\sum_{a} \\pi(a | S_{t+1}) Q(S_{t+1}, a) - Q(S_t, A_t) \\right] \\\\ \\] That is, we use a better estimate of the Bellman equation (8.1) by not sampling \\(A_{t+1}\\) but using the (deterministic) expectation over all actions instead. Doing so reduces the variance induced by selecting random actions according to an \\(\\epsilon\\)-greedy policy. As a result, given the same amount of experiences, expected SARSA generally performs better than SARSA, but has a higher computational cost. Expected SARSA is more robust to different step-size values. The incremental update formula can be written as \\[ Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha \\left[T_t - Q(S_t, A_t) \\right] = (1-\\alpha)Q(S_t, A_t) + \\alpha T_t, \\] with step-size \\(\\alpha\\) and target \\(T_t\\). For SARSA the target is \\[T_t = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}),\\] and for expected SARSA the target is: \\[T_t = R_{t+1} + \\gamma \\sum_{a} \\pi(a | S_{t+1}) Q(S_{t+1}, a).\\] Now assume that we have run the algorithm over many time-steps so that our estimates \\(Q(S_t, A_t)\\) are close to \\(q_*(S_t, A_t)\\). Since the target in expected SARSA is deterministic (we do not sample \\(A_{t+1}\\)), the target \\(T_t \\approx Q(S_t, A_t)\\) and no matter the step-size \\(Q(S_t, A_t)\\) will be updated to the same value. On the other hand, the target in SARSA uses a sample action \\(A_{t+1}\\) that might have an action-value far from the expectation. This implies that for large step-sizes \\(Q(S_t, A_t)\\) will be updated to the target which is wrong. Hence SARSA is more sensitive to large step-sizes. Expected SARSA can be both on-policy and off-policy. If the behavioural policy and the target policy are different it is off-policy. If they are the same it is on-policy. For instance, expected SARSA is off-policy if the target policy is greedy and the behavioural policy \\(\\epsilon\\)-greedy. In which case expected SARSA becomes Q-learning since the expectation of a greedy policy is the maximum value (\\(\\pi(s|a) = 1\\) here). Hence expected SARSA can be seen as a generalisation of Q-learning that improves SARSA. 8.6 Summary Read Chapter 6.9 in Sutton and Barto (2018). 8.7 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Sometimes solutions can be seen by pressing the button besides a question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! References "],["mod-r-setup.html", "A Setting up R", " A Setting up R R is a programming language and free software environment. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. For a further overview and description of the history of R see Chapter 2 in Peng (2018). R can be run from a terminal but in general you use an IDE (integrated development environment) RStudio for running R and to saving your work. R and RStudio can either be run from your laptop or using RStudio Cloud which run R in the cloud using your browser. During this course it is recommend to use RStudio on your laptop since there is no limit on CPU usage. If you need to install R and RStudio on your laptop check this out. If you need a brushup on R have a look at DataCamp. First, signup for a course group. Next, have a look at the free courses such as Introduction to R. DataCamp runs all the courses in your browser. That is, R is run on a server and you do not use RStudio here. References "],["groups.html", "B Working in groups", " B Working in groups During the course you have been allocated into groups. You are expected to solve the exercises and write the project report in your group. Before you start, it is a good idea to agree on a set of group rules. First, agree on a coding convention when you are going to use R. Most people in the R community use snake case but camel case is also okay. Next, setup rules on when to meet and how you will organize the work. For instance, it is a good idea that all try to solve some of the exercises before you meet and you then discuss the answers, problems etc. Finally, it is a good idea to have a common place for your code. You have different options: Use a cloud storage services such as Dropbox, OneDrive or Google Drive. Use a version control system such as Git together with GitHub. GitHub is a code sharing and publishing service and may be seen as a social networking site for programmers. If you use RStudio Cloud then one person in the group can create a shared workspace with projects: First create a new workspace named e.g. Shared. Press Members and add the group members as moderators. Now go back to Projects in the RL workspace and move one project to the shared workspace. Rename it to e.g. Group Project. Members will now have access to this project where you can share code. NOTE you can not work collectively on a file simultaneously. That is, only one member can change a file at a time! Hence it is a good idea to have your own private project to work on and use this project as a place where you can share code. If you want to download a project to your laptop then press the export button. The benefit of a cloud storage service is that it is well known to you and easy to setup. Cons are that you cannot work on the same file simultaneously. The benefit of Git and GitHub is that it manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. Here you can work on files simultaneously. Moreover, it can be used from within RStudio. Cons are that it is harder to setup and learn. For a detailed description see Why Git? Why GitHub?. "],["coding-convention.html", "C Coding/naming convention C.1 Commenting your code", " C Coding/naming convention The main reason for using a consistent set of coding conventions is to standardize the structure and coding style of an application so that you and others can easily read and understand the code. Good coding conventions result in precise, readable, and unambiguous source code that is consistent with other language conventions and as intuitive as possible. Different ways of naming you variables exists. You are advised to adopt a naming convention; some use snake case others use camel case. The R community mostly use snake case but camel case is also okay. Choose the naming convention you like best in your study group. But stick only to one of them. A few examples: this_is_snake_case # note you do not use capital letters here thisIsCamelCase # you start each word with a capital letter (except the first) When defining variables and functions, it is in general good practice to use nouns for variables and verbs for functions. C.1 Commenting your code It is always good practice to comment your code. Such that others can get a fast overview and understand your code easier. We will use roxygen documentation comments which are widely known. #&#39; Subtract two vectors #&#39; #&#39; @param x First vector. #&#39; @param y Vector to be subtracted. #&#39; #&#39; @return The difference. #&#39; @export #&#39; #&#39; @examples #&#39; subtract(x = c(5,5), y = c(2,3)) subtract &lt;- function(x, y) { return(x-y) } You can add a roxygen skeleton automatically using Code &gt; Insert Roxygen Skeleton in RStudio. "],["annotate.html", "D Annotate the course notes", " D Annotate the course notes I recommend using hypothes.is to annotate the online course notes. You can create both private and public annotations. Collaborative annotation helps people connect to each other and what they’re reading, even when they’re keeping their distance. You may also use public notes to help me indicate spell errors, unclear content etc. in the notes. "],["help.html", "E Getting help", " E Getting help We all get stuck sometimes and need some help. Below are some advises on how to help yourself and ask for help: If you have a question related to the theory of RL: Ask it during the lecture or in the breaks Ask it at our course forum and we (the teacher and other students) will try to answer your question asap. If you have a question related to R: First try to understand the error message and solve the problem. You may try to debug your code by inserting browser() in your R code. Further details about debugging can be seen here. Google is your friend. This is always the next step. Try searches like “r dplyr filter”, “r tidyverse”, “r subset vector”, etc. Do you need help for a specific function in R then try ?[function-name] such as ?geom_line, ?mutate, etc. Mostly, focus on the last section with examples. Moreover, some packages may have written vignettes try browseVignettes(package = \"package_name\") to check. Have a look at Help &gt; Cheatsheets in RStudio. If you can’t find an answer then it is time to ask on-line. I recommend asking a question at stackoverflow. To make your question effective, the idea is to make things as easy as possible for someone to answer. This stack overflow thread How to make a great R reproducible example? give you some good hints. The process of providing a good minimal reproducible example (reprex) often causes you to answer your own question! See also Stack Exchange’s ‘How to ask’ and How to make a reprex at tidyverse. Ask it at our course forum and we (the teacher and other students) will try to answer your question asap. Note help using mail correspondence is not supported! "],["mod-lg-course.html", "F Learning goals", " F Learning goals The purpose of this course is to give you an introduction and knowledge about reinforcement learning (RL). After having participated in the course, you must, in addition to achieving general academic skills, demonstrate: Knowledge of RL for Bandit problems Markov decision processes and ways to optimize them the exploration vs exploitation challenge in RL and approaches for addressing this challenge the role of policy evaluation with stochastic approximation in the context of RL Skills to define the key features of RL that distinguishes it from other machine learning techniques discuss fundamental concepts in RL describe the mathematical framework of Markov decision processes formulate and solve Markov and semi-Markov decision processes for realistic problems with finite state space under different objectives apply fundamental techniques, results and concepts of RL on selected RL problems. given an application problem, decide if it should be formulated as a RL problem and define it formally (in terms of the state space, action space, dynamics and reward model) Competences to identify areas where RL are valuable select and apply the appropriate RL model for a given business problem interpret and communicate the results from RL "],["colophon.html", "G Colophon", " G Colophon These notes was written in bookdown inside RStudio. This version of the notes was built with: #&gt; Finding R package dependencies ... Done! #&gt; setting value #&gt; version R version 4.2.2 (2022-10-31) #&gt; os Ubuntu 20.04.5 LTS #&gt; system x86_64, linux-gnu #&gt; ui X11 #&gt; language (EN) #&gt; collate C.UTF-8 #&gt; ctype C.UTF-8 #&gt; tz UTC #&gt; date 2022-11-04 #&gt; pandoc 2.19.2 @ /usr/bin/ (via rmarkdown) Along with these packages: "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
