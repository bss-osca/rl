[["index.html", "Reinforcement Learning for Business (RL) Course notes About the course notes Learning outcomes Purpose of the course Learning goals of the course Reinforcement learning textbook Course organization Programming software Acknowledgements and license Exercises", " Reinforcement Learning for Business (RL) Course notes Lars Relund Nielsen 2022-05-23 About the course notes This site contains course notes for the course “Reinforcement Learning for Business” held at Aarhus BSS. It consists of a set of modules containing learning path for the course modules. The course is an elective course mainly for the Operations and Supply Chain Analytics and Business Intelligence programme and intended to give you an introduction to Reinforcement Learning (RL). You can expect the site to be updated while the course runs. The date listed above is the last time the site was updated. Learning outcomes By the end of this module, you are expected to: Understand the prerequisites and the goals for the course. Have downloaded the textbook. Know how the course is organized. Installed R and RStudio. Annotated the online notes. The learning outcomes relate to the overall learning goals number 3, 5 and 6 of the course. Purpose of the course The purpose of this course is to give an introduction and knowledge about reinforcement learning (RL). RL may be seen as An approach of modelling sequential decision making problems. An approach for learning good decision making under uncertainty from experience. Mathematical models for learning-based decision making. Trying to optimize decisions in a sequential decision model. That is, making a good sequence of decisions. Estimating and finding near optimal decisions of a stochastic process with sequential decision making. A model where given a state of a system, the agent wants to take actions to maximize future reward. Often the agent does not know the underlying setting and, thus, is bound to learn from experience. RL can also be seen as a way of modelling intuition. As humans, we often learn by trial and error. For instance, when playing a game, our strategy is based on the game rules and what we have experienced works based on previous plays. In a RL setting, the system has specific states, actions and reward structure, that is, the rules of the game, and it is up to the agent how to solve the game, i.e. find actions that maximize the reward. Typically, the agent starts with totally random trials and finishes with sophisticated tactics and superhuman skills. By leveraging the power of search and many trials, RL is an effective way to find good actions. A classic RL example is the bandit problem: You are in a casino and want to choose one of many slot machines (one-armed bandits) in each round. However, you do not know the distribution of the payouts of the machines. In the beginning, you will probably just try out machines (exploration) and then, after some learning, you will prefer the best ones (exploitation). Now the problem arises that if you use a slot machine frequently, you will not be able to gain information about the others and may not even find the best machine (exploration-exploitation dilemma). RL focuses on finding a balance between exploration of uncharted territory and exploitation of current knowledge. The course starts by giving a general overview over RL and introducing bandit problems. Next, the mathematical framework of Markov decision processes (MDPs) is given as a classical formalization of sequential decision making. In this case, actions influence not just immediate rewards, but also subsequent situations, or states, and therefore also future rewards. An MDP assumes that the dynamics of the underlying process and the reward structure are known explicitly by the decision maker. In the last part of the course, we go beyond the case of decision making in known environments and study RL methods for stochastic control. Learning goals of the course After having participated in the course, you must, in addition to achieving general academic skills, demonstrate: Knowledge of RL for Bandit problems Markov decision processes and ways to optimize them the exploration vs exploitation challenge in RL and approaches for addressing this challenge the role of policy evaluation with stochastic approximation in the context of RL Skills to define the key features of RL that distinguishes it from other machine learning techniques discuss fundamental concepts in RL describe the mathematical framework of Markov decision processes formulate and solve Markov and semi-Markov decision processes for realistic problems with finite state space under different objectives apply fundamental techniques, results and concepts of RL on selected RL problems. given an application problem, decide if it should be formulated as a RL problem and define it formally (in terms of the state space, action space, dynamics and reward model) Competences to identify areas where RL are valuable select and apply the appropriate RL model for a given business problem interpret and communicate the results from RL Reinforcement learning textbook The course uses the free textbook Reinforcement Learning: An Introduction by Sutton and Barto (2018). The book is essential reading for anyone wishing to learn the theory and practice of modern Reinforcement learning. Read the weekly readings before the lecture to understand the material better, and perform better in the course. Sutton and Barto’s book is the most cited publication in RL research, and is responsible for making RL accessible to people around the world. The new edition, released in 2018, offers improved notation and explanations, additional algorithms, advanced topics, and many new examples; and it’s totally free. Just follow the citation link to download it. Course organization Each week considers a learning module. A learning module is related to a chapter in the textbook. The learning path in a typical week are Before lectures: Read the chapter in the textbook and consider the extra module material. Lectures (at campus). After lectures: Module Exercises (in groups). Lectures will not cover all the curriculum but focus on the main parts. In some weeks tutorials are given and we focus on a specific RL problem. This module gives a short introduction to the course. Next, the site consists of different parts each containing teaching modules about specific topics: Part I gives you a general introduction to RL and the bandit problem. Part II consider RL sequential decision problems where the state and state and action spaces are small enough so values can be represented as arrays, or tables. We start by considering bandit problems (Module 2) a RL problem in which there is only a single state. Next, Markov decision processes are considered as a general modelling framework (Module ??) The appendix contains different modules that may be helpful for you including hints on how to work in groups, how to get help if you are stuck and how to annotate the course notes. Programming software We use R as programming software and it is assumed that you are familiar with using R. R is a programming language and free software environment. R can be run from a terminal but in general you use an IDE (integrated development environment) RStudio for running R and to saving your work. R and RStudio can either be run from your laptop or using RStudio Cloud which run R in the cloud using your browser. It is assumed as a prerequisite that you know how to use R. If you need a brush-up on your R programming skills then have a look at Module A) in the appendix. Acknowledgements and license Materials in this book are taken from various places The notes are based on Sutton and Barto (2018). The bookdown skeleton and some notes are based on the Tools for Analytics course. Some notes are adopted from Scott Jeen, Bryn Elesedy and Peter Goldsborough. Some exercises are taken from Sutton and Barto (2018) and modified slightly. I would like to thank all for their inspiration. This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International CC BY-NC-SA 4.0. Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! Exercise - How to annotate The online course notes can be annotated using hypothes.is. You can create both private and public annotations. Collaborative annotation helps people connect to each other and what they’re reading, even when they’re keeping their distance. You may also use public notes to help indicate spell errors, unclear content etc. in the notes. Sign-up at hypothes.is. If you are using Chrome you may also install the Chrome extension. Go back to this page and login in the upper right corner (there should be some icons e.g. &lt;). Select some text and try to annotate it using both a private and public annotation (you may delete it again afterwards). Exercise - Templates A template in RMarkdown of the course notes and exercises are available at GitHub. You can download the repository and keep your own notes during the course by having an R project with it. Open R studio and do: File &gt; New Project … &gt; Version Control &gt; Git. Add https://github.com/bss-osca/rl-student as repository url and create the project. Run renv::restore() from the R command line to install needed packages (this may take some time). If you experience errors then try to install the packages one at a time using install.packages(\"pkg name\"). Open e.g. the file 01_rl-intro.Rmd and try to knit it using the Knit button in the upper left corner. A html file with the output will be made. You should be able to add you own notes and solve the exercises using the Rmd file for each module. References "],["mod-rl-intro.html", "Module 1 An introduction to RL 1.1 Learning outcomes 1.2 Textbook readings 1.3 What is reinforcement learning 1.4 RL and Business Analytics 1.5 RL in different research deciplines 1.6 RL and machine learning 1.7 The RL data-stream 1.8 States, actions, rewards and policies 1.9 Exploitation vs Exploration 1.10 RL in action (Tic-Tac-Toe) 1.11 Summary 1.12 Exercises", " Module 1 An introduction to RL This module gives a short introduction to Reinforcement learning. 1.1 Learning outcomes By the end of this module, you are expected to: Describe what RL is. Be able to identify different sequential decision problems. Know what Business Analytics are and identify RL in that framework. Memorise different names for RL and how it fits in a Machine Learning framework. Formulate the blocks of a RL model (environment, agent, data, states, actions, rewards and policies). Run your first RL algorithm and evaluate on its solution. The learning outcomes relate to the overall learning goals number 3, 5, 6, 9 and 11 of the course. 1.2 Textbook readings For this week, you will need to read Chapter 1-1.5 in Sutton and Barto (2018). Read it before continuing this module. 1.3 What is reinforcement learning RL can be seen as An approach of modelling sequential decision making problems. An approach for learning good decision making under uncertainty from experience. Mathematical models for learning-based decision making. Trying to optimize decisions in a sequential decision model. That is, making a good sequence of decisions. Estimating and finding near optimal decisions of a stochastic process with sequential decision making. A model where given a state of a system, the agent wants to take actions to maximize future reward. Often the agent does not know the underlying setting and, thus, is bound to learn from experience. Sequential decision problems are problems where you take decisions/actions over time. As an agent, you base your decision on the current state of the system (a state is a function of the information/data available). At the next time-step, the system have moved (stochastically) to the next stage. Here new information may be available and you receive a reward and take a new action. Examples of sequential decision problems are (with possible actions): Playing backgammon (how to move the checkers). Driving a car (left, right, forward, back, break, stop, …). How to invest/maintain a portfolio of stocks (buy, sell, amount). Control an inventory (wait, buy, amount). Vehicle routing (routes). Maintain a spare-part (wait, maintain). Robot operations (sort, move, …) Dairy cow treatment/replacement (treat, replace, …) Recommender systems e.g. Netflix recommendations (videos) Since RL involves a scalar reward signal, the goal is to choose actions such that the total reward is maximized. Note actions have an impact on the future and may have long term consequences. As such, you cannot simply choose the action that maximize the current reward. It may, in fact, be better to sacrifice immediate reward to gain more long term reward. RL can be seen as a way of modelling intuition. An RL model has specific states, actions and reward structure and our goal as an agent is to find good decisions/actions that maximize the total reward. The agent learn using, for instance: totally random trials (in the start), sophisticated tactics and superhuman skills (in the end). That is, as the agent learn, the reward estimate of a given action becomes better. As humans, we often learn by trial and error too: Learning to walk (by falling/pain). Learning to play (strategy is based on the game rules and what we have experienced works based on previous plays). This can also be seen as learning the reward of our actions. 1.4 RL and Business Analytics Business Analytics (BA) (or just Analytics) refers to the scientific process of transforming data into insight for making better decisions in business. BA can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value. As a process it can be characterized by descriptive, predictive, and prescriptive model building using “big” data sources. Descriptive Analytics: A set of technologies and processes that use data to understand and analyze business performance. Descriptive analytics are the most commonly used and most well understood type of analytics. Descriptive analytics categorizes, characterizes, consolidates, and classifies data. Examples are standard reporting and dashboards (KPIs, what happened or is happening now?) and ad-hoc reporting (how many/often?). Descriptive analytics often serves as a first step in the successful application of predictive or prescriptive analytics. Predictive Analytics: The use of data and statistical techniques to make predictions about future outputs/outcomes, identify patterns or opportunities for business performance. Examples of techniques are data mining (what data is correlated with other data?), pattern recognition and alerts (when should I take action to correct/adjust a spare part?), Monte-Carlo simulation (what could happen?), neural networks (which customer group are best?) and forecasting (what if these trends continue?). Prescriptive Analytics: The use of optimization and other decision modelling techniques using the results of descriptive and predictive analytics to suggest decision options with the goal of improving business performance. Prescriptive analytics attempt to quantify the effect of future decisions in order to advise on possible outcomes before the decisions are actually made. Prescriptive analytics predicts not only what will happen, but also why it will happen and provides recommendations regarding actions that will take advantage of the predictions. Prescriptive analytics are relatively complex to administer, and most companies are not yet using it in their daily course of business. However, when implemented correctly, it can have a huge impact on business performance and how businesses make decisions. Examples on prescriptive analytics are optimization in production planning and scheduling, inventory management, the supply chain and transportation planning. Since RL focus optimizing decisions it is Prescriptive Analytics also known as sequential decision analytics. Figure 1.1: Business Analytics and competive advantage. Companies who use BA focus on fact-based management to drive decision making and treats data and information as a strategic asset that is shared within the company. This enterprise approach generates a companywide respect for applying descriptive, predictive and prescriptive analytics in areas such as supply chain, marketing and human resources. Focusing on BA gives a company a competive advantage (see Figure 1.1). BA and related areas: In the past Business Intelligence traditionally focuses on querying, reporting, online analytical processing, i.e. descriptive analytics. However, a more modern definition of Business Intelligence is the union of descriptive and predictive analytics. Operations Research or Management Science deals with the application of advanced analytical methods to help make better decisions and can hence be seen as prescriptive analytics. However, traditionally it has been taking a more theoretical approach and focusing on problem-driven research while BA takes a more data-driven approach. Logistics is a cross-functional area focusing on the effective and efficient flows of goods and services, and the related flows of information and cash. Supply Chain Management adds a process-oriented and cross-company perspective. Both can be seen as prescriptive analytics with a more problem-driven research focus. Advanced Analytics is often used as a classification of both predictive and prescriptive analytics. Data science is an interdisciplinary field about scientific methods, processes, and systems to extract knowledge or insights from data in various forms, either structured or unstructured and can be seen as Business analytics applied to a wider range of data. 1.5 RL in different research deciplines RL is used in many research fields using different names: RL (most used) originated from computer science and AI. Approximate dynamic programming (ADP) is mostly used within operations research. Neuro-dynamic programming (when states are represented using a neural network). RL is closely related to Markov decision processes (a mathematical model for a sequential decision problem). Figure 1.2: Adopted from Silver (2015). 1.6 RL and machine learning Different ways of learning: Supervised learning: Given data \\((x_i, y_i)\\) learn to predict \\(y\\) from \\(x\\), i.e. find \\(y \\approx f(x)\\) (e.g. regression). Unsupervised learning: Given data \\((x_i)\\) learn patterns using \\(x\\), i.e. find \\(f(x)\\) (e.g. clustering). RL: Given state \\(x\\) you take an action and observe the reward \\(r\\) and the new state \\(x&#39;\\). There is no supervisor \\(y\\), only a reward signal \\(r\\). Your goal is to find a policy that optimize the total reward function. Figure 1.3: Adopted from Silver (2015). 1.7 The RL data-stream RL considers an agent in an environment: Agent: The one who takes the action (computer, robot, decision maker). Environment: The system/world where observations and rewards are found. Data are revealed sequentially as you take actions \\[(O_0, A_0, R_1, O_1, A_1, R_2, O_2, \\ldots).\\] At time \\(t\\) the agent have been taken action \\(A_{t-1}\\) and observed observation \\(O_t\\) and reward \\(R_t\\): Figure 1.4: Agent-environment representation. This gives us the history at time \\(t\\) is the sequence of observations, actions and rewards \\[H_t = (O_0, A_0, R_1, O_1, \\ldots, A_{t-1}, R_t, O_t).\\] 1.8 States, actions, rewards and policies The (agent) state \\(S_t\\) is the information used to take the next action \\(A_t\\): Figure 1.5: State and action. A state depends on the history, i.e. a state is a function of the history \\(S_t = f(H_t)\\). Different strategies for defining a state may be considered. Choosing \\(S_t = H_t\\) is bad since the size of a state representation grows very fast. A better strategy is to just store the information needed for taking the next action. Moreover, it is good to have Markov states where given the present state the future is independent of the past. That is, the current state holds just as much information as the history, i.e. it holds all useful information of the history. Symbolically, we call a state \\(S_t\\) Markov iff \\[\\Pr[S_{t+1} | S_t] = \\Pr[S_{t+1} | S_1,...,S_t].\\] That is, the probability of seeing some next state \\(S_{t+1}\\) given the current state is exactly equal to the probability of that next state given the entire history of states. Note that we can always find some Markov state. Though the smaller the state, the more “valuable” it is. In the worst case, \\(H_t\\) is Markov, since it represents all known information about itself. The reward \\(R_t\\) is a number representing the reward at time \\(t\\) (negative if a cost). Examples of rewards are Playing backgammon (0 (when play), 1 (when win), -1 (when loose)). How to invest/maintain a portfolio of stocks (the profit). Control an inventory (inventory cost, lost sales cost). Vehicle routing (transportation cost). The goal is to find a policy that maximize the total future reward. A policy is the agent’s behaviour and is a map from state to action, i.e. a function \\[a = \\pi(s)\\] saying that given the agent is in state \\(s\\) we choose action \\(a\\). The total future reward is a currently not defined clearly. Let the value function denote the future reward in state \\(s\\) and define it as the expected discounted future reward: \\[V_\\pi(s) = \\mathbb{E}_\\pi(R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\ldots | S = s).\\] Note the value function is defined using a specific policy and the goal is to find a policy that maximize the total future reward in all possible states \\[\\pi^* = \\arg\\max_{\\pi\\in\\Pi}(V_\\pi(s)).\\] The value of the discount factor is important: Discount factor \\(\\gamma=0\\): Only care about present reward. Discount factor \\(\\gamma=1\\): Future reward is as beneficial as immediate reward. Can be used if the time-horizon is finite. Discount factor \\(\\gamma&lt;1\\): Rewards near to the present more beneficial. Note \\(V(s)\\) will converge to a number even if the time-horizon is infinite. 1.9 Exploitation vs Exploration A key problem of reinforcement learning (in general) is the difference between exploration and exploitation. Should the agent sacrifice what is currently know as the best action to explore a (possibly) better opportunity, or should it just exploit its best possible policy? Exploitation takes the action assumed to be optimal with respect to the data observed so far. This, gives better predictions of the value function (given the current policy) but prevents the agent from discovering potential better decisions (a better policy). Exploration does not take the action that seems to be optimal. That is, the agent explore to find new states and update the value function for this state. Examples in the exploration and exploitation dilemma are for instance movie recommendations: recommending the user’s best rated movie type (exploitation) or trying another movie type (exploration) or oil drilling: drilling at the best known location (exploitation) or trying a new location (exploration). 1.10 RL in action (Tic-Tac-Toe) The current state of the board is represented by a row-wise concatenation of the players’ marks in a 3x3 grid. For example, the 9 character long string \"......X.O\" denotes a board state in which player X has placed a mark in the first field of the third column whereas player O has placed a mark in the third field of the third column: .table-bordered th, .table-bordered td { border: 1px solid black !important; } . . . . . . X . O That is, we index the fields row-wise: 1 2 3 4 5 6 7 8 9 The game is continued until all fields are filled or the game is over (win or loose). The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game. Reward for a player is 1 for ‘win’, 0.5 for ‘draw’, and 0 for ‘loss’. These values can be seen as the probability of winning. Examples of winning, loosing and a draw from player Xs point of view: . . X . X . X O O X . X . X . O O O X X O O O X X X O Note a state can be also be represented using a state vector of length 9: stateStr &lt;- function(sV) { str &lt;- str_c(sV, collapse = &quot;&quot;) return(str) } stateVec &lt;- function(s) { sV &lt;- str_split(s, &quot;&quot;)[[1]] return(sV) } sV &lt;- stateVec(&quot;X.X.X.OOO&quot;) sV #&gt; [1] &quot;X&quot; &quot;.&quot; &quot;X&quot; &quot;.&quot; &quot;X&quot; &quot;.&quot; &quot;O&quot; &quot;O&quot; &quot;O&quot; Given a state vector, we can check if we win or loose: #&#39; Check board state #&#39; #&#39; @param pfx Player prefix (the char used on the board). #&#39; @param sV Board state vector. #&#39; @return A number 1 (win), 0 (loose) or 0.5 (draw/unknown) win &lt;- function(pfx, sV) { idx &lt;- which(sV == pfx) mineV &lt;- rep(0, 9) mineV[idx] &lt;- 1 mineM &lt;- matrix(mineV, 3, 3, byrow = TRUE) if (any(rowSums(mineM) == 3) || # win any(colSums(mineM) == 3) || sum(diag(mineM)) == 3 || sum(mineM[1,3] + mineM[2,2] + mineM[3,1]) == 3) return(1) idx &lt;- which(sV == &quot;.&quot;) mineV[idx] &lt;- 1 mineM &lt;- matrix(mineV, 3, 3, byrow = TRUE) if (any(rowSums(mineM) == 0) || # loose any(colSums(mineM) == 0) || sum(diag(mineM)) == 0 || sum(mineM[1,3] + mineM[2,2] + mineM[3,1]) == 0) return(0) return(0.5) # draw } win(&quot;O&quot;, sV) #&gt; [1] 1 win(&quot;X&quot;, sV) #&gt; [1] 0 We start with an empty board and have at most 9 moves (a player may win before). If the opponent start and a state denote the board before the opponent makes a move, then then a draw game may look as in Figure 1.6. We start with an empty board state \\(S_0\\), and the opponent makes a move, next we choose a move \\(A_0\\) (among the empty fields) and we end up in state \\(S_1\\). This continues until the game is over. Figure 1.6: A draw. 1.10.1 Players and learning to play Assume that we initially define a value \\(V(S)\\) of each state \\(S\\) to be 1 if we win, 0 if we loose and 0.5 otherwise. Most of the time we exploit our knowledge, i.e. choose the action which gives us the highest estimated reward (probability of winning). However, some times (with probability \\(\\epsilon\\)) we explore and choose another action/move than what seems optimal. These moves make us experience states we may otherwise never see. If we exploit we update the value of a state using \\[V(S_t) = V(S_t) + \\alpha(V(S_{t+1})-V(S_t))\\] where \\(\\alpha\\) is the step-size parameter which influences the rate of learning. Let us implement a RL player using a R6 class and store the values using a hash list. We keep the hash list minimal by dynamically adding only states which has been explored or needed for calculations. Note using R6 is an object oriented approach and objects are modified by reference. The internal method move takes the previous state (from our point of view) and the current state (before we make a move) and returns the next state and update the value function (if exploit). The player explore with probability epsilon if there is not a next state that makes us win. PlayerRL &lt;- R6Class(&quot;PlayerRL&quot;, public = list( pfx = &quot;&quot;, hV = NA, control = list(epsilon = 0.2, alpha = 0.3), clearLearning = function() clear(self$hV), initialize = function(pfx = &quot;&quot;, control = list(epsilon = 0.2, alpha = 0.3)) { self$pfx &lt;- pfx self$control &lt;- control self$hV &lt;- hash() }, finalize = function() { # cat(&quot;FIN\\n&quot;) clear(self$hV) }, move = function(sP, sV) { # previous state (before opponent move) and current state (before we move) idx &lt;- which(sV == &quot;.&quot;) state &lt;- stateStr(sP) if (!has.key(state, self$hV)) self$hV[[state]] &lt;- 0.5 keys &lt;- c() keysV &lt;- NULL for (i in idx) { # find possible moves sV[i] &lt;- self$pfx str &lt;- str_c(sV, collapse = &quot;&quot;) keys &lt;- c(keys, str) keysV &lt;- rbind(keysV, sV) sV[i] &lt;- &quot;.&quot; } # add missing states idx &lt;- which(!has.key(keys, self$hV)) if (length(idx) &gt; 0) { for (i in 1:nrow(keysV)) { self$hV[keys[i]] &lt;- win(self$pfx, keysV[i,]) } } # cat(&quot;Player&quot;, pfx, &quot;\\n&quot;) # print(self$hV) # update and find next state val &lt;- values(self$hV[keys]) # cat(&quot;Moves:&quot;); print(val) m &lt;- max(val) if (rbinom(1,1, self$control$epsilon) &gt; 0 &amp; any(val &lt; m) &amp; m &lt; 1) { # explore idx &lt;- which(val &lt; m) idx &lt;- idx[sample(length(idx), 1)] nextS &lt;- names(val)[idx] # cat(&quot;Explore - &quot;) } else { # exploit idx &lt;- which(val == m) idx &lt;- idx[sample(length(idx), 1)] nextS &lt;- names(val)[idx] # pick one self$hV[[state]] &lt;- self$hV[[state]] + self$control$alpha * (m - self$hV[[state]]) # cat(&quot;Exploit - &quot;) } # cat(&quot;Next:&quot;, nextS, &quot;\\n&quot;) return(str_split(nextS, &quot;&quot;)[[1]]) } ) ) We then can define a player using: playerA &lt;- PlayerRL$new(pfx = &quot;A&quot;, control = list(epsilon = 0.5, alpha = 0.1)) Other players may be defined similarly, e.g. a player which moves randomly (if can not win in the next move): PlayerRandom &lt;- R6Class(&quot;PlayerRandom&quot;, public = list( pfx = NA, initialize = function(pfx) { self$pfx &lt;- pfx }, move = function(sP, sV) { # previous state (before opponent move) and current state (before we move) idx &lt;- which(sV == &quot;.&quot;) state &lt;- stateStr(sV) keys &lt;- c() keysV &lt;- NULL for (i in idx) { # find possible moves sV[i] &lt;- self$pfx str &lt;- str_c(sV, collapse = &quot;&quot;) keys &lt;- c(keys, str) keysV &lt;- rbind(keysV, sV) sV[i] &lt;- &quot;.&quot; } # check if can win in one move for (i in 1:nrow(keysV)) { if (win(self$pfx, keysV[i,]) == 1) { return(keysV[i,]) # next state is the win state } } # else pick one random return(keysV[sample(nrow(keysV), 1),]) } ) ) A player which always place at the lowest field index: PlayerFirst &lt;- R6Class(&quot;PlayerFirst&quot;, public = list( pfx = NA, initialize = function(pfx) { self$pfx &lt;- pfx }, move = function(sP, sV) { # previous state (before opponent move) and current state (before we move) idx &lt;- which(sV == &quot;.&quot;) sV[idx[1]] &lt;- self$pfx return(sV) } ) ) 1.10.2 Gameplay We define a game which returns the prefix of the winner (NA if a draw): #&#39; @param player1 A player R6 object. This player starts the game #&#39; @param player2 A player R6 object. #&#39; @param verbose Print gameplay. #&#39; @return The winners prefix or NA if a tie. playGame &lt;- function(player1, player2, verbose = FALSE) { sP2 &lt;- rep(&quot;.&quot;, 9) # start state / game state sP1 &lt;- sP2 # state from player 1s viewpoint for (i in 1:5) { # at most 4.5 rounds ## player 1 if (verbose) cat(&quot;Player &quot;, player1$pfx, &quot;:\\n&quot;, sep=&quot;&quot;) sP1 &lt;- player1$move(sP1, sP2) # new state from player 1s viewpoint # states &lt;- c(states, stateChr(sV)) # cat(stateStr(sV), &quot; | &quot;, sep = &quot;&quot;) if (verbose) plot_board_state_cat(stateStr(sP1)) if (win(player1$pfx, sP1) == 1) { return(player1$pfx) break } if (i == 5) break # a draw ## player 2 if (verbose) cat(&quot;Player &quot;, player2$pfx, &quot;:\\n&quot;, sep=&quot;&quot;) sP2 &lt;- player2$move(sP2, sP1) # states &lt;- c(states, stateChr(sV)) # cat(stateStr(sV), &quot; | &quot;, sep = &quot;&quot;) if (verbose) plot_board_state_cat(stateStr(sP2)) if (win(player2$pfx, sP2) == 1) { return(player2$pfx) break } } return(NA) } Let us play a game between playerA and playerR: playerR &lt;- PlayerRandom$new(pfx = &quot;R&quot;) playGame(playerA, playerR, verbose = T) #&gt; Player A: #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; | A | . | . | #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; Player R: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | . | . | #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; Player A: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | A | . | #&gt; |------------------| #&gt; | . | . | . | #&gt; |------------------| #&gt; Player R: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | A | . | #&gt; |------------------| #&gt; | . | R | . | #&gt; |------------------| #&gt; Player A: #&gt; |------------------| #&gt; | R | . | . | #&gt; |------------------| #&gt; | A | A | A | #&gt; |------------------| #&gt; | . | R | . | #&gt; |------------------| #&gt; [1] &quot;A&quot; Note playerA has been learning when playing the game. The current estimates that are stored in the hash list are: playerA$hV #&gt; &lt;hash&gt; containing 22 key-value pair(s). #&gt; ......... : 0.5 #&gt; ........A : 0.5 #&gt; .......A. : 0.5 #&gt; ......A.. : 0.5 #&gt; .....A... : 0.5 #&gt; ....A.... : 0.5 #&gt; ...A..... : 0.5 #&gt; ..A...... : 0.5 #&gt; .A....... : 0.5 #&gt; A........ : 0.5 #&gt; R..A....A : 0.5 #&gt; R..A...A. : 0.5 #&gt; R..A..A.. : 0.5 #&gt; R..A.A... : 0.5 #&gt; R..AA.... : 0.55 #&gt; R..AA..RA : 0.5 #&gt; R..AA.AR. : 0.5 #&gt; R..AAA.R. : 1 #&gt; R.AA..... : 0.5 #&gt; R.AAA..R. : 0.5 #&gt; RA.A..... : 0.5 #&gt; RA.AA..R. : 0.5 1.10.3 Learning by a sequence of games With a single game only a few states are explored and estimates are not good. Let us instead play a sequence of games and learn along the way: #&#39; @param playerA Player A (R6 object). #&#39; @param playerB Player B (R6 object). #&#39; @param games Number of games #&#39; @param prA Probability of `playerA` starts. #&#39; @return A list with results (a data frame and a plot). playGames &lt;- function(playerA, playerB, games, prA = 0.5) { winSeq &lt;- rep(NA, games) for (g in 1:games) { # find start player if (sample(0:1, 1, prob = c(prA, 1-prA)) == 0) { player1 &lt;- playerA player2 &lt;- playerB } else { player2 &lt;- playerA player1 &lt;- playerB } winSeq[g] &lt;- playGame(player1, player2) } # process the data dat &lt;- tibble(game = 1:length(winSeq), winner = winSeq) %&gt;% mutate( players = str_c(playerA$pfx, playerB$pfx), winA := case_when( winner == playerA$pfx ~ 1, winner == playerB$pfx ~ 0, TRUE ~ 0.5 ), winsA_r = rollapply(winA, ceiling(games/10), mean, align = &quot;right&quot;, fill = NA) #, fill = 0, partial = T ) # make a plot pt &lt;- dat %&gt;% ggplot(aes(x = game, y = winA)) + geom_line(aes(y = winsA_r), size = 0.2) + geom_smooth(se = F) + labs(y = str_c(&quot;Avg. wins player &quot;, playerA$pfx), title = str_c(&quot;Wins &quot;, playerA$pfx, &quot; = &quot;, round(mean(dat$winA), 2), &quot; &quot;, playerB$pfx, &quot; = &quot;, round(1-mean(dat$winA), 2))) return(list(dat = dat, plot = pt)) } Let us now play games against a player who moves randomly using \\(\\epsilon = 0.1\\) (explore probability) and \\(\\alpha = 0.1\\) (step size). playerA &lt;- PlayerRL$new(pfx = &quot;A&quot;, control = list(epsilon = 0.1, alpha = 0.1)) playerR &lt;- PlayerRandom$new(pfx = &quot;R&quot;) res &lt;- playGames(playerA, playerR, games = 2000) res$plot The black curve is the moving average of winning with a trend line. Note the values of the parameters have an effect on our learning: In general we do not need to explore (\\(\\epsilon = 0\\)) (the other player explore enough for us) and a high explore probability (\\(\\epsilon = 0.9\\)) make us loose. Moreover, using a high step size seems to work best. Other players may give different results. If the RL player play against a player which always move to first free field index: Here a high step size and a low exploration probability is good and the RL player will soon figure out how to win all the time. This is different if the RL player A play against another clever (RL) player B. playerA &lt;- PlayerRL$new(pfx = &quot;A&quot;, control = list(epsilon = 0, alpha = 0.1)) playerB &lt;- PlayerRL$new(pfx = &quot;B&quot;, control = list(epsilon = 0, alpha = 0.1)) If both players play using the same control parameters, one would expect that they after learning should win/loose with probability 0.5. However if there is no exploration (\\(\\epsilon = 0\\)) this is not always true: Depending on how the game starts a player may learn a better strategy and win/loose more. That is, exploration is important. Finally let us play against a player B with fixed control parameters. In general it is best to explore using the same probability otherwise you loose more and a higher step size than your opponent will make you win. 1.11 Summary Read Chapter 1.6 in Sutton and Barto (2018). 1.12 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 1.12.1 Exercise - Self-Play × Solution If the exploration parameter is non-zero, the algorithm will continue to adapt until it reaches an equilibrium (either fixed or cyclical). Close Solution Consider Tic-Tac-Toe and assume that instead of an RL player against a random opponent, the reinforcement learning algorithm described above played against itself. What do you think would happen in this case? Would it learn a different way of playing? 1.12.2 Exercise - Symmetries Many tic-tac-toe positions appear different but are really the same because of symmetries. × Solution It is possible to use 4 axis of symmetry to essentially fold the board down to a quarter of the size. Close Solution How might we amend the reinforcement learning algorithm described above to take advantage of this? × Solution A smaller state space would increase the speed of learning and reduce the memory required. Close Solution In what ways would this improve the algorithm? × Solution If the opponent did not use symmetries then it could result in a worse learning. For example, if the opponent always played correct except for 1 corner, then using symmetries would mean you never take advantage of that information. That is, we should now use symmetries too since symmetrically equivalent positions do not always hold the same value in such a game. Close Solution Suppose the opponent did not take advantage of symmetries. In that case, should we? Is it true, then, that symmetrically equivalent positions should necessarily have the same value? 1.12.3 Exercise - Greedy Play × Solution As seen in Section 1.10.3 using \\(\\epsilon = 0\\) may be okay for this game if the opponent use a simple strategy (e.g. random or first index). However, in general the RL player would play worse. The chance the optimal action is the one with the current best estimate of winning is low and depending on the gameplay the RL player might win or loose. The RL player would also be unable to adapt to an opponent that slowly alter behaviour over time. Close Solution Consider Tic-Tac-Toe and suppose the RL player is only greedy (\\(\\epsilon = 0\\)), that is, always playing the move that that gives the highest probability of winning. Would it learn to play better, or worse, than a non-greedy player? What problems might occur? 1.12.4 Exercise - Learning from Exploration Consider Tic-Tac-Toe and suppose the RL player is playing against an opponent with a fixed strategy. Suppose learning updates occur after all moves, including exploratory moves. If the step-size parameter is appropriately reduced over time (but not the tendency to explore), then the state values would converge to a set of probabilities. × Solution The probability set \\(V(s)\\) found by applying no learning from exploration is the probability of winning when using the optimal policy. The probability set \\(V(s)\\) found by applying learning from exploration is the probability of winning including the active exploration policy. Close Solution What are the two sets of probabilities computed when we do, and when we do not, learn from exploratory moves? × Solution The probability set found by applying no learning from exploration would result in more wins. The probability set found by applying learning from exploration is better to learn, as it reduces variance from sub-optimal future states. Close Solution Assuming that we do continue to make exploratory moves, which set of probabilities might be better to learn? Which would result in more wins? 1.12.5 Exercise - Other Improvements × Solution Altering the exploration rate/learning based on the variance in the opponent's actions. If the opponent is always making the same moves and you are winning from it then using a non-zero exploration rate will make you lose you games. If the agent is able to learn how the opponent may react to certain moves, it will be easier for it to win as it can influence the opponent to make moves that leads it to a better state. Close Solution Consider Tic-Tac-Toe. Can you think of other ways to improve the reinforcement learning player? References "],["mod-bandit.html", "Module 2 Multi-armed bandits 2.1 Learning outcomes 2.2 Textbook readings 2.3 The k-armed bandit problem 2.4 Estimating the value of an action 2.5 The role of the step-size 2.6 Optimistic initial values 2.7 Upper-Confidence Bound Action Selection 2.8 Summary 2.9 Exercises", " Module 2 Multi-armed bandits This module consider the k-armed bandit problem which is a sequential decision problem with one state and \\(k\\) actions. The problem is used to illustrate different learning methods used in RL. The module is also the first module in the Tabular methods part of the notes. This part describe almost all the core ideas of reinforcement learning algorithms in their simplest forms where the state and action spaces are small enough for the approximate value functions to be represented as arrays or tables. 2.1 Learning outcomes By the end of this module, you are expected to: Define a k-armed bandit and understand the nature of the problem. Define the reward of a action (action-reward). Describe different methods for estimating the action-reward. Explain the differences between exploration and exploitation. Formulate an \\(\\epsilon\\)-greedy algorithm for selecting the next action. Interpret the sample-average (variable step-size) versus exponential recency-weighted average (constant step-size) action-reward estimation. Argue why we might use a constant stepsize in the case of non-stationarity. Understand the effect of optimistic initial values. Formulate an upper confidence bound action selection algorithm. The learning outcomes relate to the overall learning goals number 1, 3, 6, 9, 10 and 12 of the course. 2.2 Textbook readings For this week, you will need to read Chapter 2 - 2.7 in Sutton and Barto (2018). Read it before continuing this module. A summary of the book notation can be seen here. 2.3 The k-armed bandit problem Multi-armed bandits attempt to find the best option among a collection of alternatives by learning through trial and error. The name derives from “one-armed bandit,” a slang term for a slot machine — which is a perfect analogy for how these algorithms work. Figure 2.1: A 4-armed bandit. Imagine you are facing a wall with \\(k\\) slot machines (see Figure 2.1), and each one pays out at a different rate. A natural way to figure out how to make the most money (rewards) would be to try each at random for a while (exploration), and start playing the higher paying ones once you have gained some experience (exploitation). That is, from an agent/environment point of view the agent considers a single state at time \\(t\\) and have to choose among \\(k\\) actions given the environment representing the \\(k\\) bandits. Only the rewards from the \\(k\\) bandits are unknown, but the agent observe samples of the reward of an action and can use this to estimate the expected reward of that action. The objective is to find an optimal policy that maximize the total expected reward. Note since the process only have a single state, this is the same as finding an optimal policy \\(\\pi^*(s) = \\pi^* = a^*\\) that chooses the action with the highest expected reward. Due to uncertainty, there is an exploration vs exploitation dilemma. The agent have one action that seems to be most valuable at a time point, but it is highly likely, at least initially, that there are actions yet to explore that are more valuable. Multi-armed bandits can be used in e.g. digital advertising. Suppose you are an advertiser seeking to optimize which ads (\\(k\\) to choose among) to show visitors on a particular website. For each visitor, you can choose one out of a collection of ads, and your goal is to maximize the number of clicks over time. Figure 2.2: Which ad to choose? It is reasonable to assume that each of these ads will have different effects, and some will be more engaging than others. That is, each ad has some theoretical — but unknown — click-through-rate (CTR) that is assumed to not change over time. How do we go about solving which ad we should choose (see Figure 2.2)? 2.4 Estimating the value of an action How can the value of an action be estimated, i.e. the expected reward of an action \\(q_*(a) = \\mathbb{E}[R_t | A_t = a]\\). Assume that at time \\(t\\) action \\(a\\) has been chosen \\(N_t(a)\\) times. Then the estimated action value is \\[\\begin{equation} Q_t(a) = \\frac{R_1+R_2+\\cdots+R_{N_t(a)}}{N_t(a)}, \\end{equation}\\] Storing \\(Q_t(a)\\) this way is cumbersome since memory and computation requirements grow over time. Instead an incremental approach is better. If we assume that \\(N_t(a) = n-1\\) and set \\(Q_t(a) = Q_n\\) then \\(Q_{n+1}\\) becomes: \\[\\begin{align} Q_{n+1} &amp;= \\frac{1}{n}\\sum_{i=1}^{n}R_i \\nonumber \\\\ &amp;= \\frac{1}{n}\\left( R_{n} + \\sum_{i=1}^{n-1} R_i \\right) \\nonumber \\\\ &amp;= \\frac{1}{n}\\left( R_{n} + (n-1)\\frac{1}{n-1}\\sum_{i=1}^{n-1} R_i \\right) \\nonumber \\\\ &amp;= \\frac{1}{n}\\left( R_{n} + (n-1)Q_n \\right) \\nonumber \\\\ &amp;= Q_n + \\frac{1}{n} \\left[R_n - Q_n\\right]. \\tag{2.1} \\end{align}\\] That is, we can update the estimate of the value of \\(a\\) using the previous estimate, the observed reward and how many times the action has occurred (\\(n\\)). A greedy approach for selecting the next action is \\[\\begin{equation} A_t =\\arg \\max_a Q_t(a). \\end{equation}\\] Here \\(\\arg\\max_a\\) means the value of \\(a\\) for which \\(Q_t(a)\\) is maximised. A pure greedy approach do not explore other actions. Instead an \\(\\varepsilon\\)-greedy ppproach is used in which with probability \\(\\varepsilon\\) we take a random draw from all of the actions (choosing each action with equal probability) and hereby providing some exploration. Let us try to implement the algorithm using an R6 agent and environment class. First we define the agent that do actions based on an \\(\\epsilon\\)-greedy strategy, stores the estimated \\(Q\\) values and the number of times an action has been chosen: #&#39; R6 Class representing the RL agent RLAgent &lt;- R6Class(&quot;RLAgent&quot;, public = list( #&#39; @field qV Q estimates. qV = NULL, #&#39; @field nV Action counter. nV = NULL, #&#39; @field k Number of bandits. k = NULL, #&#39; @field epsilon Epsilon used in epsilon greed action selection. epsilon = NULL, #&#39; @description Create an object (when call new). #&#39; @param k Number of bandits. #&#39; @param epsilon Epsilon used in epsilon greed action selection. #&#39; @return The new object. initialize = function(k = 10, epsilon = 0.01, ini = 0) { self$epsilon &lt;- epsilon self$qV &lt;- rep(ini, k) self$nV &lt;- rep(0, k) self$k &lt;- k }, #&#39; @description Clear learning. #&#39; @param eps Epsilon. #&#39; @return Action (index). clearLearning = function() { self$qV &lt;- 0 self$nV &lt;- 0 }, #&#39; @description Select next action using an epsilon greedy strategy. #&#39; @return Action (index). selectActionEG = function() { if (runif(1) &lt;= self$epsilon) { # explore a &lt;- sample(1:self$k, 1) } else { # exploit a &lt;- which(self$qV == max(self$qV)) a &lt;- a[sample(length(a), 1)] } return(a) }, #&#39; @description Update learning values (including action counter). #&#39; @param a Action. #&#39; @param r Reward. #&#39; @return NULL (invisible) updateQ = function(a, r) { self$nV[a] &lt;- self$nV[a] + 1 self$qV[a] &lt;- self$qV[a] + 1/self$nV[a] * (r - self$qV[a]) return(invisible(NULL)) } ) ) Next, the environment generating rewards. The true mean reward \\(q_*(a)\\) of an action were selected according to a normal (Gaussian) distribution with mean 0 and variance 1. The observed reward was then generated using a normal distribution with mean \\(q_*(a)\\) and variance 1: #&#39; R6 Class representing the RL environment #&#39; #&#39; Assume that bandits are normal distributed with a mean and std.dev of one. RLEnvironment &lt;- R6Class(&quot;RLEnvironment&quot;, public = list( #&#39; @field mV Mean values mV = NULL, #&#39; @field k Number of bandits. k = NULL, #&#39; @description Create an object (when call new). #&#39; @param k Number of bandits. #&#39; @return The new object. initialize = function(k = 10) { self$mV &lt;- rnorm(k) }, #&#39; @description Sample reward of a bandit. #&#39; @param a Bandit (index). #&#39; @return The reward. reward = function(a) { return(rnorm(1, self$mV[a])) }, #&#39; @description Returns action with best mean. optimalAction = function() return(which.max(self$mV)) ) ) To test the RL algorithm we use a function returning two plots that compare the performance: #&#39; Performance of the bandit algorithm using different epsilons. #&#39; #&#39; @param k Bandits. #&#39; @param steps Time steps. #&#39; @param runs Number of runs with a new environment generated. #&#39; @param epsilons Epsilons to be tested. #&#39; @param ini Initial value estimates. #&#39; @return Two plots in a list. performance &lt;- function(k = 10, steps = 1000, runs = 500, epsilons = c(0, 0.01, 0.1), ini = 0) { rew &lt;- matrix(0, nrow = steps, ncol = length(epsilons)) # rewards (one col for each eps) best &lt;- matrix(0, nrow = steps, ncol = length(epsilons)) # add 1 if find the best action for (run in 1:runs) { env &lt;- RLEnvironment$new(k) oA &lt;- env$optimalAction() # print(oA); print(env$mV) for (i in 1:length(epsilons)) { agent &lt;- RLAgent$new(k, epsilons[i], ini) for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) agent$updateQ(a, r) rew[t, i] &lt;- rew[t, i] + r # sum of rewards generated at t best[t, i] &lt;- best[t, i] + (a == oA) # times find best actions } } } colnames(rew) &lt;- epsilons colnames(best) &lt;- epsilons dat1 &lt;- tibble(t = 1:steps) %&gt;% bind_cols(rew) %&gt;% # bind data together pivot_longer(!t, values_to = &quot;reward&quot;, names_to = &quot;epsilon&quot;) %&gt;% # move rewards to a single column group_by(epsilon) %&gt;% mutate(All = cumsum(reward/runs)/t, `Moving avg (50)` = rollapply(reward/runs, 50, mean, align = &quot;right&quot;, fill = NA)) %&gt;% select(-reward) %&gt;% pivot_longer(!c(t, epsilon)) dat2 &lt;- tibble(t = 1:steps) %&gt;% bind_cols(best) %&gt;% # bind data together pivot_longer(!t, values_to = &quot;optimal&quot;, names_to = &quot;epsilon&quot;) %&gt;% group_by(epsilon) %&gt;% mutate(All = cumsum(optimal/runs)/t, `Moving avg (50)` = rollapply(optimal/runs, 50, mean, align = &quot;right&quot;, fill = NA)) %&gt;% select(-optimal) %&gt;% pivot_longer(!c(t, epsilon)) # calc average pt1 &lt;- dat1 %&gt;% ggplot(aes(x = t, y = value, col = epsilon, linetype = name)) + geom_line() + labs(y = &quot;Average reward per time unit&quot;, x = &quot;Time&quot;, title = str_c(&quot;Average over &quot;, runs, &quot; runs &quot;), col = &quot;Epsilon&quot;, linetype = &quot;&quot;) + theme(legend.position = &quot;bottom&quot;) pt2 &lt;- dat2 %&gt;% ggplot(aes(x = t, y = value, col = epsilon, linetype = name)) + geom_line() + labs(y = &quot;Average number of times optimal action chosen&quot;, x = &quot;Time&quot;, title = str_c(&quot;Average over &quot;, runs, &quot; runs&quot;), col = &quot;Epsilon&quot;, linetype = &quot;&quot;) + theme(legend.position = &quot;bottom&quot;) return(list(ptR = pt1, ptO = pt2)) } We test the performance using 2000 runs over 1000 time steps. pts &lt;- performance(runs = 2000, steps = 1000) pts$ptR pts$ptO The solid line shows averages over all the runs from \\(t=1\\) to the considered time-step while the dotted line is a moving average over the last 50 time-steps. Since we are expected to learn over the time-steps the moving averages will in general be higher than the overall averages. Note that if we have 1000 time-steps a greedy approach in general is bad and an \\(\\epsilon\\)-greedy approach is better ($= 0.1 is best). That is, exploration is beneficial. 2.5 The role of the step-size In general we update the reward estimate of an action using \\[\\begin{equation} Q_{k+1} = Q_k +\\alpha_n(a) \\left[R_k - Q_k\\right] \\end{equation}\\] Until now we have used the sample average \\(\\alpha_n(a)= 1/n\\); however, other choices of \\(\\alpha_n(a)\\) is possible. In general we will converge to the true reward if \\[\\begin{equation} \\sum_n \\alpha_n(a) = \\infty \\quad\\quad \\mathsf{and} \\quad\\quad \\sum_n \\alpha_n(a)^2 &lt; \\infty. \\end{equation}\\] Meaning that the coefficients must be large enough to recover from initial fluctuations, but not so large that they do not converge in the long run. However, if the process is non-stationary, i.e. the expected reward of an action change over time, then convergence is undesirable and we may want to use a constant \\(\\alpha_n(a)= \\alpha \\in (0, 1]\\) instead. This results in \\(Q_{n+1}\\) being a weighted average of the past rewards and the initial estimate \\(Q_1\\): \\[\\begin{align} Q_{n+1} &amp;= Q_n +\\alpha \\left[R_n - Q_n\\right] \\nonumber \\\\ &amp;= \\alpha R_n + (1 - \\alpha)Q_n \\nonumber \\\\ &amp;= \\alpha R_n + (1 - \\alpha)[\\alpha R_{n-1} + (1 - \\alpha)Q_{n-1}] \\nonumber \\\\ &amp;= \\alpha R_n + (1 - \\alpha)\\alpha R_{n-1} + (1 - \\alpha)^2 Q_{n-1} \\nonumber \\\\ &amp;= \\vdots \\nonumber \\\\ &amp;= (1-\\alpha)^n Q_1 + \\sum_{i=1}^{n} \\alpha (1 - \\alpha)^{n-i} R_i \\\\ \\end{align}\\] Because the weight given to each reward depends on how many rewards ago it was observed, we can see that more recent rewards are given more weight. Note the weights \\(\\alpha\\) sum to 1 here, ensuring it is indeed a weighted average where more weight is allocated to recent rewards. Since the weight given to each reward decays exponentially into the past. This sometimes called an exponential recency-weighted average. 2.6 Optimistic initial values The methods discussed so far are dependent to some extent on the initial action-value estimate i.e. they are biased by their initial estimates. For methods with constant \\(\\alpha\\) this bias is permanent. We may set initial value estimates artificially high to encourage exploration in the short run. For instance, by setting initial values of \\(Q\\) to 5 rather than 0 we encourage exploration, even in the greedy case. Here the agent will almost always be disappointed with it’s samples because they are less than the initial estimate and so will explore elsewhere until the values converge. 2.7 Upper-Confidence Bound Action Selection An \\(\\epsilon\\)-greed algorithm choose the action to explore with equal probability in an exploration step. It would be better to select among non-greedy actions according to their potential for actually being optimal, taking into account both how close their estimates are to being maximal and the uncertainty in those estimates. One way to do this is to select actions using the : \\[\\begin{equation} A_t = \\arg\\max_a \\left(Q_t(a) + c\\sqrt{\\frac{\\ln t}{N_t(a)}}\\right), \\end{equation}\\] Note the square root term is a measure of the uncertainty in our estimate. It is proportional to \\(t\\) i.e. how many time-steps have passed and inversely proportional to \\(N_t(a)\\) i.e. how many times that action has been visited. The more time has passed, and the less we have sampled an action, the higher our upper-confidence-bound. As the timesteps increases, the denominator dominates the numerator as the ln term flattens. Each time we select an action our uncertainty decreases because \\(N\\) is the denominator of this equation. If \\(N_t(a) = 0\\) then we consider \\(a\\) as a maximal action, i.e. we select first among actions with \\(N_t(a) = 0\\). The parameter \\(c&gt;0\\) controls the degree of exploration. Higher \\(c\\) results in more weight on the uncertainty. Since upper-confidence bound action selection select actions according to their potential, it is expected to perform better than \\(\\epsilon\\)-greedy methods. 2.8 Summary Read Chapter 2.10 in Sutton and Barto (2018). 2.9 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 2.9.1 Exercise - Advertising Suppose you are an advertiser seeking to optimize which ads to show visitors on a particular website. For each visitor, you can choose one out of a collection of ads, and your goal is to maximize the number of clicks over time. Assume that: You have \\(k=5\\) adds to choose among. If add \\(A\\) is chosen then the user clicks the add with probability \\(p_A\\) which can be seen as the unknown click trough rate CTR (or an average reward). The CTRs are unknown and samples can be picked using the RLAdEnv class and the reward function which returns 1 if click on ad and 0 otherwise. #&#39; R6 Class representing the RL advertising environment RLAdEnv &lt;- R6Class(&quot;RLAdEnv&quot;, public = list( #&#39; @field mV Click trough rates mV = c(0.1, 0.83, 0.85, 0.5, 0.7), #&#39; @field k Number of ads. k = 5, #&#39; @description Sample reward of a bandit. #&#39; @param a Bandit/ad (index). #&#39; @return One if click on ad and zero otherwise. reward = function(a) { return(rbinom(1, 1, self$mV[a])) }, #&#39; @description Returns action with best mean. optimalAction = function() return(which.max(self$mV)) ) ) env &lt;- RLAdEnv$new() env$reward(2) # click on ad number two (return 0 or 1)? #&gt; [1] 1 env$optimalAction() # the best ad #&gt; [1] 3 env$mV # true CTRs #&gt; [1] 0.10 0.83 0.85 0.50 0.70 In the class the true CTRs can be observed but in practice this is hidden from the agent. Consider an \\(\\epsilon\\)-greedy algorithm to find the best ad. Assume the webpage is visited by 10000 users per day. × Solution set.seed(327) # to get same results #&#39; Performance of the bandit algorithm. #&#39; @param steps Steps (users). #&#39; @param epsilon Epsilon to be tested. #&#39; @return A list with statistics. testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rew &lt;- 0 for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) rew &lt;- rew + r agent$updateQ(a, r) } return(list(qV = agent$qV, avgReward = rew/steps)) } testEG(0.01) #&gt; $qV #&gt; [1] 0.000 0.800 0.852 0.409 0.654 #&gt; #&gt; $avgReward #&gt; [1] 0.849 testEG(0.1) #&gt; $qV #&gt; [1] 0.119 0.843 0.849 0.516 0.685 #&gt; #&gt; $avgReward #&gt; [1] 0.824 testEG(0.5) #&gt; $qV #&gt; [1] 0.110 0.844 0.851 0.484 0.703 #&gt; #&gt; $avgReward #&gt; [1] 0.725 # True values env$optimalAction() #&gt; [1] 3 env$mV #&gt; [1] 0.10 0.83 0.85 0.50 0.70 Epsilon = 0.01 seems to give the best average. Close Solution Run the \\(\\epsilon\\)-greedy algorithm with \\(\\epsilon = 0.01, 0.1, 0.5\\) over the 10000 steps. What are the estimated CTRs? What is the average number of clicks per user? × Solution ## Test function modified with plot feature testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rew &lt;- 0 qVal &lt;- matrix(0, nrow = 10000, ncol = 5) colnames(qVal) = str_c(&quot;A&quot;, 1:5) for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) rew &lt;- rew + r agent$updateQ(a, r) qVal[t,] &lt;- agent$qV } # make plot dat &lt;- tibble(t = 1:10000) %&gt;% bind_cols(qVal) %&gt;% # bind data together pivot_longer(!t, values_to = &quot;ctr&quot;, names_to = &quot;action&quot;) pt &lt;- dat %&gt;% ggplot(aes(x = t, y = ctr, col = action)) + geom_line() + labs(y = &quot;Empirical CTRs&quot;, x = &quot;Time&quot;, title = str_c(&quot;CTRs eps = &quot;, epsilon), col = &quot;Action&quot;) + theme(legend.position = &quot;bottom&quot;) return(list(qV = agent$qV, avgReward = rew/steps, plt = pt)) } testEG(0.01)$plt testEG(0.5)$plt As epsilon grows we estimate the true values better for all actions. Close Solution Make a plot of the empirical CTRs for \\(\\epsilon = 0.01, 0.5\\) over the 10000 time-steps, i.e. plot \\(Q_t(a)\\). × Solution ## Test function modified with rewards testEG &lt;- function(epsilon, steps = 10000) { agent &lt;- RLAgent$new(k = 5, epsilon = epsilon) rewards &lt;- c(10, 8, 5, 15, 2) rew &lt;- 0 qVal &lt;- matrix(0, nrow = 10000, ncol = 5) colnames(qVal) = str_c(&quot;A&quot;, 1:5) for (t in 1:steps) { a &lt;- agent$selectActionEG() r &lt;- env$reward(a) * rewards[a] rew &lt;- rew + r agent$updateQ(a, r) qVal[t,] &lt;- agent$qV } return(list(qV = agent$qV, avgReward = rew/steps)) } testEG(0.01) #&gt; $qV #&gt; [1] 0.909 6.565 4.583 7.607 1.378 #&gt; #&gt; $avgReward #&gt; [1] 6.83 testEG(0.5) #&gt; $qV #&gt; [1] 0.952 6.640 4.290 7.459 1.355 #&gt; #&gt; $avgReward #&gt; [1] 5.74 # True average reward values env$mV * c(10, 8, 5, 15, 2) #&gt; [1] 1.00 6.64 4.25 7.50 1.40 The best action is now 4 and eps = 0.01 seems to give the best overall average reward. Close Solution Assume that the rewards of ad clicks is equal to (10, 8, 5, 15, 2). Modify the algorithm so you look at rewards instead of CTRs. What is the best action to choose? We now modify the RLAgent and add an upper-confidence bound function selectActionUCB: #&#39; R6 Class representing the RL agent RLAgent &lt;- R6Class(&quot;RLAgent&quot;, public = list( #&#39; @field qV Q estimates. qV = NULL, #&#39; @field nV Action counter. nV = NULL, #&#39; @field k Number of bandits. k = NULL, #&#39; @field epsilon Epsilon used in epsilon greed action selection. epsilon = NULL, #&#39; @description Create an object (when call new). #&#39; @param k Number of bandits. #&#39; @param epsilon Epsilon used in epsilon greed action selection. #&#39; @return The new object. initialize = function(k = 10, epsilon = 0.01, ini = 0) { self$epsilon &lt;- epsilon self$qV &lt;- rep(ini, k) self$nV &lt;- rep(0, k) self$k &lt;- k }, #&#39; @description Clear learning. #&#39; @param eps Epsilon. #&#39; @return Action (index). clearLearning = function() { self$qV &lt;- 0 self$nV &lt;- 0 }, #&#39; @description Select next action using an epsilon greedy strategy. #&#39; @return Action (index). selectActionEG = function() { if (runif(1) &lt;= self$epsilon) { # explore a &lt;- sample(1:self$k, 1) } else { # exploit a &lt;- which(self$qV == max(self$qV)) a &lt;- a[sample(length(a), 1)] } return(a) }, #&#39; @description Select next action using UCB #&#39; @return Action (index). selectActionUCB = function(c, t) { val &lt;- self$qV + c * sqrt(log(t + 0.01)/self$nV) a &lt;- which.max(val) return(a) }, #&#39; @description Update learning values (including action counter). #&#39; @param a Action. #&#39; @param r Reward. #&#39; @return NULL (invisible) updateQ = function(a, r) { self$nV[a] &lt;- self$nV[a] + 1 self$qV[a] &lt;- self$qV[a] + 1/self$nV[a] * (r - self$qV[a]) return(invisible(NULL)) } ) ) × Solution testUCB &lt;- function(c = 2, steps = 10000) { agent &lt;- RLAgent$new(k = 5) rewards &lt;- c(10, 8, 5, 15, 2) rew &lt;- 0 for (t in 1:steps) { a &lt;- agent$selectActionUCB(c, t) r &lt;- env$reward(a) * rewards[a] rew &lt;- rew + r agent$updateQ(a, r) } return(list(qV = agent$qV, avgReward = rew/steps)) } testUCB(0.1) #&gt; $qV #&gt; [1] 0.00 6.63 3.75 0.00 0.00 #&gt; #&gt; $avgReward #&gt; [1] 6.63 testUCB(5) #&gt; $qV #&gt; [1] 2.22 6.48 3.68 7.46 1.43 #&gt; #&gt; $avgReward #&gt; [1] 7.28 testUCB(10) #&gt; $qV #&gt; [1] 0.556 6.586 3.952 7.502 1.680 #&gt; #&gt; $avgReward #&gt; [1] 7.4 testUCB(20) #&gt; $qV #&gt; [1] 1.48 6.62 4.25 7.56 1.42 #&gt; #&gt; $avgReward #&gt; [1] 7.25 A value \\(c = 10\\) seems to be a good choice. Close Solution Test the UCB algorithm for \\(c\\) values \\((0.1, 5, 10, 20)\\). Which algorithm seems to find the best average reward? 2.9.2 Exercise - A coin game Consider a game where you choose to flip one of two (possibly unfair) coins. You win 1 if your chosen coin shows heads and lose 1 if it shows tails. Model this as a K-armed bandit problem: define the action set. Is the reward a deterministic or stochastic function of your action? You do not know the coin flip probabilities. Instead, you are able to view 6 sample flips for each coin respectively: (T,H,H,T,T,T) and (H,T,H,H,H,T). Use the sample average formula (2.1) to compute the estimates of the value of each action. Decide on which coin to flip next assuming that you exploit. References "],["mod-mdp-1.html", "Module 3 Markov decision processes (MDPs) 3.1 Learning outcomes 3.2 Textbook readings 3.3 An MDP as a model for the agent-environment 3.4 Rewards and the objective function (goal) 3.5 Summary 3.6 Exercises", " Module 3 Markov decision processes (MDPs) This module gives an introduction to Markov decision processes (MDPs) with a finite number of states and actions. This gives us a full model of a sequential decision problem. MDPs are a classical formalization of sequential decision making, where actions influence not just immediate rewards, but also what will be the next state, and hence future rewards. Thus MDPs involve delayed reward and the need to consider the trade-off between immediate and delayed reward. MDPs are a mathematically idealized form of the RL problem where a full description is known and the optimal policy can be found. Often in a RL problem some parts of this description is unknown and we hereby have to estimate the best policy by learning. For example, in the bandit problem the rewards was unknown. 3.1 Learning outcomes By the end of this module, you are expected to: Identify the different elements of a Markov Decision Processes (MDP). Describe how the dynamics of an MDP are defined. Understand how the agent-environment RL description relates to an MDP. Interpret the graphical representation of a Markov Decision Process. Describe how rewards are used to define the objective function (expected return). Interpret the discount factor and its effect on the objective function. Identify episodes and how to formulate an MDP by adding an absorbing state. The learning outcomes relate to the overall learning goals number 2, 7, 10, and 12 of the course. 3.2 Textbook readings For this week, you will need to read Chapter 3-3.4 in Sutton and Barto (2018). Read it before continuing this module. You do not have to put to much focus on the examples. A summary of the book notation can be seen here. 3.3 An MDP as a model for the agent-environment Let us recall the RL problem which considers an agent in an environment: Agent: The one who takes the action (computer, robot, decision maker), i.e. the decision making component of a system. Everything else is the environment. A general rule is that anything that the agent does not have absolute control over forms part of the environment. Environment: The system/world where observations and rewards are found. At time step \\(t\\) the agent is in state \\(S_t\\) and takes action \\(A_{t}\\) and observe the new state \\(S_{t+1}\\) and reward \\(R_{t+1}\\): Figure 1.3: Agent-environment representation. Note we here assume that the Markov property is satisfied and the current state holds just as much information as the history of observations. That is, given the present state the future is independent of the past: \\[\\Pr(S_{t+1} | S_t, A_t) = \\Pr(S_{t+1} | S_1,...,S_t, A_t).\\] That is, the probability of seeing some next state \\(S_{t+1}\\) given the current state is exactly equal to the probability of that next state given the entire history of states. A Markov decision process (MDP) is a mathematical model that for each time-step \\(t\\) have defined states \\(S_t \\in \\mathcal{S}\\), possible actions \\(A_t \\in \\mathcal{A}(s)\\) given a state and rewards \\(R_t \\in \\mathcal{R} \\subset \\mathbb{R}\\). Consider the example in Figure 3.1. Each time-step have five states \\(\\mathcal{S} = \\{1,2,3,4,5\\}\\). Assume that the agent start in state \\(s_0\\) with two actions to choose among \\(\\mathcal{A}(s_0) = \\{a_1, a_2\\}\\). After choosing \\(a_1\\) a transition to \\(s_1\\) happens with reward \\(R_1 = r_1\\). Next, in state \\(s_1\\) the agent chooses action \\(a_2\\) and a transition to \\(s_2\\) happens with reward \\(r_2\\). This continues as time evolves. Figure 3.1: State-expanded hypergraph In a finite MDP, the sets of states, actions, and rewards all have a finite number of elements. In this case, the random variables have well defined discrete probability distributions dependent only on the preceding state and action which defines the dynamics of the system: \\[\\begin{equation} p(s&#39;, r | s, a) = \\Pr(S_t = s&#39;, R_t = r | S_{t-1} = s, A_{t-1} = a), \\end{equation}\\] which can be used to find the transition probabilities: \\[\\begin{equation} p(s&#39; | s, a) = \\Pr(S_t = s&#39;| S_{t-1} = s, A_{t-1}=A) = \\sum_{r \\in \\mathcal{R}} p(s&#39;, r | s, a), \\end{equation}\\] and the expected reward: \\[\\begin{equation} r(s, a) = \\mathbb{E}[R_t | S_{t-1} = s, A_{t-1} = a] = \\sum_{r \\in \\mathcal{R}} r \\sum_{s&#39; \\in \\mathcal{S}} p(s&#39;, r | s, a). \\end{equation}\\] That is, to define an MDP the following are needed: A finite number of states and actions. That is, we can store values using tabular methods. All states \\(S \\in \\mathcal{S}\\) and actions \\(A \\in \\mathcal{A}(s)\\) are known. The transition probabilities \\(p(s&#39; | s, a)\\) and expected rewards \\(r(s, a)\\) are given. Alternatively, \\(p(s&#39;, r | s, a)\\). Moreover, for now a stationary MDP is considered, i.e. at each time-step all states, actions and probabilities are the same and hence the time index can be dropped. 3.4 Rewards and the objective function (goal) The reward hypothesis is a central assumption in reinforcement learning: All of what we mean by goals and purposes can be well thought of as the maximisation of the expected value of the cumulative sum of a received scalar signal (called reward). This assumption can be questioned but in this course we assume it holds. The reward signal is our way of communicating to the agent what we want to achieve not how we want to achieve it. The return \\(G_t\\) can be defined as the sum of future rewards; however, if the time horizon is infinite the return is also infinite. Hence we use a discount factor \\(0 \\leq \\gamma \\leq 1\\) and define the return as \\[\\begin{equation} G_t = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\cdots = \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} \\end{equation}\\] Discounting is important since it allows us to work with finite returns because if \\(\\gamma &lt; 1\\) and the reward is bounded by a number \\(B\\) then the return is always finite: \\[\\begin{equation} G_t = \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} \\leq B \\sum_{k=0}^{\\infty} \\gamma^k = B \\frac{1}{1 - \\gamma} \\end{equation}\\] Note gamma close to one put weight on future rewards while a gamma close to zero put weight on present rewards. Moreover, an infinite time-horizon is assumed. An MDP modelling a problem over a finite time-horizon can be transformed into an infinite time-horizon using an absorbing state with transitions only to itself and a reward of zero. This breaks the agent-environment interaction into episodes (e.g playing a board game). Each episode ends in the absorbing state, possibly with a different reward. Each starts independently of the last, with some distribution of starting states. Sequences of interaction without an absorbing state are called continuing tasks. The objective function is to choose actions such that the expected return is maximized. Let us formalize this mathematically in the next sections. 3.5 Summary MDPs formalize the problem of an agent interacting with an environment. The agent and environment interact at discrete time steps. At each time, the agent observes the current state of the environment. Then selects an action and the the environment transitions to a new state with a reward. * An agent’s choices have long-term consequences (delayed reward). Selected actions influences future states and rewards. The objective is to maximize the expected discounted return. With a discount factor less than one, we can guarantee the return remains finite. The value of the discount factor defines how much we care about short-term rewards versus long-term rewards. A first step in applying reinforcement learning is to formulate the problem as an MDP. 3.6 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 3.6.1 Exercise - Sequential decision problems × Solution Examples could be: Ludo - State: position on the board. Actions: Possible movements. Rewards: In a win state e.g. 1, in a loose state -1 and 0 otherwise. Inventory management - State: inventory level. Actions: Order \\(x\\) units, wait. Rewards: a negative number representing inventory holding cost plus ordering cost. Investment - State: current portfolio, KPI's from considered companies. Actions: Buy/sell \\(x\\) stocks of company \\(y.\\) Rewards: returns - costs. Close Solution Think of two sequential decision problems and try to formulate them as MDPs. Describe the states, actions and rewards in words. How do the states, actions and rewards look like for the bandit problem? Try drawing the state-expanded hypergraph. 3.6.2 Exercise - Expected return × Solution gam &lt;- 0.8 g &lt;-0 r &lt;- c(-3, 5, 2, 7, 1) for (i in 4:0) { g &lt;- r[i+1] + gam*g } g #&gt; [1] 6.27 Close Solution Suppose \\(\\gamma=0.8\\) and we observe the following sequence of rewards: \\(R_1 = -3\\), \\(R_2 = 5\\), \\(R_3=2\\), \\(R_4 = 7\\), and \\(R_5 = 1\\) with a finite time-horizon of \\(T=5\\). What is \\(G_0\\)? Hint: work backwards and recall that \\(G_t = R_{t+1} + \\gamma G_{t+1}\\). × Solution # recall sum_k g^k = 1/(1-g) g1 &lt;- 7 * 1/(1-0.9) g1 #&gt; [1] 70 g0 &lt;- 2 + 0.9 * 70 g0 #&gt; [1] 65 Close Solution Suppose \\(\\gamma=0.9\\) and we observe rewards: \\(R_1 = 2\\), \\(R_t = 7\\), \\(t&gt;1\\) given a infinite time-horizon. What is \\(G_0\\) and \\(G_1\\)? 3.6.3 Exercise - Gambler’s problem A gambler has the opportunity to make bets on the outcomes of a sequence of coin flips. If the coin comes up heads, he wins as many dollars as he has staked on that flip; if it is tails, he loses his stake. The game ends when the gambler reaches his goal of a capital equal $100, or loses by running out of money. On each flip, the gambler must decide what portion of his capital to stake, in integer numbers of dollars. This problem can be formulated as an undiscounted, episodic, finite MDP. × Solution \\[\\mathcal{S} = \\{ s | 0 \\leq s \\leq 100 \\}\\] Close Solution Define the state space \\(\\mathcal{S}\\). × Solution \\[\\mathcal{A}(s) = \\{ a | 0 \\leq a \\leq s \\}\\] Close Solution Define the action space \\(\\mathcal{A}(s)\\). × Solution \\[r(s,a) = \\mathbb{E}[R_a] = p_h a\\] Close Solution Let \\(R_a\\) denote the reward given bet $a. Calculate the expected rewards. × Solution Note \\[p(s | s&#39;, a) = \\Pr(s = s&#39; + \\mathbb{1}_{\\text{win}}a).\\] Hence there are two transitions: if \\(s = s&#39; - a\\) then \\(p(s | s&#39;, a) = 1-p_h\\) and if \\(s = s&#39; + a\\) then \\(p(s | s&#39;, a) = p_h\\). Close Solution Calculate the transition probabilities. 3.6.4 Exercise - Factory storage A factory has a storage tank with a capacity of 4 \\(\\mathrm{m}^{3}\\) for temporarily storing waste produced by the factory. Each week the factory produces \\(0,1\\), 2 or 3 \\(\\mathrm{m}^{3}\\) waste with respective probabilities \\[p_{0}=\\displaystyle \\frac{1}{8},\\ p_{1}=\\displaystyle \\frac{1}{2},\\ p_{2}=\\displaystyle \\frac{1}{4} \\text{ and } p_{3}=\\displaystyle \\frac{1}{8}.\\] If the amount of waste produced in one week exceeds the remaining capacity of the tank, the excess is specially removed at a cost of $30 per cubic metre. At the end of each week there is a regular opportunity to remove all waste from the storage tank at a fixed cost of $25 and a variable cost of $5 per cubic metre. The problem can be modelled as a finite MDP where a state denote the amount of waste in the tank at the end of week \\(n\\) just before the regular removal opportunity. × Solution \\[\\mathcal{S} = \\{ 0,1,2,3,4 \\}\\] Close Solution Define the state space \\(\\mathcal{S}\\). × Solution Let \\(e\\) and \\(k\\) denote empty and keep the waste from the tank. Then the action space is \\[\\mathcal{A}(s) = \\{ e, k \\}.\\] Close Solution Define the action space \\(\\mathcal{A}(s)\\). × Solution The expected cost of a given state and action is the cost of empting the container and the expected cost of a special removal during the next week. Hence \\[r(s, e) = -(25 + 5s)\\]and\\[r(s,k) = -30\\sum_{i&gt;4-s} (s+i-4)p_i\\] Close Solution Calculate the expected rewards \\(r(s,a)\\). × Solution The transition probabilities are: \\[p(s&#39;|s,k) = p_{s&#39;-s}\\text{ if } s\\leq s&#39; \\leq 3\\] \\[p(4|s,k) = \\sum_{i\\geq 4-s} p_i\\] \\[p(s&#39;|s,e) = p_{s&#39;}\\text{ if } 0\\leq s&#39; \\leq 3\\] \\[p(s&#39;|s,k) = 0 \\text{ otherwise.}\\] Close Solution Calculate the transition probabilities \\(p(s&#39;|s,a)\\). References "],["mod-mdp-2.html", "Module 4 Policies and value functions for MDPs 4.1 Learning outcomes 4.2 Textbook readings 4.3 Policies and value functions 4.4 Optimal policies and value functions 4.5 Optimality vs approximation 4.6 Semi-MDPs (non-fixed time length) 4.7 Summary 4.8 Exercises", " Module 4 Policies and value functions for MDPs This module go deeper in the theory of finite Markov decision processes (MDPs). The concept of a policy and value functions is considered. Once the problem is formulated as an MDP, finding the optimal policy can be found using value functions. 4.1 Learning outcomes By the end of this module, you are expected to: Identify a policy as a distribution over actions for each possible state. Define value functions for a state and action. Derive the Bellman equation for a value function. Understand how Bellman equations relate current and future values. Define an optimal policy. Derive the Bellman optimality equation for a value function. The learning outcomes relate to the overall learning goals number 2, 7, 10, and 12 of the course. 4.2 Textbook readings For this week, you will need to read Chapter 3.5-3.7 in Sutton and Barto (2018). Read it before continuing this module. You do not have to put to much focus on the examples. A summary of the book notation can be seen here. 4.3 Policies and value functions A policy \\(\\pi\\) is a distribution over actions, given some state: \\[\\pi(a | s) = \\Pr(A_t = a | S_t = s).\\] Since the MDP is stationary the policy is time-independent, i.e. given a state, we choose the same action no matter the time-step. If \\(\\pi(a | s) = 1\\) for a single state, i.e. an action is chosen with probability one always then the policy is called deterministic. Otherwise a policy is called stochastic. Given a policy we can define some value functions. The state-value function \\(v_\\pi(s)\\) denote the expected return starting from state \\(s\\) when following the policy \\(\\pi\\): \\[ \\begin{align} v_\\pi(s) &amp;= \\mathbb{E}_\\pi[G_t | S_t = s] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1} + \\gamma G_{t+1} | S_t = s]. \\end{align} \\] Note the last equal sign comes from \\(G_t = R_{t+1} + \\gamma G_{t+1}\\). The action-value function \\(q_\\pi(s, a)\\), denote the expected return starting from state \\(s\\), taking action \\(a\\) and from thereon following policy \\(\\pi\\): \\[ \\begin{align} q_\\pi(s, a) &amp;= \\mathbb{E}_\\pi[G_t | S_t = s, A_t = a] \\\\ &amp;= \\mathbb{E}_\\pi[R_{t+1} + \\gamma G_{t+1} | S_t = s, A_t = a]. \\end{align} \\] This action-value, also known as “q-value”, is very important, as it tells us directly what action to pick in a particular state. Given the definition of q-values, the state-value function is an average over the q-values of all actions we could take in that state: \\[\\begin{equation} v_\\pi(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a|s)q_\\pi(s, a) \\tag{4.1} \\end{equation}\\] A q-value (action-value) is equal to the expected reward \\(r(s,a)\\) that we get from choosing action \\(a\\) in state \\(s\\), plus a discounted amount of the average state-value of all the future states: \\[q_\\pi(s, a) = r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\] Joining the equations, the state-value of a particular state \\(s\\) now becomes the sum of weighted state-values of all possible subsequent states \\(s&#39;\\), where the weights are the policy probabilities: \\[ \\begin{align} v_\\pi(s) &amp;= \\sum_{a \\in \\mathcal{A}}\\pi(a | s)q_\\pi(s, a) \\\\ &amp;= \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\right), \\end{align} \\tag{4.2} \\] which is known as the Bellman equation. 4.4 Optimal policies and value functions The objective function of an MDP can now be stated mathematically which is to find an optimal policy \\(\\pi_*\\) with state-value function: \\[v_*(s) = \\max_\\pi v_\\pi(s).\\] That is, a policy \\(\\pi&#39;\\) is defined as better than policy \\(\\pi\\) if its expected return is higher for all states. Note the objective function is not a scalar here but if the agent start in state \\(s_0\\) then we may reformulate the objective function maximize the expected return to \\[v_*(s_0) = \\max_\\pi \\mathbb{E}_\\pi[G_0 | S_0 = s_0] = \\max_\\pi v_\\pi(s_0)\\] If the MDP has the right properties (details are not given here), there exists an optimal deterministic policy \\(\\pi_*\\) which is better than or just as good as all other policies. For all such optimal policies (there may be more than one), we only need to find one optimal policy that have the optimal state-value function \\(v_*\\). We may rewrite \\(v_*(s)\\) using Eq. (4.1): \\[ \\begin{align} v_*(s) &amp;= \\max_\\pi v_\\pi(s) \\\\ &amp;= \\max_\\pi \\sum_{a \\in \\mathcal{A}}\\pi(a|s)q_\\pi(s, a) \\\\ &amp;= \\max_\\pi \\max_a q_\\pi(s, a)\\qquad \\text{(set $\\pi(a|s) = 1$ where $q_\\pi$ is maximal)} \\\\ &amp;= \\max_a \\max_\\pi q_\\pi(s, a) \\\\ &amp;= \\max_a q_*(s, a), \\\\ \\end{align} \\] where the optimal q-value/action-value function \\(q_*\\) is: \\[ \\begin{align} q_*(s, a) &amp;= \\max_\\pi q_\\pi(s, a) \\\\ &amp;= r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_*(s&#39;) \\\\ &amp;= r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) \\max_{a&#39;} q_*(s&#39;, a&#39;). \\end{align} \\] This is the the Bellman optimality equation for \\(q_*\\) and the optimal policy is: \\[ \\pi_*(a | s) = \\begin{cases} 1 \\text{ if } a = \\arg\\max_{a \\in \\mathcal{A}} q_*(s, a) \\\\ 0 \\text { otherwise.} \\end{cases} \\] Similar we can write the Bellman optimality equation for \\(v_*\\): \\[\\begin{align} v_*(s) &amp;= \\max_a q_*(s, a) \\\\ &amp;= \\max_a r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_*(s&#39;) \\end{align}\\] Note the Bellman equations define our state-value and q-value function, while the Bellman optimality equations define how to find the optimal value functions. Using \\(v_*\\), the optimal expected long term return is turned into a quantity that is immediately available for each state. On the other hand if we do not store \\(v_*\\), we can find \\(v_*\\) by a one-step-ahead search using \\(q_*\\), acting greedy. 4.5 Optimality vs approximation In Section 4.4 optimal policies and value functions was found; however solving the Bellman optimality equations can be expensive, e.g. if the number of states is huge. Consider a state \\(s = (x_1,\\ldots,x_n)\\) with state variables \\(x_i\\) each taking two possible values, then the number of states is \\(|\\mathcal{S}| = 2^n\\). That is, the state space grows exponentially with the number of state variables also known as the curse of dimensionality. Large state or action spaces may happen in practice; moreover, they may also be continuous. As a result we need to approximate the value functions because calculation of optimality is too expensive. This is indeed what happens in RL where we approximate the expected return. Furthermore, often we focus on states with high encountering probability while allowing the agent to make sub-optimal decisions in states that have a low probability. 4.6 Semi-MDPs (non-fixed time length) So far we have considered MDPs with a fixed length between each time-step. The model can be extended to MDPs with non-fixed time-lengths known as semi-MDPs. Let \\(l(s&#39;|s,a)\\) denote the length of a time-step given that the system is in state \\(s\\), action \\(a\\) is chosen and makes a transition to state \\(s&#39;\\). Then the discount rate over a time-step with length \\(l(s&#39;|s,a)\\) is then \\[\\gamma(s&#39;|s,a) = \\gamma^{l(s&#39;|s,a)},\\] and the Bellman optimality equations becomes: \\[ v_*(s) = \\max_a r(s,a) + \\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) \\gamma(s&#39;|s,a) v_*(s&#39;), \\] and \\[ q_*(s, a) = r(s,a) + \\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) \\gamma(s&#39;|s,a) \\max_{a&#39;} q_*(s&#39;, a&#39;). \\] That is, the discount rate now is a part of the sum since it depends on the length which depends on the transition. 4.7 Summary Read Chapter 3.8 in Sutton and Barto (2018). 4.8 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 4.8.1 Exercise - Optimal policy Figure 4.1: A simple MDP. Consider the transition diagram for an MDP shown in Figure 4.1 with 3 states. The only decision to be made is that in the top state, where two actions are available, left and right. The numbers show the rewards that are received deterministically after each action. There are exactly two deterministic policies left and right. Which policy is optimal if \\(\\gamma = 0, 0.9\\) and 0.5? 4.8.2 Exercise - Car rental Consider a rental company with two locations, each with a capacity of 20 cars. Each day, customers arrive at each location to rent cars. If a car is available, it is rented out with a reward of $10. Otherwise the opportunity is lost. Cars become available for renting the day after they are returned. The number of cars rental requests \\(D_i\\) at Location \\(i=1,2\\) are Poisson distributed with mean 3 and 4. Similar, the number of cars returned \\(H_i\\) at Location \\(i=1,2\\) are Poisson distributed with mean 3 and 2. Cars returned resulting in more cars than the capacity are lost (and thus disappear from the problem). To ensure that cars are available where they are needed, they can be moved between the two locations overnight, at a cost of $2 per car. A maximum of five cars can be moved from one location to the other in one night. Formulate the problem as an finite MDP where the time-steps are days. × Solution \\[\\mathcal{S} = \\{ (x,y) | 0 \\leq x, y \\leq 20 \\}\\] Close Solution Define the state space (with states \\((x,y)\\)) equal the number of cars at each location at the end of the day. × Solution \\[\\mathcal{A}(s) = \\{ a | -\\min(5,y) \\leq a \\leq min(5,x) \\}\\] Close Solution Define the action space equal the net numbers of cars moved from Location 1 to Location 2 overnight, i.e. negative if move from Location 2 to 1. × Solution The reward equals the reward of rentals minus the cost of movements: \\[r(s,a) = \\mathbb{E}[10(D_1+D_2)-2|a|] = 10(\\lambda_{D_1}+\\lambda_{D_2})-2|a|\\] Close Solution Calculate the expected reward \\(r(s,a)\\). Note the inventory dynamics (number of cars) at each parking lot is independent of the other given an action \\(a\\). Let us consider Location 1 and assume that we are in state \\(x&#39;\\) and chose action \\(a\\). Then the number of cars after movement is \\(x&#39; - a\\) and after rental requests \\(\\max(0, x&#39; - a - D_1)\\). Next, the number of returned cars are added: \\(\\max(0, x&#39; - a - D_1) + H_1\\). Finally, note that if this number is above 20 (parking lot capacity), then we only have 20 cars, i.e. the inventory dynamics (number of cars at the end of the day) is \\[X = \\min(20, \\max(0, x&#39; - a - D_1) + H_1))).\\] × Solution Only difference is that cars moved to Location 2 is \\(a\\) (and not \\(-a\\)): \\[Y = \\min(20, \\max(0, y&#39; + a - D_2) + H_2)))\\] Close Solution Give the inventory dynamics for Location 2. References "],["mod-dp.html", "Module 5 Dynamic programming 5.1 Learning outcomes 5.2 Textbook readings 5.3 Policy evaluation 5.4 Policy Iteration 5.5 Value Iteration 5.6 Summary of DP Algorithms (so far) 5.7 Extensions 5.8 Summary 5.9 Exercises", " Module 5 Dynamic programming The term Dynamic Programming (DP) refers to a collection of algorithms that can be used to compute optimal policies of a model with full information about the dynamics, e.g. a Markov Decision Process (MDP). A DP model must satisfy the principle of optimality. That is, an optimal policy must consist for optimal sub-polices or alternatively the optimal value function in a state can be calculated using optimal value functions in future states. This is indeed what is described with the Bellman optimality equations. DP do both policy evaluation (prediction) and control. Policy evaluation give us the value function \\(v_\\pi\\) given a policy \\(\\pi\\). Control refer to finding the best policy or optimizing the value function. This can be done using the Bellman optimality equations. Two main problems arise with DP. First, often we do not have full information about the MDP model, e.g. the rewards or transition probabilities are unknown. Second, we need to calculate the value function in all states using the rewards, actions, and transition probabilities. Hence, using DP may be computationally expensive if we have a large number of states and actions. Note the term programming in DP have nothing to do with a computer program but comes from that the mathematical model is called a “program”. 5.1 Learning outcomes By the end of this module, you are expected to: Describe the distinction between policy evaluation and control. 5.2 Textbook readings For this week, you will need to read Chapter 4-4.7 in Sutton and Barto (2018). Read it before continuing this module. A summary of the book notation can be seen here. 5.3 Policy evaluation The state-value function can be represented using the Bellman equation (4.2): \\[\\begin{equation} v_\\pi(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_\\pi(s&#39;)\\right). \\end{equation}\\] If the dynamics are known perfectly, this becomes a system of \\(|\\mathcal{S}|\\) simultaneous linear equations in \\(|\\mathcal{S}|\\) unknowns \\(v_\\pi(s), s \\in \\mathcal{S}\\). This linear system can be solved using e.g. some software. However, inverting the matrix can be computationally expensive for a large state space. Instead we consider an iterative method and a sequence of value function approximations \\(v_0, v_1, v_2, \\ldots\\), with initial approximation \\(v_0\\) chosen arbitrarily e.g. \\(v_k(s) = 0 \\: \\forall s\\) (ensuring terminal state = 0). We can update it using the Bellman equation using (a sweep): \\[\\begin{equation} v_{k+1}(s) = \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left( r(s,a) + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} p(s&#39; | s, a) v_k(s&#39;)\\right) \\end{equation}\\] We call this update an because it is based on the expectation over all possible next states, rather than a sample of reward/value from the next state. Eventually this update will converge when \\(v_k = v_\\pi\\) after a number of sweeps of the state-space. Since we do not want an infinite number of sweeps we introduce a threshold \\(\\theta\\) (see Figure 5.1). Note the algorithm uses two arrays to maintain the state-value (\\(v\\) and \\(V\\)). Alternatively, a single array could be used that update values in place, i.e. \\(V\\) is used insted of \\(v\\). Hence, values are updated faster. Figure 5.1: Iterative policy evaluation. 5.4 Policy Iteration Now that we have means to evaluate a policy iteratively, we can look into finding an optimal policy. In general, this is composed of two simple steps: Given a policy \\(\\pi\\) (initially \\(\\pi_0\\)), estimate \\(v_\\pi\\) via the policy evaluation algorithm (iterating a fixed number of times or until it stabilizes), giving you \\[v_\\pi(s) = \\mathbb{E}[R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + ... | S_t = s]\\] Generate a new, improved policy \\(\\pi&#39; \\geq \\pi\\) by greedily picking \\[\\pi&#39; = \\text{greedy}(v_\\pi)\\] Then go back to step (1) to evaluate the policy. Let’s try to understand this deeper. To do so, consider a deterministic policy \\(\\pi(s) = a\\). Then what we are doing in the above two steps is the following: \\[\\pi&#39;(s) = \\argmax_{a \\in \\mathcal{A}} q_\\pi(s, a)\\] i.e. our new policy will, in each state, pick the action that “gives us the most q”. Now, we can set up the following inequality: \\[ q_\\pi(s, \\pi&#39;(s)) = \\max_{a \\in \\mathcal{A}} q_\\pi(s, a) \\geq q_\\pi(s, \\pi(s)) = v_\\pi(s) \\] which proves that this greedy policy iteration strategy does indeed work, since the return we get from starting in state \\(s\\), greedily choosing the locally best action \\(\\argmax_{a \\in \\mathcal{A}} q(s, a)\\) and from thereon following the old policy \\(\\pi\\), must be at least as high as if we had chosen any particular action \\(\\pi(s)\\) and not the optimal one (basically, the maximum of a sequence is at least as big as any particular value of the sequence). (Note: I assume the equality in \\(q_\\pi(s, \\pi(s)) = v_\\pi(s)\\) is meant in expectation?) What we can show now is that using this greedy strategy not only improves the next step, but the entire value function. For this, we simply need to do some expansions inside our definition of the state-value function as a Bellman expectation equation: \\[ \\begin{align} v_\\pi(s) &amp;\\leq q_\\pi(s, \\pi&#39;(s)) = \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma v_\\pi(S_{t+1}) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma q_\\pi(S_{t+1}, \\pi&#39;(S_{t+1})) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma (R_{t+2} + \\gamma^2 v_\\pi(S_{t+2})) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma R_{t+2} + \\gamma^2 q_\\pi(S_{t+2}, \\pi&#39;(S_{t+2})) | S_t = s] \\\\ &amp;\\leq \\mathbb{E}_{\\pi&#39;}[R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + ...)) | S_t = s] \\\\ &amp;= v_{\\pi&#39;}(s) \\end{align} \\] So in total, we have \\(v_\\pi(s) \\leq v_{\\pi&#39;}(s)\\). Furthermore, if at one point the policy iteration stabilizes and we have equality in the previous equation \\[ q_\\pi(s, \\pi&#39;(s)) = \\max_{a \\in \\mathcal{A}} q_\\pi(s, a) = q_\\pi(s, \\pi(s)) = v_\\pi(s) \\] then we also have \\[\\max_{a \\in \\mathcal{A}} q_\\pi(s, a) = v_\\pi(s)\\] which is precisely the Bellman optimality equation. So at this point, it holds that \\[v_\\pi(s) = v_\\star(s)\\, \\forall s \\in \\mathbb{S}.\\] The last question we must answer is how many steps of policy iteration we should do to find the optimal policy? Definitely not infinitely many, since we often notice that the value function stabilizes quite rapidly at some point. So there are two basic methods: Use \\(\\varepsilon\\)-convergence, meaning we stop when all values change less than some amount \\(\\varepsilon\\) or Just use a fixed number of steps \\(k\\) (thereby introducing another hyperparameter). 5.5 Value Iteration The next dynamic programming method we want to consider is value iteration. In this case, it is not directly our aim to improve the policy, but rather aims directly at improving the value function (policy iteration does this as well, but as a side effect). Basically, while policy iteration iterated on the Bellman expectation equation, value iteration now iterates on the Bellman optimality equation via the following update rule: \\[ v_\\star(s) \\gets \\max_{a \\in \\mathcal{A}} \\mathcal{R}_s^a + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} \\mathcal{P}_{ss&#39;}^a v_\\star(s&#39;) \\] or, for the step \\(k \\rightarrow k + 1\\): \\[ v_{k+1} \\gets \\max_{a \\in \\mathcal{A}} \\mathcal{R}_s^a + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} \\mathcal{P}_{ss&#39;}^a v_k(s&#39;) \\] Notice how we assume we already know the solutions to the “subproblems”, i.e. \\(v_\\star(s&#39;)\\) and then work backwards to find the best solution to the actual problem (essence of dynamic programming). As such, practically, we can begin with some initial estimate of the target state-value and then iteratively update the previous state-values. Note how value-iteration effectively combines one sweep of policy evaluation, i.e. one “backup”, with one step of policy iteration (improvement), since it performs a greedy update while also evaluating the current policy. Also, it is important to understand that the value-iteration algorithm does not require a policy to work. No actions have to be chosen. Rather, the q-values (rewards + values of next states) are evaluated to update the state-values. In fact, the last step of value-iteration is to output the optimal policy \\(\\pi^\\star\\): \\[ \\pi^\\star(s) = \\argmax_a q(s, a) = \\argmax_a R_s^a + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} P_{ss&#39;}^a v_{\\pi^\\star}(s&#39;) \\] To derive the above equation, remind yourself of the Bellman optimality equation for the state-value function: \\[v_\\star(s) = \\max_a q_\\star(s, a)\\] and that for the action-value function: \\[q_\\star(s, a) = \\mathcal{R}_s^a + \\gamma\\sum_{s \\in \\mathcal{S}} \\mathcal{P}_{ss&#39;}^a v_\\star(s)\\] and plug the latter into the former. Basically, at each time step we will update the value function for a particular state to be the maximum q value. 5.6 Summary of DP Algorithms (so far) At this point, we know three DP algorithms that solve two different problems. We know the policy evaluation, policy iteration and value iteration algorithms that solve the prediction (1) and control (2, 3) problems, respectively. Let’s briefly summarize each: The goal of policy evaluation is to determine \\(v_\\pi\\) given \\(\\pi\\). It does so by starting with some crude estimate \\(v(s)\\) and iteratively evaluating \\(\\pi\\). \\(v(s)\\) is updated to finally give \\(v_\\pi\\) via the Bellman expectation equation: \\[ \\begin{align} v_{k+1} &amp;= \\sum_{a \\in \\mathcal{A}} \\pi(a|s) q_\\pi(s, a) \\\\ &amp;= \\sum_{a \\in \\mathcal{A}}\\pi(a | s)\\left(R_s^a + \\gamma\\sum_{s \\in \\mathcal{S}} P_{ss&#39;}^a v_k(s&#39;)\\right) \\end{align} \\] Policy iteration combines policy evaluation and the Bellman expectation equation with updates to the policy. Instead of just updating the state values, we also update the policy, setting the chosen action in each state to the one with the highest q-value: Policy Evaluation, \\(\\pi&#39; = \\text{greedy}(v_\\pi)\\) Policy iteration algorithms have a time-complexity of \\(O(mn^2)\\) for \\(m\\) actions and \\(n\\) states. Lastly, Value iteration uses the Bellman optimality equation to iteratively update the value of each state to the maximum action-value attainable from that state \\[ v_{k+1} \\gets \\max_{a \\in \\mathcal{A}} q_\\pi(s, a) = \\max_{a \\in \\mathcal{A}} \\mathcal{R}_s^a + \\gamma\\sum_{s&#39; \\in \\mathcal{S}} \\mathcal{P}_{ss&#39;}^a v_k(s&#39;) \\] and finally also outputs the optimal policy: \\(\\pi^\\star(s) = \\argmax_a q(s, a)\\) Value iteration algorithms have a time-complexity of \\(O(m^2n^2)\\) for \\(m\\) actions and \\(n\\) states. 5.7 Extensions One extension to dynamic programming as we have discussed it above is asynchronous DP, where states are updated individually, in any order. This can significantly improve computation. The first way to achieve more asynchronous DP is to use in-place DP. Basically, instead of keeping a copy of the old and new value function in each value-iteration update, you can just update the value functions in-place. The thing to note here is that asynchronous updates in other parts of the state-space will directly be affected by this. However, the point is that this is not actually a bad idea. An extension of this is prioritized sweeping. The idea here is to keep track of how “effective” or “significant” updates to our state-values are. States where the updates are more significant are likely further away from converging to the optimal value. As such, we’d like to update them first. For this, we would compute this significance, called the Bellman error: \\[|v_{k+1}(s) - v_k(s)|\\] and keep these values in a priority queue. You can then efficiently pop the top of it to always get the state you should update next. An additional improvement is to do prioritize local updates. The idea is that if your robot is in a particular region of the grid, it is much more important to update nearby states than faraway ones. Lastly, in very high dimensional spaces and problems with high branching factor, it makes sense to sample actions (branches). 5.8 Summary Read Chapter 4.8 in Sutton and Barto (2018). 5.9 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! 5.9.1 Exercise - Gambler’s problem Consider the gambler’s problem in Exercise ??. Solve the problem using … 5.9.2 Exercise - Car rental Consider the car rental problem in Exercise 4.8.2 with inventory dynamics: \\[X = \\min(20, \\max(0, x&#39; - a - D_1) + H_1))),\\] and \\[Y = \\min(20, \\max(0, y&#39; + a - D_2) + H_2))),\\] for Location 1 and 2, respectively. The transition probabilities can be split due to independence: \\[ p((x,y) | (x&#39;,y&#39;), a) = p(x | x&#39;, a) p(y | y&#39;, a) \\] Solve the problem using … References "],["mod-r-setup.html", "A Setting up R", " A Setting up R R is a programming language and free software environment. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. For a further overview and description of the history of R see Chapter 2 in Peng (2018). R can be run from a terminal but in general you use an IDE (integrated development environment) RStudio for running R and to saving your work. R and RStudio can either be run from your laptop or using RStudio Cloud which run R in the cloud using your browser. During this course it is recommend to use RStudio on your laptop since there is no limit on CPU usage. If you need to install R and RStudio on your laptop check this out. If you need a brushup on R have a look at the free online course Introduction to R at DataCamp. DataCamp is an online platform for learning data science. DataCamp runs all the courses in your browser. That is, R is run on a server and you do not use RStudio here. References "],["groups.html", "B Working in groups", " B Working in groups During the course you have been allocated into groups. You are expected to solve the exercises and write the project report in your group. Before you start, it is a good idea to agree on a set of group rules. First, agree on a coding convention when you are going to use R. Most people in the R community use snake case but camel case is also okay. Next, setup rules on when to meet and how you will organize the work. For instance, it is a good idea that all try to solve some of the exercises before you meet and you then discuss the answers, problems etc. Finally, it is a good idea to have a common place for your code. You have different options: Use a cloud storage services such as Dropbox, OneDrive or Google Drive. Use a version control system such as Git together with GitHub. GitHub is a code sharing and publishing service and may be seen as a social networking site for programmers. If you use RStudio Cloud then one person in the group can create a shared workspace with projects: First create a new workspace named e.g. Shared. Press Members and add the group members as moderators. Now go back to Projects in the RL workspace and move one project to the shared workspace. Rename it to e.g. Group Project. Members will now have access to this project where you can share code. NOTE you can not work collectively on a file simultaneously. That is, only one member can change a file at a time! Hence it is a good idea to have your own private project to work on and use this project as a place where you can share code. If you want to download a project to your laptop then press the export button. The benefit of a cloud storage service is that it is well known to you and easy to setup. Cons are that you cannot work on the same file simultaneously. The benefit of Git and GitHub is that it manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. Here you can work on files simultaneously. Moreover, it can be used from within RStudio. Cons are that it is harder to setup and learn. For a detailed description see Why Git? Why GitHub?. "],["coding-convention.html", "C Coding/naming convention C.1 Commenting your code", " C Coding/naming convention The main reason for using a consistent set of coding conventions is to standardize the structure and coding style of an application so that you and others can easily read and understand the code. Good coding conventions result in precise, readable, and unambiguous source code that is consistent with other language conventions and as intuitive as possible. Different ways of naming you variables exists. You are advised to adopt a naming convention; some use snake case others use camel case. The R community mostly use snake case but camel case is also okay. Choose the naming convention you like best in your study group. But stick only to one of them. A few examples: this_is_snake_case # note you do not use capital letters here thisIsCamelCase # you start each word with a capital letter (except the first) When defining variables and functions, it is in general good practice to use nouns for variables and verbs for functions. C.1 Commenting your code It is always good practice to comment your code. Such that others can get a fast overview and understand your code easier. We will use roxygen documentation comments which are widely known. #&#39; Subtract two vectors #&#39; #&#39; @param x First vector. #&#39; @param y Vector to be subtracted. #&#39; #&#39; @return The difference. #&#39; @export #&#39; #&#39; @examples #&#39; subtract(x = c(5,5), y = c(2,3)) subtract &lt;- function(x, y) { return(x-y) } You can add a roxygen skeleton automatically using Code &gt; Insert Roxygen Skeleton in RStudio. "],["annotate.html", "D Annotate the course notes", " D Annotate the course notes I recommend using hypothes.is to annotate the online course notes. You can create both private and public annotations. Collaborative annotation helps people connect to each other and what they’re reading, even when they’re keeping their distance. You may also use public notes to help me indicate spell errors, unclear content etc. in the notes. "],["help.html", "E Getting help", " E Getting help We all get stuck sometimes and need some help. Below are some advises on how to help yourself and ask for help: If you have a question related to the theory of RL: Ask it during the lecture or in the breaks Ask it at our course forum and we (the teacher and other students) will try to answer your question asap. If you have a question related to R: First try to understand the error message and solve the problem. You may try to debug your code by inserting browser() in your R code. Further details about debugging can be seen here. Google is your friend. This is always the next step. Try searches like “r dplyr filter”, “r tidyverse”, “r subset vector”, etc. Do you need help for a specific function in R then try ?[function-name] such as ?geom_line, ?mutate, etc. Mostly, focus on the last section with examples. Moreover, some packages may have written vignettes try browseVignettes(package = \"package_name\") to check. Have a look at Help &gt; Cheatsheets in RStudio. If you can’t find an answer then it is time to ask on-line. I recommend asking a question at stackoverflow. To make your question effective, the idea is to make things as easy as possible for someone to answer. This stack overflow thread How to make a great R reproducible example? give you some good hints. The process of providing a good minimal reproducible example (reprex) often causes you to answer your own question! See also Stack Exchange’s ‘How to ask’ and How to make a reprex at tidyverse. Ask it at our course forum and we (the teacher and other students) will try to answer your question asap. Note help using mail correspondence is not supported! "],["mod-lg-course.html", "F Learning goals", " F Learning goals The purpose of this course is to give you an introduction and knowledge about reinforcement learning (RL). After having participated in the course, you must, in addition to achieving general academic skills, demonstrate: Knowledge of RL for Bandit problems Markov decision processes and ways to optimize them the exploration vs exploitation challenge in RL and approaches for addressing this challenge the role of policy evaluation with stochastic approximation in the context of RL Skills to define the key features of RL that distinguishes it from other machine learning techniques discuss fundamental concepts in RL describe the mathematical framework of Markov decision processes formulate and solve Markov and semi-Markov decision processes for realistic problems with finite state space under different objectives apply fundamental techniques, results and concepts of RL on selected RL problems. given an application problem, decide if it should be formulated as a RL problem and define it formally (in terms of the state space, action space, dynamics and reward model) Competences to identify areas where RL are valuable select and apply the appropriate RL model for a given business problem interpret and communicate the results from RL "],["colophon.html", "G Colophon", " G Colophon This book was written in bookdown inside RStudio. This version of the book was built with: #&gt; Finding R package dependencies ... Done! #&gt; setting value #&gt; version R version 4.2.0 (2022-04-22) #&gt; os Ubuntu 20.04.4 LTS #&gt; system x86_64, linux-gnu #&gt; ui X11 #&gt; language (EN) #&gt; collate C.UTF-8 #&gt; ctype C.UTF-8 #&gt; tz UTC #&gt; date 2022-05-23 #&gt; pandoc 2.14.2 @ /usr/bin/ (via rmarkdown) Along with these packages: "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
